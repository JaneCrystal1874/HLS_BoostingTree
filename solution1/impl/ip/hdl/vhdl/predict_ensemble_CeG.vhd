-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_CeG_rom is 
    generic(
             DWIDTH     : integer := 3; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_CeG_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "100", 1 to 4=> "001", 5 => "000", 6 to 7=> "010", 8 => "000", 9 to 11=> "001", 
    12 to 13=> "000", 14 => "011", 15 to 16=> "000", 17 => "011", 18 => "000", 19 => "010", 
    20 => "000", 21 => "100", 22 => "001", 23 to 31=> "000", 32 => "100", 33 => "001", 
    34 => "000", 35 => "100", 36 => "001", 37 => "010", 38 to 39=> "000", 40 => "001", 
    41 => "010", 42 to 43=> "000", 44 => "011", 45 => "100", 46 => "000", 47 to 48=> "100", 
    49 to 50=> "000", 51 => "001", 52 => "010", 53 => "100", 54 => "011", 55 to 63=> "000", 
    64 to 65=> "010", 66 => "100", 67 => "010", 68 to 69=> "001", 70 => "100", 71 => "010", 
    72 => "100", 73 => "000", 74 => "010", 75 => "100", 76 => "001", 77 => "000", 
    78 => "010", 79 to 84=> "000", 85 => "010", 86 to 87=> "000", 88 => "100", 89 to 95=> "000", 
    96 => "001", 97 => "100", 98 => "010", 99 => "001", 100 => "000", 101 to 103=> "010", 
    104 => "001", 105 => "011", 106 to 107=> "000", 108 => "001", 109 to 110=> "010", 111 => "000", 
    112 => "100", 113 to 115=> "000", 116 => "010", 117 to 119=> "000", 120 => "100", 121 to 127=> "000", 
    128 to 129=> "001", 130 => "011", 131 => "010", 132 => "001", 133 => "100", 134 to 135=> "001", 
    136 => "100", 137 => "001", 138 to 141=> "000", 142 => "001", 143 => "100", 144 to 145=> "011", 
    146 to 149=> "000", 150 => "001", 151 to 159=> "000", 160 => "010", 161 => "011", 162 => "000", 
    163 to 165=> "010", 166 => "001", 167 to 168=> "010", 169 => "001", 170 to 172=> "000", 173 to 174=> "011", 
    175 => "000", 176 => "100", 177 to 178=> "000", 179 => "010", 180 => "011", 181 to 183=> "000", 
    184 => "100", 185 to 191=> "000", 192 to 194=> "010", 195 => "011", 196 to 197=> "000", 198 => "100", 
    199 to 200=> "011", 201 to 202=> "100", 203 to 204=> "000", 205 => "010", 206 => "011", 207 => "010", 
    208 => "001", 209 to 214=> "000", 215 => "010", 216 => "001", 217 to 223=> "000", 224 => "100", 
    225 to 226=> "001", 227 to 228=> "010", 229 => "000", 230 to 232=> "010", 233 => "100", 234 to 235=> "010", 
    236 => "001", 237 => "010", 238 to 239=> "000", 240 => "010", 241 to 247=> "000", 248 => "010", 
    249 to 255=> "000", 256 to 259=> "010", 260 to 261=> "000", 262 => "100", 263 => "010", 264 => "000", 
    265 => "100", 266 => "000", 267 => "011", 268 to 269=> "010", 270 => "000", 271 to 272=> "010", 
    273 => "000", 274 => "011", 275 to 276=> "000", 277 => "010", 278 => "100", 279 to 287=> "000", 
    288 to 292=> "010", 293 => "000", 294 => "100", 295 => "010", 296 to 298=> "000", 299 => "001", 
    300 => "100", 301 => "010", 302 => "000", 303 to 304=> "001", 305 => "010", 306 => "100", 
    307 to 314=> "000", 315 => "010", 316 to 319=> "000", 320 => "001", 321 => "100", 322 => "001", 
    323 => "010", 324 => "000", 325 => "011", 326 => "010", 327 => "000", 328 => "010", 
    329 to 330=> "000", 331 => "001", 332 => "010", 333 to 335=> "011", 336 => "000", 337 => "001", 
    338 => "010", 339 to 347=> "000", 348 => "010", 349 to 351=> "000", 352 to 353=> "001", 354 => "100", 
    355 => "001", 356 to 357=> "000", 358 => "100", 359 to 361=> "001", 362 => "011", 363 to 364=> "001", 
    365 => "000", 366 => "010", 367 => "000", 368 => "010", 369 => "000", 370 to 371=> "001", 
    372 to 383=> "000", 384 => "001", 385 to 387=> "100", 388 => "011", 389 => "100", 390 => "001", 
    391 => "010", 392 => "000", 393 => "010", 394 => "000", 395 => "001", 396 => "010", 
    397 => "000", 398 => "001", 399 to 401=> "000", 402 => "010", 403 to 405=> "000", 406 => "100", 
    407 => "000", 408 => "001", 409 to 415=> "000", 416 => "001", 417 => "010", 418 => "001", 
    419 => "000", 420 => "001", 421 => "000", 422 => "100", 423 => "010", 424 => "000", 
    425 => "100", 426 => "001", 427 => "000", 428 => "001", 429 => "100", 430 => "010", 
    431 => "100", 432 => "001", 433 to 437=> "000", 438 => "100", 439 to 440=> "000", 441 => "011", 
    442 to 447=> "000", 448 to 450=> "010", 451 => "011", 452 to 453=> "000", 454 => "010", 455 to 457=> "001", 
    458 => "010", 459 => "001", 460 => "010", 461 to 462=> "100", 463 => "001", 464 to 465=> "000", 
    466 => "010", 467 to 479=> "000", 480 to 482=> "010", 483 to 484=> "000", 485 => "001", 486 to 487=> "010", 
    488 to 489=> "000", 490 => "100", 491 to 493=> "000", 494 to 496=> "100", 497 to 499=> "000", 500 => "100", 
    501 => "000", 502 to 504=> "010", 505 to 507=> "000", 508 => "010", 509 to 511=> "000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_CeG is
    generic (
        DataWidth : INTEGER := 3;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_CeG is
    component predict_ensemble_CeG_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_CeG_rom_U :  component predict_ensemble_CeG_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


