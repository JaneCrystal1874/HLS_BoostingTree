-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_g8j_rom is 
    generic(
             DWIDTH     : integer := 3; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_g8j_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "011", 1 => "010", 2 => "100", 3 to 5=> "010", 6 => "100", 7 => "000", 
    8 => "001", 9 => "011", 10 to 11=> "010", 12 to 13=> "001", 14 to 17=> "000", 18 => "011", 
    19 to 22=> "000", 23 => "100", 24 to 31=> "000", 32 to 35=> "010", 36 => "000", 37 => "001", 
    38 to 39=> "010", 40 to 41=> "000", 42 => "100", 43 => "001", 44 => "010", 45 => "001", 
    46 to 48=> "000", 49 => "010", 50 to 51=> "000", 52 => "010", 53 => "001", 54 to 56=> "000", 
    57 => "010", 58 to 63=> "000", 64 to 66=> "001", 67 => "100", 68 to 69=> "000", 70 => "001", 
    71 => "100", 72 => "000", 73 => "010", 74 => "100", 75 => "001", 76 => "100", 
    77 to 78=> "000", 79 to 80=> "100", 81 => "001", 82 => "010", 83 to 84=> "000", 85 => "010", 
    86 to 95=> "000", 96 => "100", 97 => "011", 98 => "100", 99 => "001", 100 => "100", 
    101 => "000", 102 => "011", 103 to 104=> "000", 105 => "001", 106 => "000", 107 to 108=> "010", 
    109 => "011", 110 to 112=> "010", 113 => "001", 114 to 120=> "000", 121 => "001", 122 to 127=> "000", 
    128 => "010", 129 => "100", 130 => "000", 131 => "100", 132 => "001", 133 => "010", 
    134 => "001", 135 => "000", 136 => "011", 137 => "010", 138 => "011", 139 => "001", 
    140 to 141=> "100", 142 => "010", 143 => "000", 144 => "100", 145 to 150=> "000", 151 => "001", 
    152 to 159=> "000", 160 to 161=> "100", 162 => "010", 163 => "001", 164 => "000", 165 => "010", 
    166 => "100", 167 to 168=> "001", 169 => "010", 170 => "000", 171 => "100", 172 to 173=> "001", 
    174 to 175=> "000", 176 => "001", 177 to 178=> "000", 179 => "100", 180 to 181=> "000", 182 => "011", 
    183 to 191=> "000", 192 => "100", 193 => "011", 194 => "100", 195 => "010", 196 => "100", 
    197 => "000", 198 => "001", 199 to 200=> "000", 201 => "001", 202 to 204=> "010", 205 to 208=> "000", 
    209 to 210=> "010", 211 to 212=> "001", 213 to 214=> "000", 215 => "010", 216 to 223=> "000", 224 to 226=> "010", 
    227 => "011", 228 => "001", 229 to 230=> "010", 231 => "001", 232 => "100", 233 => "011", 
    234 => "000", 235 => "001", 236 to 237=> "000", 238 to 240=> "010", 241 to 247=> "000", 248 => "010", 
    249 to 255=> "000", 256 => "001", 257 => "000", 258 to 259=> "100", 260 => "010", 261 to 262=> "100", 
    263 => "010", 264 to 265=> "001", 266 => "100", 267 => "000", 268 => "001", 269 to 272=> "000", 
    273 => "001", 274 to 277=> "000", 278 => "010", 279 to 280=> "000", 281 => "010", 282 => "011", 
    283 to 287=> "000", 288 => "011", 289 => "000", 290 => "010", 291 => "100", 292 => "010", 
    293 to 294=> "000", 295 => "011", 296 => "010", 297 => "100", 298 => "000", 299 => "001", 
    300 => "010", 301 to 302=> "100", 303 to 305=> "000", 306 => "011", 307 => "000", 308 => "010", 
    309 => "000", 310 => "100", 311 => "010", 312 to 319=> "000", 320 to 322=> "010", 323 => "100", 
    324 => "000", 325 to 326=> "010", 327 to 328=> "100", 329 to 330=> "000", 331 => "001", 332 => "010", 
    333 => "001", 334 to 335=> "000", 336 => "001", 337 => "010", 338 => "000", 339 => "010", 
    340 => "001", 341 to 351=> "000", 352 => "100", 353 => "010", 354 => "000", 355 => "010", 
    356 => "001", 357 => "010", 358 to 359=> "000", 360 => "100", 361 => "010", 362 => "000", 
    363 => "100", 364 => "001", 365 => "010", 366 => "100", 367 to 368=> "000", 369 => "010", 
    370 => "001", 371 to 373=> "000", 374 => "001", 375 to 376=> "000", 377 => "100", 378 to 383=> "000", 
    384 => "100", 385 => "001", 386 => "100", 387 => "011", 388 => "001", 389 => "010", 
    390 => "100", 391 => "010", 392 to 397=> "000", 398 => "100", 399 => "011", 400 => "000", 
    401 => "001", 402 => "100", 403 to 404=> "000", 405 to 407=> "001", 408 to 415=> "000", 416 => "100", 
    417 => "010", 418 => "100", 419 => "011", 420 => "010", 421 => "011", 422 => "001", 
    423 => "010", 424 => "001", 425 => "000", 426 => "001", 427 => "000", 428 => "010", 
    429 => "011", 430 => "010", 431 to 432=> "000", 433 to 434=> "001", 435 to 447=> "000", 448 => "001", 
    449 => "100", 450 to 451=> "001", 452 => "000", 453 => "011", 454 to 455=> "001", 456 => "100", 
    457 => "000", 458 => "011", 459 => "000", 460 => "001", 461 => "011", 462 => "000", 
    463 => "100", 464 => "010", 465 to 466=> "000", 467 to 468=> "001", 469 to 479=> "000", 480 to 481=> "010", 
    482 => "001", 483 => "010", 484 => "001", 485 => "010", 486 => "100", 487 => "001", 
    488 to 492=> "000", 493 => "001", 494 => "010", 495 => "001", 496 => "010", 497 to 498=> "000", 
    499 to 501=> "100", 502 to 511=> "000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_g8j is
    generic (
        DataWidth : INTEGER := 3;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_g8j is
    component predict_ensemble_g8j_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_g8j_rom_U :  component predict_ensemble_g8j_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


