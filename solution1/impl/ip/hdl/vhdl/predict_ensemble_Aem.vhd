-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_Aem_rom is 
    generic(
             DWIDTH     : integer := 3; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_Aem_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "100", 1 => "010", 2 => "100", 3 to 4=> "010", 5 => "000", 6 => "001", 
    7 => "010", 8 => "001", 9 to 10=> "000", 11 => "010", 12 => "001", 13 => "010", 
    14 => "100", 15 to 16=> "000", 17 => "011", 18 => "001", 19 => "000", 20 => "001", 
    21 to 31=> "000", 32 => "001", 33 => "000", 34 to 37=> "100", 38 to 39=> "000", 40 => "010", 
    41 to 42=> "100", 43 => "010", 44 => "000", 45 => "001", 46 => "010", 47 to 48=> "000", 
    49 to 50=> "011", 51 to 52=> "001", 53 to 63=> "000", 64 to 66=> "010", 67 => "001", 68 to 69=> "000", 
    70 to 72=> "001", 73 => "000", 74 => "100", 75 => "011", 76 => "010", 77 to 78=> "001", 
    79 => "010", 80 => "001", 81 to 84=> "000", 85 => "001", 86 to 95=> "000", 96 to 98=> "010", 
    99 to 101=> "000", 102 to 104=> "001", 105 => "100", 106 => "010", 107 => "100", 108 => "010", 
    109 => "001", 110 => "100", 111 => "010", 112 => "011", 113 to 115=> "000", 116 => "001", 
    117 to 127=> "000", 128 => "001", 129 => "100", 130 => "001", 131 => "011", 132 => "100", 
    133 => "001", 134 => "100", 135 => "010", 136 to 140=> "000", 141 => "011", 142 to 143=> "001", 
    144 => "000", 145 => "100", 146 => "001", 147 => "011", 148 => "001", 149 to 159=> "000", 
    160 to 161=> "011", 162 => "100", 163 to 164=> "000", 165 to 166=> "100", 167 => "001", 168 => "011", 
    169 => "001", 170 to 171=> "100", 172 to 174=> "000", 175 => "001", 176 => "000", 177 => "011", 
    178 => "100", 179 to 180=> "000", 181 => "010", 182 to 185=> "000", 186 => "001", 187 to 191=> "000", 
    192 to 193=> "011", 194 => "000", 195 => "100", 196 => "010", 197 => "100", 198 => "001", 
    199 => "000", 200 => "010", 201 => "100", 202 => "000", 203 => "100", 204 => "001", 
    205 => "000", 206 => "100", 207 to 210=> "000", 211 => "100", 212 to 213=> "010", 214 => "001", 
    215 to 223=> "000", 224 to 225=> "011", 226 => "100", 227 => "000", 228 to 229=> "100", 230 => "010", 
    231 => "000", 232 to 234=> "100", 235 => "001", 236 to 238=> "000", 239 => "100", 240 => "000", 
    241 => "010", 242 => "100", 243 to 244=> "000", 245 => "001", 246 to 247=> "000", 248 => "010", 
    249 to 255=> "000", 256 => "001", 257 => "100", 258 => "001", 259 => "100", 260 => "010", 
    261 => "000", 262 => "001", 263 => "100", 264 => "001", 265 => "000", 266 => "001", 
    267 => "000", 268 => "001", 269 => "011", 270 to 271=> "000", 272 => "001", 273 to 274=> "000", 
    275 to 276=> "010", 277 => "000", 278 => "100", 279 to 287=> "000", 288 => "010", 289 => "001", 
    290 to 291=> "010", 292 => "100", 293 => "001", 294 => "010", 295 => "000", 296 to 297=> "100", 
    298 => "000", 299 => "100", 300 => "001", 301 => "000", 302 => "011", 303 to 309=> "000", 
    310 => "100", 311 to 312=> "010", 313 to 319=> "000", 320 to 323=> "001", 324 => "010", 325 => "100", 
    326 to 327=> "001", 328 => "000", 329 => "010", 330 => "100", 331 to 333=> "000", 334 => "011", 
    335 => "001", 336 => "010", 337 => "100", 338 to 341=> "000", 342 => "001", 343 to 351=> "000", 
    352 to 353=> "010", 354 => "000", 355 => "010", 356 => "001", 357 => "010", 358 => "011", 
    359 to 360=> "000", 361 => "010", 362 => "001", 363 => "010", 364 => "001", 365 => "100", 
    366 to 367=> "000", 368 => "010", 369 => "011", 370 => "010", 371 => "100", 372 to 383=> "000", 
    384 => "010", 385 => "000", 386 to 390=> "100", 391 => "000", 392 => "100", 393 => "001", 
    394 to 396=> "000", 397 to 398=> "100", 399 => "001", 400 => "000", 401 => "010", 402 => "011", 
    403 => "010", 404 => "100", 405 to 415=> "000", 416 => "010", 417 => "001", 418 => "010", 
    419 => "100", 420 => "000", 421 => "001", 422 to 423=> "010", 424 => "011", 425 to 427=> "000", 
    428 => "010", 429 to 430=> "001", 431 to 433=> "000", 434 => "010", 435 => "100", 436 to 439=> "000", 
    440 => "010", 441 to 443=> "000", 444 => "010", 445 to 447=> "000", 448 => "001", 449 to 451=> "100", 
    452 => "011", 453 to 454=> "100", 455 => "001", 456 => "000", 457 => "010", 458 => "000", 
    459 => "010", 460 to 461=> "000", 462 => "001", 463 => "000", 464 => "010", 465 to 466=> "000", 
    467 => "010", 468 => "000", 469 => "010", 470 => "100", 471 to 479=> "000", 480 => "010", 
    481 => "100", 482 => "010", 483 => "011", 484 => "100", 485 => "000", 486 to 488=> "001", 
    489 => "010", 490 => "100", 491 => "010", 492 => "001", 493 to 499=> "000", 500 => "001", 
    501 => "100", 502 => "010", 503 to 511=> "000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_Aem is
    generic (
        DataWidth : INTEGER := 3;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_Aem is
    component predict_ensemble_Aem_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_Aem_rom_U :  component predict_ensemble_Aem_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


