-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_rcU_rom is 
    generic(
             DWIDTH     : integer := 5; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_rcU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00010", 1 => "00100", 2 => "00110", 3 => "01000", 4 => "01010", 
    5 => "01100", 6 => "01110", 7 => "10000", 8 => "10010", 9 to 10=> "00000", 
    11 => "10100", 12 => "10110", 13 => "00000", 14 => "11000", 15 => "11010", 
    16 => "00000", 17 => "11100", 18 => "11110", 19 to 31=> "00000", 32 => "00010", 
    33 => "00000", 34 => "00100", 35 => "00110", 36 => "01000", 37 to 38=> "00000", 
    39 => "01010", 40 => "01100", 41 to 42=> "00000", 43 => "01110", 44 => "00000", 
    45 => "10000", 46 to 47=> "00000", 48 => "10010", 49 => "10100", 50 => "00000", 
    51 => "10110", 52 => "11000", 53 => "11010", 54 => "00000", 55 => "11100", 
    56 => "11110", 57 to 63=> "00000", 64 => "00010", 65 => "00100", 66 => "00110", 
    67 to 68=> "00000", 69 => "01000", 70 => "01010", 71 to 73=> "00000", 74 => "01100", 
    75 => "01110", 76 => "10000", 77 to 79=> "00000", 80 => "10010", 81 => "00000", 
    82 => "10100", 83 => "10110", 84 => "11000", 85 => "11010", 86 => "00000", 
    87 => "11100", 88 => "11110", 89 to 95=> "00000", 96 => "00010", 97 => "00100", 
    98 => "00110", 99 to 101=> "00000", 102 => "01000", 103 => "00000", 104 => "01010", 
    105 => "01100", 106 => "01110", 107 => "10000", 108 => "10010", 109 => "00000", 
    110 => "10100", 111 => "10110", 112 to 115=> "00000", 116 => "11000", 117 => "11010", 
    118 => "11100", 119 => "00000", 120 => "11110", 121 to 127=> "00000", 128 => "00010", 
    129 => "00100", 130 => "00110", 131 => "01000", 132 => "01010", 133 => "01100", 
    134 => "01110", 135 => "10000", 136 => "10010", 137 => "10100", 138 => "10110", 
    139 => "11000", 140 => "11010", 141 => "00000", 142 => "11100", 143 to 148=> "00000", 
    149 => "11110", 150 to 159=> "00000", 160 => "00010", 161 => "00100", 162 => "00110", 
    163 => "01000", 164 => "01010", 165 to 166=> "00000", 167 => "01100", 168 => "01110", 
    169 => "10000", 170 => "00000", 171 => "10010", 172 => "10100", 173 to 174=> "00000", 
    175 => "10110", 176 => "00000", 177 => "11000", 178 => "11010", 179 => "00000", 
    180 => "11100", 181 to 182=> "00000", 183 => "11110", 184 to 191=> "00000", 192 => "00010", 
    193 => "00100", 194 => "00110", 195 => "01000", 196 => "01010", 197 => "01100", 
    198 => "01110", 199 => "10000", 200 => "10010", 201 => "10100", 202 => "10110", 
    203 to 205=> "00000", 206 => "11000", 207 => "11010", 208 => "11100", 209 to 213=> "00000", 
    214 => "11110", 215 to 223=> "00000", 224 => "00010", 225 => "00100", 226 => "00000", 
    227 => "00110", 228 => "01000", 229 => "01010", 230 => "01100", 231 => "01110", 
    232 => "10000", 233 => "10010", 234 => "10100", 235 => "00000", 236 => "10110", 
    237 => "11000", 238 => "11010", 239 => "11100", 240 => "11110", 241 to 255=> "00000", 
    256 => "00010", 257 => "00100", 258 => "00110", 259 => "01000", 260 => "01010", 
    261 => "00000", 262 => "01100", 263 => "01110", 264 => "00000", 265 => "10000", 
    266 => "00000", 267 => "10010", 268 => "10100", 269 => "00000", 270 => "10110", 
    271 => "00000", 272 => "11000", 273 => "00000", 274 => "11010", 275 => "11100", 
    276 => "11110", 277 to 287=> "00000", 288 => "00010", 289 => "00100", 290 => "00110", 
    291 => "01000", 292 => "00000", 293 => "01010", 294 => "01100", 295 => "01110", 
    296 => "10000", 297 to 298=> "00000", 299 => "10010", 300 => "10100", 301 => "10110", 
    302 => "11000", 303 => "11010", 304 => "11100", 305 => "11110", 306 to 319=> "00000", 
    320 => "00010", 321 => "00100", 322 => "00110", 323 => "01000", 324 => "01010", 
    325 => "01100", 326 => "01110", 327 => "10000", 328 to 330=> "00000", 331 => "10010", 
    332 => "10100", 333 => "10110", 334 => "11000", 335 => "00000", 336 => "11010", 
    337 => "11100", 338 to 343=> "00000", 344 => "11110", 345 to 351=> "00000", 352 => "00010", 
    353 => "00100", 354 => "00110", 355 => "01000", 356 => "01010", 357 => "01100", 
    358 => "01110", 359 to 360=> "00000", 361 => "10000", 362 => "10010", 363 => "10100", 
    364 => "10110", 365 => "11000", 366 => "11010", 367 to 372=> "00000", 373 => "11100", 
    374 to 375=> "00000", 376 => "11110", 377 to 383=> "00000", 384 => "00010", 385 => "00100", 
    386 => "00110", 387 => "01000", 388 => "01010", 389 => "00000", 390 => "01100", 
    391 => "01110", 392 => "10000", 393 to 395=> "00000", 396 => "10010", 397 => "10100", 
    398 => "10110", 399 => "00000", 400 => "11000", 401 => "11010", 402 => "11100", 
    403 => "11110", 404 to 415=> "00000", 416 => "00010", 417 => "00100", 418 => "00110", 
    419 => "01000", 420 => "01010", 421 => "01100", 422 => "01110", 423 => "10000", 
    424 => "10010", 425 to 426=> "00000", 427 => "10100", 428 => "10110", 429 => "11000", 
    430 => "00000", 431 => "11010", 432 => "11100", 433 to 438=> "00000", 439 => "11110", 
    440 to 447=> "00000", 448 => "00010", 449 => "00100", 450 => "00110", 451 => "01000", 
    452 => "01010", 453 => "00000", 454 => "01100", 455 => "01110", 456 => "10000", 
    457 to 459=> "00000", 460 => "10010", 461 => "10100", 462 => "10110", 463 => "11000", 
    464 => "11010", 465 => "11100", 466 => "11110", 467 to 479=> "00000", 480 => "00010", 
    481 => "00100", 482 => "00110", 483 => "01000", 484 => "00000", 485 => "01010", 
    486 => "01100", 487 => "01110", 488 to 489=> "00000", 490 => "10000", 491 => "10010", 
    492 => "10100", 493 => "10110", 494 => "11000", 495 to 497=> "00000", 498 => "11010", 
    499 => "11100", 500 => "11110", 501 to 511=> "00000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_rcU is
    generic (
        DataWidth : INTEGER := 5;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_rcU is
    component predict_ensemble_rcU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_rcU_rom_U :  component predict_ensemble_rcU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


