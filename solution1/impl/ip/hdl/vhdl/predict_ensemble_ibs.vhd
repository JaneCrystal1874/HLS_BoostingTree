-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_ibs_rom is 
    generic(
             DWIDTH     : integer := 3; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_ibs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 3=> "010", 4 to 5=> "000", 6 to 7=> "100", 8 => "000", 9 => "100", 10 => "010", 
    11 => "001", 12 to 13=> "100", 14 => "010", 15 => "000", 16 => "100", 17 => "000", 
    18 => "001", 19 to 23=> "000", 24 => "010", 25 to 31=> "000", 32 to 34=> "001", 35 => "100", 
    36 to 37=> "000", 38 => "010", 39 => "100", 40 => "001", 41 => "010", 42 => "001", 
    43 to 44=> "100", 45 to 46=> "000", 47 => "010", 48 => "100", 49 => "010", 50 => "100", 
    51 to 63=> "000", 64 to 65=> "010", 66 => "000", 67 => "001", 68 => "010", 69 to 70=> "001", 
    71 => "000", 72 to 73=> "010", 74 to 75=> "000", 76 => "001", 77 to 78=> "000", 79 => "010", 
    80 => "001", 81 => "000", 82 => "100", 83 => "001", 84 to 86=> "000", 87 => "011", 
    88 => "010", 89 to 95=> "000", 96 => "001", 97 => "100", 98 to 99=> "001", 100 => "000", 
    101 to 102=> "001", 103 => "100", 104 => "000", 105 => "011", 106 to 107=> "000", 108 to 109=> "100", 
    110 => "000", 111 => "001", 112 => "011", 113 => "010", 114 => "100", 115 to 121=> "000", 
    122 => "010", 123 to 127=> "000", 128 to 131=> "010", 132 => "100", 133 => "000", 134 to 135=> "100", 
    136 to 138=> "000", 139 => "010", 140 to 142=> "100", 143 => "000", 144 => "100", 145 => "001", 
    146 to 147=> "100", 148 to 159=> "000", 160 => "100", 161 => "010", 162 => "100", 163 to 165=> "000", 
    166 => "001", 167 => "000", 168 => "010", 169 => "001", 170 => "010", 171 to 172=> "000", 
    173 to 174=> "010", 175 to 180=> "001", 181 to 191=> "000", 192 => "001", 193 => "100", 194 => "010", 
    195 => "100", 196 => "001", 197 => "000", 198 => "100", 199 => "001", 200 to 201=> "000", 
    202 => "100", 203 to 204=> "000", 205 => "100", 206 => "000", 207 => "011", 208 to 209=> "010", 
    210 to 211=> "000", 212 to 213=> "010", 214 => "011", 215 to 223=> "000", 224 => "010", 225 => "001", 
    226 => "010", 227 => "001", 228 => "011", 229 => "000", 230 to 231=> "001", 232 to 234=> "000", 
    235 => "010", 236 => "001", 237 to 238=> "010", 239 to 240=> "100", 241 => "010", 242 => "100", 
    243 to 255=> "000", 256 => "011", 257 => "001", 258 => "100", 259 to 260=> "001", 261 => "100", 
    262 to 263=> "001", 264 => "011", 265 => "000", 266 => "100", 267 => "010", 268 => "000", 
    269 => "010", 270 => "001", 271 to 273=> "000", 274 => "100", 275 to 276=> "000", 277 => "010", 
    278 to 287=> "000", 288 to 291=> "010", 292 to 293=> "000", 294 => "011", 295 => "001", 296 => "000", 
    297 => "010", 298 => "001", 299 => "000", 300 => "001", 301 => "100", 302 => "010", 
    303 to 304=> "001", 305 to 306=> "000", 307 => "010", 308 to 313=> "000", 314 => "100", 315 to 319=> "000", 
    320 => "001", 321 => "000", 322 => "001", 323 => "100", 324 => "001", 325 => "010", 
    326 => "001", 327 to 330=> "010", 331 to 334=> "000", 335 to 336=> "010", 337 => "000", 338 => "100", 
    339 to 340=> "000", 341 => "001", 342 => "000", 343 => "100", 344 to 351=> "000", 352 to 353=> "010", 
    354 => "000", 355 => "100", 356 => "000", 357 to 358=> "100", 359 => "001", 360 to 361=> "000", 
    362 => "100", 363 => "001", 364 => "000", 365 to 366=> "100", 367 to 368=> "001", 369 => "100", 
    370 => "001", 371 => "000", 372 => "100", 373 to 383=> "000", 384 to 387=> "001", 388 => "000", 
    389 to 390=> "100", 391 => "001", 392 => "100", 393 to 395=> "000", 396 => "100", 397 => "011", 
    398 to 399=> "000", 400 => "100", 401 => "001", 402 => "011", 403 to 408=> "000", 409 => "001", 
    410 => "100", 411 to 415=> "000", 416 to 417=> "100", 418 => "001", 419 => "010", 420 => "000", 
    421 to 422=> "001", 423 => "010", 424 => "011", 425 => "001", 426 to 428=> "100", 429 to 430=> "000", 
    431 => "001", 432 to 438=> "000", 439 to 440=> "100", 441 to 447=> "000", 448 to 450=> "011", 451 => "010", 
    452 => "000", 453 to 454=> "010", 455 to 457=> "000", 458 => "010", 459 => "001", 460 => "010", 
    461 to 462=> "000", 463 to 465=> "001", 466 => "010", 467 to 468=> "000", 469 => "100", 470 => "000", 
    471 => "100", 472 to 479=> "000", 480 to 481=> "010", 482 => "001", 483 => "100", 484 => "000", 
    485 => "010", 486 to 488=> "001", 489 to 490=> "100", 491 => "000", 492 => "001", 493 => "000", 
    494 to 495=> "011", 496 to 497=> "000", 498 => "100", 499 => "001", 500 to 511=> "000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_ibs is
    generic (
        DataWidth : INTEGER := 3;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_ibs is
    component predict_ensemble_ibs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_ibs_rom_U :  component predict_ensemble_ibs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


