-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_WhU_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_WhU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111101011001000000111010", 
    1 => "10111100001110011010010110101001", 
    2 => "00111100010100011010011001010000", 
    3 => "00111100100100001110101010011110", 
    4 => "00111111010101011101000101110000", 
    5 => "00111111011010111111011000001010", 
    6 => "00111110110110000100111000011110", 
    7 => "00111101110011000001011111101100", 
    8 => "10111011110110110100100010010001", 
    9 => "00111110100101000010100011010100", 
    10 => "00111111010111101000101110100000", 
    11 => "00111111000001111010110000111111", 
    12 => "00111111011101000001100100111011", 
    13 => "00111101100010100000010001001011", 
    14 => "00111010101001011010110011001101", 
    15 => "10111100100110000000011011110010", 
    16 => "10111011100100000011111010100111", 
    17 => "00111110111110010101001111011111", 
    18 => "00111111000101010110001001101011", 
    19 => "00111111010011000011101100111111", 
    20 => "00111110111111101010101000001000", 
    21 => "00111010011010100001100000110111", 
    22 => "10111011100011010101110001110100", 
    23 => "00111111011010100110001000100100", 
    24 => "00111100111100000110100100011111", 
    25 => "10111100100000001110110011111010", 
    26 => "00111011011111111101101001000000", 
    27 => "00111111011100101010010000110011", 
    28 => "00111110111000111111111011000001", 
    29 => "10111100000100101001011001110000", 
    30 => "00111010001110110110111011010110", 
    31 => "00111111001001000101110100010000", 
    32 => "00111110111101110110110111011011", 
    33 => "00111110101010110100011111000111", 
    34 => "00111011100101010111110011010100", 
    35 => "00111110011000101111100010111110", 
    36 => "00111111010111110000111000001011", 
    37 => "00111011000010000101000010011100", 
    38 => "00111100010001111011110011000011", 
    39 => "10111100000010101010110010010111", 
    40 => "10111010011000010010111010000100", 
    41 => "00111110101001001011101110000000", 
    42 => "00111110100010101010001011100100", 
    43 => "00111011000101110011000100001010", 
    44 => "00111011110110010100000001111001", 
    45 => "00111010110100110010100000110001", 
    46 => "10111010111101101100111011111111", 
    47 => "00111110101011011111001110110110", 
    48 => "00111110111001111110001000011110", 
    49 => "00111110100000001001100000101101", 
    50 => "00111110000000100000100100100100", 
    51 => "00111110100110101000000000101000", 
    52 => "00111110110010101100100000011101", 
    53 => "10111011000101111100100000001000", 
    54 => "10111011101100110011010101001100", 
    55 => "00111110100100010000011010001010", 
    56 => "00111011110010011001011010110111", 
    57 => "00111101111101111010110101001011", 
    58 => "00111110000001111110011011110111", 
    59 => "00111110000010001001111010111010", 
    60 => "00111011100110100011110100101110", 
    61 => "00111111000011011101100000110000", 
    62 => "00111110010100101111010110011001", 
    63 => "00111011010111000010001010101011", 
    64 => "10111010010111011000001011111101", 
    65 => "10111010010011100100111010101101", 
    66 => "00111100000101000000101110111011", 
    67 => "10111011101101111010000111000010", 
    68 => "00111110101000101101001000010011", 
    69 => "00111011000011000110000011001100", 
    70 => "00111110110001011101011010011101", 
    71 => "10111011010011001000100110110001", 
    72 => "10111100000101111110100110010110", 
    73 => "00111011010100001110110111000100", 
    74 => "00111111000010000111011010001110", 
    75 => "00111110101111111000101000101011", 
    76 => "00111110101011001111010110010000", 
    77 => "10111011001001101111110001011001", 
    78 => "00111110000001010001011110100100", 
    79 => "10111010101010001011000010001110", 
    80 => "00111010110000001100111010010010", 
    81 => "10111010010110010101000101000000", 
    82 => "10111011100000111010000100001010", 
    83 => "00111011100110000100111001000000", 
    84 => "00111110101011111001001111111111", 
    85 => "00111110011100010000000111110011", 
    86 => "00111010111100010010110000101000", 
    87 => "00111011100001110011101111001001", 
    88 => "00111111011001100011110110010010", 
    89 => "00111110010011100110110101011001", 
    90 => "10111011000010110101010001011100", 
    91 => "00111111010011111011010111100001", 
    92 => "00111011011000011001001100101101", 
    93 => "10111010010110001000011111101100", 
    94 => "00111011001000011010110101100100", 
    95 => "00111111011000100100000011001000", 
    96 => "00111110101110010001001111101000", 
    97 => "00111111010100000010101111011000", 
    98 => "00111011010110101110001111100111", 
    99 => "00111111010111100010101101011010", 
    100 => "10111011011111010101110010111000", 
    101 => "00111110111111000001110100101010", 
    102 => "10111011011000001010100001001100", 
    103 => "10111011001001011110111111101001", 
    104 => "10111010100111111110100001101000", 
    105 => "00111110101001100010000111111011", 
    106 => "00111101110101011001010111111111", 
    107 => "00111110101001011110100111100010", 
    108 => "00111110110000110111111110111111", 
    109 => "00111011001010011110111101010010", 
    110 => "00111110110110100010111001111111", 
    111 => "10111011001011011111111110000010", 
    112 => "00111010100001110010001010011111", 
    113 => "00111011010100100010110010001000", 
    114 => "00111110110100011111010111100000", 
    115 => "00111111000010010011101011000101", 
    116 => "00111110000100000000000001000011", 
    117 => "10111010101001110001110111100111", 
    118 => "00111110101100101010001110001100", 
    119 => "10111011001110001011111011111001", 
    120 => "00111110101111101011000111000100", 
    121 => "00111010110110001000011111101100", 
    122 => "00111110000111111010010011000110", 
    123 => "00111110000101110100010110111111", 
    124 => "00111111000000001111000010000100", 
    125 => "00111001101001010010011010010110", 
    126 => "00111110111111001011100111001011", 
    127 => "10111011001001101110101110010010", 
    128 => "00111110001010110110111101011101", 
    129 => "00111010101110010011010001101010", 
    130 => "00111011010011011010011011100111", 
    131 => "10111010100000011100001011100011", 
    132 => "00111110101100110111011101011100", 
    133 => "00111110101111001010101011111100", 
    134 => "10111011000011011001111110010000", 
    135 => "00111011010000101101011010101010", 
    136 => "00111110100010001101001100101000", 
    137 => "10111001011001111011110000111100", 
    138 => "00111110111001011101000110000001", 
    139 => "10111010101100000100101010110110", 
    140 => "10111000110101011110100011010101", 
    141 => "00111110110111111100010010100000", 
    142 => "00111111001001101111101111110100", 
    143 => "00111111001101001000111010101100", 
    144 => "00111111000100110010000101100000", 
    145 => "10111001110101101111010101000101", 
    146 => "10111011001111110011101111101011", 
    147 => "00111110101100110110010101100111", 
    148 => "00111111001010111011001111001000", 
    149 => "00111011010010000001010011010111", 
    150 => "00111010101000111111100010011000", 
    151 => "10111001111001111011110000111100", 
    152 => "00111010101111000011100000101010", 
    153 => "00111110111100101110011100101110", 
    154 => "00111110111100010111010001100000", 
    155 => "10111011010011001101110110010100", 
    156 => "00111111001000100110111001110110", 
    157 => "00111111001100100000101111000100", 
    158 => "10111010111010100001100000110111", 
    159 => "00111011001110010110011010111110", 
    160 => "00111111001011010001011101000000", 
    161 => "00111110111100100101000111100011", 
    162 => "10111010110010111010111110010110", 
    163 => "00111010100101100101011011101111", 
    164 => "10111010001101111100001101010000", 
    165 => "00111110000010001100101100001000", 
    166 => "00111111000010011100011001011100", 
    167 => "10111010100101110100000111010001", 
    168 => "00111110111111001000010101011110", 
    169 => "10111010111111100110100100100111", 
    170 => "00111111001011001011000011010001", 
    171 => "00111010000101100111100001111101", 
    172 => "00111011001101110000101011000100", 
    173 => "00111111000010100010111010010000", 
    174 => "10111010001111010100010010011010", 
    175 => "00111110111001000010001010001010", 
    176 => "00111111000010110001011111011111", 
    177 => "00111001110000110000100011111111", 
    178 => "00111010101101111100001101010000", 
    179 => "00111110111101000110010011011100", 
    180 => "10111011001100111000000011001011", 
    181 => "00111110101001011110010101101101", 
    182 => "00111111000101111110011000001100", 
    183 => "10111010010000000010011011001100", 
    184 => "00111010101010100100001100110101", 
    185 => "00111001101111110101110101111001", 
    186 => "00111011000001000100000001101100", 
    187 => "10111010101101010110011101010101", 
    188 => "00111111011001110111100000000011", 
    189 => "00111111001000111110110011001100", 
    190 => "10111010010000100011111110101011", 
    191 => "00111111000111000110001111110001", 
    192 => "10111001100111110110001000110000", 
    193 => "00111010110011100000101110010001", 
    194 => "00111001100111101101101111111001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_WhU is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_WhU is
    component predict_ensemble_WhU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_WhU_rom_U :  component predict_ensemble_WhU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


