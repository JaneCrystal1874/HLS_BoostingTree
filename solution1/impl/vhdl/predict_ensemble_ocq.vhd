-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_ocq_rom is 
    generic(
             DWIDTH     : integer := 5; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_ocq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00001", 1 => "00011", 2 => "00101", 3 => "00111", 4 => "01001", 
    5 => "01011", 6 => "01101", 7 => "00000", 8 => "01111", 9 => "10001", 
    10 => "10011", 11 => "10101", 12 => "10111", 13 => "11001", 14 to 17=> "00000", 
    18 => "11011", 19 to 22=> "00000", 23 => "11101", 24 to 31=> "00000", 32 => "00001", 
    33 => "00011", 34 => "00101", 35 => "00111", 36 => "00000", 37 => "01001", 
    38 => "01011", 39 => "01101", 40 to 41=> "00000", 42 => "01111", 43 => "10001", 
    44 => "10011", 45 => "10101", 46 to 48=> "00000", 49 => "10111", 50 to 51=> "00000", 
    52 => "11001", 53 => "11011", 54 to 56=> "00000", 57 => "11101", 58 to 63=> "00000", 
    64 => "00001", 65 => "00011", 66 => "00101", 67 => "00111", 68 to 69=> "00000", 
    70 => "01001", 71 => "01011", 72 => "00000", 73 => "01101", 74 => "01111", 
    75 => "10001", 76 => "10011", 77 to 78=> "00000", 79 => "10101", 80 => "10111", 
    81 => "11001", 82 => "11011", 83 to 84=> "00000", 85 => "11101", 86 to 95=> "00000", 
    96 => "00001", 97 => "00011", 98 => "00101", 99 => "00111", 100 => "01001", 
    101 => "00000", 102 => "01011", 103 to 104=> "00000", 105 => "01101", 106 => "00000", 
    107 => "01111", 108 => "10001", 109 => "10011", 110 => "10101", 111 => "10111", 
    112 => "11001", 113 => "11011", 114 to 120=> "00000", 121 => "11101", 122 to 127=> "00000", 
    128 => "00001", 129 => "00011", 130 => "00000", 131 => "00101", 132 => "00111", 
    133 => "01001", 134 => "01011", 135 => "00000", 136 => "01101", 137 => "01111", 
    138 => "10001", 139 => "10011", 140 => "10101", 141 => "10111", 142 => "11001", 
    143 => "00000", 144 => "11011", 145 to 150=> "00000", 151 => "11101", 152 to 159=> "00000", 
    160 => "00001", 161 => "00011", 162 => "00101", 163 => "00111", 164 => "00000", 
    165 => "01001", 166 => "01011", 167 => "01101", 168 => "01111", 169 => "10001", 
    170 => "00000", 171 => "10011", 172 => "10101", 173 => "10111", 174 to 175=> "00000", 
    176 => "11001", 177 to 178=> "00000", 179 => "11011", 180 to 181=> "00000", 182 => "11101", 
    183 to 191=> "00000", 192 => "00001", 193 => "00011", 194 => "00101", 195 => "00111", 
    196 => "01001", 197 => "00000", 198 => "01011", 199 to 200=> "00000", 201 => "01101", 
    202 => "01111", 203 => "10001", 204 => "10011", 205 to 208=> "00000", 209 => "10101", 
    210 => "10111", 211 => "11001", 212 => "11011", 213 to 214=> "00000", 215 => "11101", 
    216 to 223=> "00000", 224 => "00001", 225 => "00011", 226 => "00101", 227 => "00111", 
    228 => "01001", 229 => "01011", 230 => "01101", 231 => "01111", 232 => "10001", 
    233 => "10011", 234 => "00000", 235 => "10101", 236 to 237=> "00000", 238 => "10111", 
    239 => "11001", 240 => "11011", 241 to 247=> "00000", 248 => "11101", 249 to 255=> "00000", 
    256 => "00001", 257 => "00000", 258 => "00011", 259 => "00101", 260 => "00111", 
    261 => "01001", 262 => "01011", 263 => "01101", 264 => "01111", 265 => "10001", 
    266 => "10011", 267 => "00000", 268 => "10101", 269 to 272=> "00000", 273 => "10111", 
    274 to 277=> "00000", 278 => "11001", 279 to 280=> "00000", 281 => "11011", 282 => "11101", 
    283 to 287=> "00000", 288 => "00001", 289 => "00000", 290 => "00011", 291 => "00101", 
    292 => "00111", 293 to 294=> "00000", 295 => "01001", 296 => "01011", 297 => "01101", 
    298 => "00000", 299 => "01111", 300 => "10001", 301 => "10011", 302 => "10101", 
    303 to 305=> "00000", 306 => "10111", 307 => "00000", 308 => "11001", 309 => "00000", 
    310 => "11011", 311 => "11101", 312 to 319=> "00000", 320 => "00001", 321 => "00011", 
    322 => "00101", 323 => "00111", 324 => "00000", 325 => "01001", 326 => "01011", 
    327 => "01101", 328 => "01111", 329 to 330=> "00000", 331 => "10001", 332 => "10011", 
    333 => "10101", 334 to 335=> "00000", 336 => "10111", 337 => "11001", 338 => "00000", 
    339 => "11011", 340 => "11101", 341 to 351=> "00000", 352 => "00001", 353 => "00011", 
    354 => "00000", 355 => "00101", 356 => "00111", 357 => "01001", 358 to 359=> "00000", 
    360 => "01011", 361 => "01101", 362 => "00000", 363 => "01111", 364 => "10001", 
    365 => "10011", 366 => "10101", 367 to 368=> "00000", 369 => "10111", 370 => "11001", 
    371 to 373=> "00000", 374 => "11011", 375 to 376=> "00000", 377 => "11101", 378 to 383=> "00000", 
    384 => "00001", 385 => "00011", 386 => "00101", 387 => "00111", 388 => "01001", 
    389 => "01011", 390 => "01101", 391 => "01111", 392 to 397=> "00000", 398 => "10001", 
    399 => "10011", 400 => "00000", 401 => "10101", 402 => "10111", 403 to 404=> "00000", 
    405 => "11001", 406 => "11011", 407 => "11101", 408 to 415=> "00000", 416 => "00001", 
    417 => "00011", 418 => "00101", 419 => "00111", 420 => "01001", 421 => "01011", 
    422 => "01101", 423 => "01111", 424 => "10001", 425 => "00000", 426 => "10011", 
    427 => "00000", 428 => "10101", 429 => "10111", 430 => "11001", 431 to 432=> "00000", 
    433 => "11011", 434 => "11101", 435 to 447=> "00000", 448 => "00001", 449 => "00011", 
    450 => "00101", 451 => "00111", 452 => "00000", 453 => "01001", 454 => "01011", 
    455 => "01101", 456 => "01111", 457 => "00000", 458 => "10001", 459 => "00000", 
    460 => "10011", 461 => "10101", 462 => "00000", 463 => "10111", 464 => "11001", 
    465 to 466=> "00000", 467 => "11011", 468 => "11101", 469 to 479=> "00000", 480 => "00001", 
    481 => "00011", 482 => "00101", 483 => "00111", 484 => "01001", 485 => "01011", 
    486 => "01101", 487 => "01111", 488 to 492=> "00000", 493 => "10001", 494 => "10011", 
    495 => "10101", 496 => "10111", 497 to 498=> "00000", 499 => "11001", 500 => "11011", 
    501 => "11101", 502 to 511=> "00000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_ocq is
    generic (
        DataWidth : INTEGER := 5;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_ocq is
    component predict_ensemble_ocq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_ocq_rom_U :  component predict_ensemble_ocq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


