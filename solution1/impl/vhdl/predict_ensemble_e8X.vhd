-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_e8X_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_e8X_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001010100001100110000111", 
    1 => "00111101100110001001110101101011", 
    2 => "00111110010111010110101010011100", 
    3 => "00111110111010111111111001111110", 
    4 => "00111110101100111010000111010011", 
    5 => "10111110010101011100111001011011", 
    6 => "00111111011101110111111110111111", 
    7 => "00111110001111111111001011100101", 
    8 => "10111110001000110010011010011110", 
    9 => "00111110101111110110000111001100", 
    10 => "00111110100111100001001110110010", 
    11 => "00111101100011011111111001110110", 
    12 => "00111101110110001010011101100001", 
    13 => "00111101011010000010111110010100", 
    14 => "10111101100001110001100100101111", 
    15 => "00111110010000000000011011010001", 
    16 => "10111101101001110000011101011011", 
    17 => "00111110111011010011110101000011", 
    18 => "00111110011100110010001010101111", 
    19 => "00111101010100110010010100001011", 
    20 => "00111101010010111011000110101111", 
    21 => "00111110010101001110010000000000", 
    22 => "00111110111100111100110100110110", 
    23 => "10111101000101001001101101100011", 
    24 => "10111110010001011001101111000011", 
    25 => "00111101100111000110011111100000", 
    26 => "00111110100001011010000010011101", 
    27 => "00111111000001111101010110111011", 
    28 => "00111111000000001000001100110100", 
    29 => "10111101100111001001010101111101", 
    30 => "00111110100000111001010010111000", 
    31 => "10111101000110100100101011001111", 
    32 => "00111110100111110110001010010101", 
    33 => "00111101111101010001010100000101", 
    34 => "00111111010101011011110011111101", 
    35 => "10111110101000100100100000110000", 
    36 => "00111111011001000100100101110111", 
    37 => "00111110000010000101010010001011", 
    38 => "00111110000000101011011000101000", 
    39 => "10111101110011010000010101101100", 
    40 => "10111110010000110011111001111001", 
    41 => "10111101111000101000001101001101", 
    42 => "00111110000000101011001001111101", 
    43 => "00111100101011101101101110110110", 
    44 => "00111110100000011001110100100100", 
    45 => "00111110010101110100010110111111", 
    46 => "00111101110111100001100001101010", 
    47 => "00111101010101101111010101000101", 
    48 => "10111101100010101111000000111001", 
    49 => "00111110010010111100110101111001", 
    50 => "00111111000111011110101001010111", 
    51 => "00111111000101101001010000100101", 
    52 => "00111110101000000000000000000000", 
    53 => "00111110111110101010111000101001", 
    54 => "00111110100010111101011010100110", 
    55 => "10111101110100001000100010010100", 
    56 => "10111100100000010100010100001111", 
    57 => "00111111001101110110000010101111", 
    58 => "00111111000010100011100000100010", 
    59 => "00111111011011101001010111001000", 
    60 => "00111111010001111110111001001110", 
    61 => "00111111000000001000111010001010", 
    62 => "00111110001101101001010001000110", 
    63 => "00111110100000101110100011000000", 
    64 => "00111110010010110111111011010100", 
    65 => "10111101110001011010011110001111", 
    66 => "00111111000010000110110001000100", 
    67 => "00111111000000100011011111101111", 
    68 => "00111101110001101011001101111000", 
    69 => "00111111000110011001101110010001", 
    70 => "10111110001101001100001010110101", 
    71 => "00111101001001111011110101001001", 
    72 => "10111100110101110001011011010011", 
    73 => "00111101000001011010101000101110", 
    74 => "00111110110110000010101010111011", 
    75 => "00111110111111101110101111110110", 
    76 => "00111111001011100001111010100011", 
    77 => "00111110111110100111001100001100", 
    78 => "00111101110011100111000000111011", 
    79 => "00111111000110001011101000110000", 
    80 => "10111101100001011111100111011111", 
    81 => "10111100111111011100100111000101", 
    82 => "00111100101101101101001000100100", 
    83 => "10111100000100100101101110111000", 
    84 => "00111101111010100110111111000110", 
    85 => "00111111001001001111010111010011", 
    86 => "00111111001001100101010110110000", 
    87 => "00111111010101000000100110110011", 
    88 => "00111110110100010010011101001110", 
    89 => "00111101001010001000011010011100", 
    90 => "00111110100010110001011110001011", 
    91 => "00111110101111111110000011110000", 
    92 => "00111111001100101010001111011111", 
    93 => "00111111000000000000000000000000", 
    94 => "00111110000001101110110010011110", 
    95 => "00111110001000011010010101000100", 
    96 => "00111110001001011000100110101101", 
    97 => "10111100100010101111110001001000", 
    98 => "10111110001000011000010001111111", 
    99 => "00111011100000001100111110011110", 
    100 => "10111100111000001011010011100001", 
    101 => "10111101100111111101010110001000", 
    102 => "00111111001000110111101110011110", 
    103 => "10111101111100101000111100011001", 
    104 => "10111101000011010000101010101010", 
    105 => "00111100000110011100001110001011", 
    106 => "00111101111101111011100111100000", 
    107 => "00111100110011010100100010001000", 
    108 => "00111111001101111110001100101010", 
    109 => "10111101101110010001100100100110", 
    110 => "00111110001111001101110000000001", 
    111 => "00111111000101100001110001101001", 
    112 => "00111111010000011011010110010101", 
    113 => "00111100100101111001010110110011", 
    114 => "10111101100110101001010000110110", 
    115 => "00111111000011010100110100011111", 
    116 => "00111110010011000011100001101101", 
    117 => "10111101000101010011101011000101", 
    118 => "00111110001010000001011011110000", 
    119 => "00111110111001101001010111111011", 
    120 => "00111110001001111000100000010010", 
    121 => "00111110000001000111101111101110", 
    122 => "00111011110111001110001110011011", 
    123 => "10111101101011010100011001101111", 
    124 => "00111110110101010101101010011111", 
    125 => "10111110000011000100001001100011", 
    126 => "00111111000101100010111100000110", 
    127 => "00111111000101110101001000110011", 
    128 => "00111110111011110100001011111111", 
    129 => "00111110100011001000010001110011", 
    130 => "00111111000000111001100001100011", 
    131 => "10111101100001110100011011001100", 
    132 => "10111100010010010110100010010100", 
    133 => "00111100110111000001100000101111", 
    134 => "00111111000111100100100100001010", 
    135 => "00111111010100111000000011101101", 
    136 => "00111111001111011001000111111111", 
    137 => "00111110010101010101001111101111", 
    138 => "10111101100111000010001110111000", 
    139 => "00111110110110100011111101101000", 
    140 => "00111110111011101111000110011001", 
    141 => "10111101111011100011000001000100", 
    142 => "10111101001001010011001100101011", 
    143 => "10111101100101011101000111000100", 
    144 => "00111111011010111101101111100100", 
    145 => "00111101100111110001101101101001", 
    146 => "00111111001100001101110000010010", 
    147 => "00111110010011000111001111101111", 
    148 => "00111110011101101001011010100010", 
    149 => "00111110111001011111111111000101", 
    150 => "00111100000101000100001001000010", 
    151 => "00111110100001010100101110001100", 
    152 => "00111101010011100110100011100100", 
    153 => "00111110111110100111101110110011", 
    154 => "00111111010010000010100110011110", 
    155 => "10111100100110110101011000110010", 
    156 => "00111110010000000010110011010100", 
    157 => "00111100000100001101100111010111", 
    158 => "00111101100101011010111110110000", 
    159 => "10111101100111101001001010010010", 
    160 => "00111110010101000010100100010111", 
    161 => "00111101010001001100001001110010", 
    162 => "00111101111011010101110001110100", 
    163 => "00111101000011100101001011011111", 
    164 => "00111110111100001010011110000011", 
    165 => "00111110011000010111001010101100", 
    166 => "00111101011100101110001110000010", 
    167 => "00111100101110010001101100111111", 
    168 => "10111101010001111011001101010011", 
    169 => "00111101010010101111100000010110", 
    170 => "10111011110000110101010001111110", 
    171 => "00111101010111111101011010010101", 
    172 => "00111110110111011010000111001011", 
    173 => "10111101011000100110001111011000", 
    174 => "10111100011101111011010110101111", 
    175 => "10111100100110111011111100001110", 
    176 => "00111100100001100100110010110110", 
    177 => "00111100101010011101000111110110", 
    178 => "10111100101110010011110011001101", 
    179 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_e8X is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_e8X is
    component predict_ensemble_e8X_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_e8X_rom_U :  component predict_ensemble_e8X_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


