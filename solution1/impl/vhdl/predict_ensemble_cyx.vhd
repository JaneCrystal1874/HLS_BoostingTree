-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_cyx_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_cyx_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001110110100110000111100", 
    1 => "00111001101110100001111101001011", 
    2 => "00111101010100110010010100001011", 
    3 => "10111010000000101100111101010011", 
    4 => "00111100111111110110001010110111", 
    5 => "00111001101011111010001011110000", 
    6 => "00111111011010111111011000001010", 
    7 => "00111101011101100011101100100101", 
    8 => "10111001111011101000110100010001", 
    9 => "00111110110010010101110010100111", 
    10 => "00111101100010100001101101011100", 
    11 => "10111000001110001000110010100100", 
    12 => "00111001110010101110011001000011", 
    13 => "10111010000010011010000000100111", 
    14 => "00111101000011100110110100010110", 
    15 => "00111001100100110101001100101110", 
    16 => "00111111011000001101001010100010", 
    17 => "00111111010110101100101000000100", 
    18 => "00111001001111001011111001100010", 
    19 => "00111111010101000110110000110011", 
    20 => "10111001100100101100110011110111", 
    21 => "00111111011100001100111011110110", 
    22 => "00111001100000001111100110010000", 
    23 => "00111110000011000001100011111000", 
    24 => "00111110101011010010010100100100", 
    25 => "00111110000011011010101111100010", 
    26 => "00111101100111001011000101000110", 
    27 => "00111000111111011100000101100001", 
    28 => "10111001101101100111001111000101", 
    29 => "00111101110000111010000110010000", 
    30 => "00111001010010100110000000001011", 
    31 => "10111001001100010011010110011000", 
    32 => "00111110001001111011101001100111", 
    33 => "00111110010011000000010111010101", 
    34 => "10111000010010010101001110011100", 
    35 => "00111111000000000001001001011010", 
    36 => "00111110010010010011100110101000", 
    37 => "00110111111100110100010100000111", 
    38 => "00111001000000001111100110010000", 
    39 => "10111001000101001110010111010110", 
    40 => "00110110010010010101001110011100", 
    41 => "00111001001010011101111010001011", 
    42 => "00111111010011000011101100111111", 
    43 => "00111110010100001100100001000111", 
    44 => "10111000111010101110000110001011", 
    45 => "10111000111001101010111111001101", 
    46 => "00111111011001011111001100001110", 
    47 => "00111110100001110011110100111010", 
    48 => "00111000111001101010111111001101", 
    49 => "00111110111110001110111100010011", 
    50 => "00111110011000011100111010101111", 
    51 => "00111110100100001011010001111100", 
    52 => "00111000111001101010111111001101", 
    53 => "10111000101000111001001111101110", 
    54 => "00111110101000111001010110000001", 
    55 => "00111110110001110111011100101001", 
    56 => "00111110001110011001001111010101", 
    57 => "00111110110000001011010011100001", 
    58 => "00111110100000011111000110101110", 
    59 => "00111110101100000011000100100111", 
    60 => "00111111000001001010011000010001", 
    61 => "00110111110110100001101010010011", 
    62 => "00111001000000110001001001101111", 
    63 => "10111000111110011000111110100011", 
    64 => "00111110100011001101101110111110", 
    65 => "00111000101100000010100100101000", 
    66 => "00111111011101010111110101111100", 
    67 => "10110110010010010101001110011100", 
    68 => "00111000010101011110100011010101", 
    69 => "10111000101111101101011101000001", 
    70 => "00110110010010010101001110011100", 
    71 => "00111000000011101001101100111001", 
    72 => "00111110100000100110001111111010", 
    73 => "00111111011101100001100010001011", 
    74 => "00111000100010000101000010011100", 
    75 => "00111110011101010010101011000111", 
    76 => "10111000000001100011011110111101", 
    77 => "00111111010001011010000000010111", 
    78 => "10111000101000111001001111101110", 
    79 => "10110111101100000010100100101000", 
    80 => "00110101100001100011011110111101", 
    81 => "00111101110100110000010110010110", 
    82 => "10111000010101011110100011010101", 
    83 => "00111110111001011010101110011111", 
    84 => "00111111011001001110100111010101", 
    85 => "00111001000010000101000010011100", 
    86 => "00111111000111001001100000101101", 
    87 => "00111111011110100011100001110110", 
    88 => "00111101101010000011100001111110", 
    89 => "10111000100110110011000001110011", 
    90 => "00111000010001010010000111011110", 
    91 => "00111111011100100010111001101111", 
    92 => "00111000001010111111011101101010", 
    93 => "00111000001111001011111001100010", 
    94 => "00110111101001111100010110101100", 
    95 => "00111101111000001100000111111101", 
    96 => "10111000000010100110100101111011", 
    97 => "10111000000011101001101100111001", 
    98 => "00111110101010100100011000111001", 
    99 => "00111110111010111111001000001010", 
    100 => "00111110101100110101110000111010", 
    101 => "00111111000110000000101110101010", 
    102 => "10111000010110100001101010010011", 
    103 => "00111000000001100011011110111101", 
    104 => "00111110101111000100001111110110", 
    105 => "00110111001001111100010110101100", 
    106 => "00111110000000000011100100100110", 
    107 => "00111110101110110000010101010011", 
    108 => "00111111001111100000000110101100", 
    109 => "00110110111010101110000110001011", 
    110 => "10110111001110001000110010100100", 
    111 => "10000000000000000000000000000000", 
    112 => "10110111111010101110000110001011", 
    113 => "00111110000000000000000000000000", 
    114 => "00110111111100110100010100000111", 
    115 => "00110111100101101111111010110101", 
    116 => "00111111011101000101011101101101", 
    117 => "00111110000011011001100100000011", 
    118 => "00110111100101101111111010110101", 
    119 => "00111110110010100111101100101101", 
    120 => "00111110000101110100111101110010", 
    121 => "00111111000000100110101111111000", 
    122 => "10110111111010101110000110001011", 
    123 => "00110111111000100111111000001111", 
    124 => "00111110001100110100101000000010", 
    125 => "10110110110010010101001110011100", 
    126 => "00110111100111110110001000110000", 
    127 => "00111111000101011101000101110000", 
    128 => "00111110001111011110011000010101", 
    129 => "00110110111010101110000110001011", 
    130 => "00111111000111010001100100100110", 
    131 => "00111111000110010011001110001111", 
    132 => "00111110100101111011010011100101", 
    133 => "10110111001001111100010110101100", 
    134 => "10111000000010100110100101111011", 
    135 => "00110101100001100011011110111101", 
    136 => "00110111101110001000110010100100", 
    137 => "00111111011110101001001111000000", 
    138 => "00111110100000110000101100111001", 
    139 => "00111111000101011000101100101111", 
    140 => "00111101111100010100011101101011", 
    141 => "00110111010010010101001110011100", 
    142 => "00111110111111011111010000011011", 
    143 => "10110110101001111100010110101100", 
    144 => "10110111101100000010100100101000", 
    145 => "10000000000000000000000000000000", 
    146 => "00110110101001111100010110101100", 
    147 => "00111110101011100111101110100010", 
    148 => "00111110100101000101110100100000", 
    149 => "00111111000111010110110011101000", 
    150 => "00111110110001110101011100001100", 
    151 => "00110111000101101111111010110101", 
    152 => "00111111000111010000111011101101", 
    153 => "00110110000001100011011110111101", 
    154 => "00110111010110100001101010010011", 
    155 => "10110111011110111010100010000010", 
    156 => "00111110110100010000100101001010", 
    157 => "00111111010000010010101000100000", 
    158 => "10110110111010101110000110001011", 
    159 => "00110111000101101111111010110101", 
    160 => "00111111001001110100010111010000", 
    161 => "00111111000010010000000100001000", 
    162 => "00111111000011110000101001110000", 
    163 => "00111110111010101100011110111001", 
    164 => "00111111010000101010000111000111", 
    165 => "00111110111101100101001001011001", 
    166 => "00111111000000011111011010011000", 
    167 => "00111110101110101100100111110011", 
    168 => "00110111010010010101001110011100", 
    169 => "00110111000001100011011110111101", 
    170 => "00111110110111101010010001000100", 
    171 => "10110110000001100011011110111101", 
    172 => "10110111001110001000110010100100", 
    173 => "00110110111010101110000110001011", 
    174 => "00111111000011010001011101000000", 
    175 => "10110110010010010101001110011100", 
    176 => "00111111000101000000110111100101", 
    177 => "10110101100001100011011110111101", 
    178 => "00110110101001111100010110101100", 
    179 => "10110110111010101110000110001011", 
    180 => "00111110111100110011111111101010", 
    181 => "00000000000000000000000000000000", 
    182 => "00110110010010010101001110011100", 
    183 => "10110101100001100011011110111101", 
    184 => "00110110010010010101001110011100", 
    185 => "00111111001110110111011000011101", 
    186 => "00111111000000100111100001011011", 
    187 => "10110101100001100011011110111101", 
    188 => "00110110101001111100010110101100", 
    189 => "10110111000001100011011110111101", 
    190 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_cyx is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_cyx is
    component predict_ensemble_cyx_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_cyx_rom_U :  component predict_ensemble_cyx_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


