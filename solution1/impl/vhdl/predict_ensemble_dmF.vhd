-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_dmF_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_dmF_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001011000010100010110011", 
    1 => "10111001010000110000100011111111", 
    2 => "00111101011101100011101100100101", 
    3 => "00111111001000010111010001100000", 
    4 => "00111101100010100001101101011100", 
    5 => "00111001101111010100010010011010", 
    6 => "00111111001100010111010001100000", 
    7 => "10111001010110010000111000100100", 
    8 => "00111111011101110000001101101101", 
    9 => "00111001000110100010010000000011", 
    10 => "10111000001111001011111001100010", 
    11 => "00111100010110000011100000111011", 
    12 => "00111110111011010000010100001000", 
    13 => "00111111000000101100110001110001", 
    14 => "00111101101010100100000110100010", 
    15 => "00110111100111110110001000110000", 
    16 => "10111001000111100101010111000001", 
    17 => "00110111100111110110001000110000", 
    18 => "10111001000011101001101100111001", 
    19 => "00111000110001010010000111011110", 
    20 => "00111110001110110000100110100110", 
    21 => "10111000100110110011000001110011", 
    22 => "00111111011101100101011000010101", 
    23 => "00111111011011100101000000001101", 
    24 => "10111000100000100000010111111111", 
    25 => "00111101011011010111010000001100", 
    26 => "00111000100110110011000001110011", 
    27 => "00111000010100011011011100010111", 
    28 => "00111111011010111110100011001101", 
    29 => "00111111010101111010001001011001", 
    30 => "00111110001000000100100110101010", 
    31 => "00111111011100011001001010111000", 
    32 => "10111000000010100110100101111011", 
    33 => "00111101010010000100110101110111", 
    34 => "10110110111010101110000110001011", 
    35 => "00111111010101010000000111010010", 
    36 => "00111111011101111000000111111001", 
    37 => "00110111001110001000110010100100", 
    38 => "00111000101010111111011101101010", 
    39 => "00111111010000100010100111011000", 
    40 => "00111000101000010111101100001111", 
    41 => "10111000101100100100001000000111", 
    42 => "00111110110111000001101110010111", 
    43 => "00111101101000001001000100111010", 
    44 => "10111000000011101001101100111001", 
    45 => "00110111111000100111111000001111", 
    46 => "10110111000001100011011110111101", 
    47 => "00110111111110111010100010000010", 
    48 => "00111101100101001011110101110111", 
    49 => "10110111110110100001101010010011", 
    50 => "00111101110101000111001100000100", 
    51 => "00111000000011101001101100111001", 
    52 => "00111110000011111100000100010110", 
    53 => "00110111011010101110000110001011", 
    54 => "00111111010111010010100011110010", 
    55 => "00111101111101010001010100000101", 
    56 => "10110111011010101110000110001011", 
    57 => "00111111000000101001011100000111", 
    58 => "00111110001010010000110000001011", 
    59 => "00111111000101011010100101000011", 
    60 => "00110111000101101111111010110101", 
    61 => "00110111001001111100010110101100", 
    62 => "00111110001001001101000100100000", 
    63 => "10110110000001100011011110111101", 
    64 => "10110111100111110110001000110000", 
    65 => "00111111001010001111111011101111", 
    66 => "00111110100000010010000000011001", 
    67 => "10110111100011101001101100111001", 
    68 => "00110110000001100011011110111101", 
    69 => "10110110111010101110000110001011", 
    70 => "00111110000000101110110010101111", 
    71 => "00110110111010101110000110001011", 
    72 => "00111111000100000000000000000000", 
    73 => "00111111010110100101101001010111", 
    74 => "00111111001111010111111011111110", 
    75 => "00111111001010010110001101100111", 
    76 => "10110111011010101110000110001011", 
    77 => "00111110000101010010100110111011", 
    78 => "00110111001110001000110010100100", 
    79 => "00111111001000111011000110101111", 
    80 => "00111111001110000000010110010010", 
    81 => "00111110110101001110100100111110", 
    82 => "00111110001011110001001001111111", 
    83 => "00111110100011001100101000101110", 
    84 => "10110111001001111100010110101100", 
    85 => "00110111010010010101001110011100", 
    86 => "00111111010110011010101100101010", 
    87 => "00110111001110001000110010100100", 
    88 => "00111111001000010100100000000010", 
    89 => "00111111001001000101110100010000", 
    90 => "00111110011001010000100101111101", 
    91 => "10110110101001111100010110101100", 
    92 => "00111111000111010011000011001111", 
    93 => "00111111010001111011000101001011", 
    94 => "00110110110010010101001110011100", 
    95 => "00111110000001001110001100110111", 
    96 => "00110111001001111100010110101100", 
    97 => "10110101100001100011011110111101", 
    98 => "10110111100111110110001000110000", 
    99 => "00110110111010101110000110001011", 
    100 => "00111111011100001101111010110001", 
    101 => "00111111010110101000001010100101", 
    102 => "00111110101100010001101001010100", 
    103 => "00111111000000010111010001100000", 
    104 => "10110110010010010101001110011100", 
    105 => "00110110010010010101001110011100", 
    106 => "10110110100001100011011110111101", 
    107 => "00111110100101001100010101010100", 
    108 => "00110110110010010101001110011100", 
    109 => "00111110101110010011001000101111", 
    110 => "00110111000001100011011110111101", 
    111 => "10110111000101101111111010110101", 
    112 => "00111111000101101001010000100101", 
    113 => "00110101100001100011011110111101", 
    114 => "00111111010011010101001100010101", 
    115 => "00111110011110110100101010101001", 
    116 => "00111110100111110000000010101100", 
    117 => "00111110111010110001011001111111", 
    118 => "00111110110000011011001111110010", 
    119 => "10110110000001100011011110111101", 
    120 => "00111111000101001011010111001100", 
    121 => "00000000000000000000000000000000", 
    122 => "10110101100001100011011110111101", 
    123 => "00110111000001100011011110111101", 
    124 => "10000000000000000000000000000000", 
    125 => "10110110111010101110000110001011", 
    126 => "00111111001011000110100001000101", 
    127 => "00111110111000011000101001000100", 
    128 => "00110110100001100011011110111101", 
    129 => "00111110101100010111010001100000", 
    130 => "00111110110100111000111001001100", 
    131 => "00110110010010010101001110011100", 
    132 => "00000000000000000000000000000000", 
    133 => "00111110101101011101010111110101", 
    134 => "10110110010010010101001110011100", 
    135 => "00110110000001100011011110111101", 
    136 => "10110110000001100011011110111101", 
    137 => "10000000000000000000000000000000", 
    138 => "10110110010010010101001110011100", 
    139 => "00110110000001100011011110111101", 
    140 => "00111111000010110100011101100011", 
    141 => "00111110111010001011001101001110", 
    142 => "00111110100000001111001000010111", 
    143 => "00111110111001110010101001111100", 
    144 => "00110101100001100011011110111101", 
    145 => "10110101100001100011011110111101", 
    146 => "00110110101001111100010110101100", 
    147 => "10110110000001100011011110111101", 
    148 => "00111110100100110100000111100001", 
    149 => "00000000000000000000000000000000", 
    150 => "00111111000001100110101110000011", 
    151 => "00111110110111001110110100101101", 
    152 => "00111111000110011010000111111101", 
    153 => "10110110000001100011011110111101", 
    154 => "10110101100001100011011110111101", 
    155 => "00110110010010010101001110011100", 
    156 => "10000000000000000000000000000000", 
    157 => "00111110101111111010100100111011", 
    158 => "00111111000111010111000000001101", 
    159 => "00111110101011000000110110110010", 
    160 => "00111111001001101011010110110011", 
    161 => "00110110010010010101001110011100", 
    162 => "00111111001001100000111010110110", 
    163 => "10110110000001100011011110111101", 
    164 => "10000000000000000000000000000000", 
    165 => "00111110111111001110000110100100", 
    166 => "00111111001011011100010101110010", 
    167 => "10110101100001100011011110111101", 
    168 => "00110110000001100011011110111101", 
    169 => "00111110101010001000110001100001", 
    170 => "00110110000001100011011110111101", 
    171 => "10110110000001100011011110111101", 
    172 => "00111111001110001001001101000010", 
    173 => "00110101100001100011011110111101", 
    174 => "10000000000000000000000000000000", 
    175 => "00110101100001100011011110111101", 
    176 => "00111111001110011100111001101100", 
    177 => "00000000000000000000000000000000", 
    178 => "10110101100001100011011110111101", 
    179 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_dmF is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_dmF is
    component predict_ensemble_dmF_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_dmF_rom_U :  component predict_ensemble_dmF_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


