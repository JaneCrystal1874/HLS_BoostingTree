-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_dhF_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_dhF_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001110110100110000111100", 
    1 => "00111001010000110000100011111111", 
    2 => "00111101010100110010010100001011", 
    3 => "10111001100010101110111110110011", 
    4 => "00111101100001000010011101000010", 
    5 => "00111111000110111101010111011100", 
    6 => "00111111011101110000001101101101", 
    7 => "00111001000100101100110011110111", 
    8 => "10111001100010010101110100001011", 
    9 => "00111111011110000111011001111101", 
    10 => "00111111001000011010010011011111", 
    11 => "00111111011011100101000000001101", 
    12 => "00111000101110101010010110000011", 
    13 => "00110101100001100011011110111101", 
    14 => "00111001101001110011111101110101", 
    15 => "00111101101000110000010101010011", 
    16 => "10111000100110110011000001110011", 
    17 => "00111110110110000010101010111011", 
    18 => "00111111011100111000001100000110", 
    19 => "00110111010010010101001110011100", 
    20 => "10111000110111100100110001010001", 
    21 => "00111111011010101011110000011111", 
    22 => "00111000101110001000110010100100", 
    23 => "00111101010001011001011001000010", 
    24 => "10111000110101011110100011010101", 
    25 => "10111000100000100000010111111111", 
    26 => "00111101101001010010110101100110", 
    27 => "00111111001100001011010011110010", 
    28 => "00111101100111011011110100110000", 
    29 => "00111110010000001110000011101011", 
    30 => "00111000111111011100000101100001", 
    31 => "10111000010111100100110001010001", 
    32 => "00111111011100110110101000101111", 
    33 => "00111000100111010100100101010010", 
    34 => "10111000101010011101111010001011", 
    35 => "00111111010101011010101111100010", 
    36 => "00111110110000001011111111100100", 
    37 => "00111111011110010101101100010100", 
    38 => "10111000111001101010111111001101", 
    39 => "00111000101111101101011101000001", 
    40 => "00111110111011100101010011111000", 
    41 => "00111111010100001011000101000110", 
    42 => "10111000001010111111011101101010", 
    43 => "10110111000101101111111010110101", 
    44 => "00110111001110001000110010100100", 
    45 => "00111101101011110100000001011111", 
    46 => "00111110100000100100110111110100", 
    47 => "00111000000001100011011110111101", 
    48 => "00111111001111111111101001011101", 
    49 => "10110111101001111100010110101100", 
    50 => "00111000100010100110100101111011", 
    51 => "00111110010011110000011111000000", 
    52 => "00111111010000100010100111011000", 
    53 => "00111101100000110100010011000011", 
    54 => "00111111010000111110001111000001", 
    55 => "00111110111010001010111010111000", 
    56 => "00111000011000100111111000001111", 
    57 => "10110110010010010101001110011100", 
    58 => "10111000010010010101001110011100", 
    59 => "00111110000011000010110010100001", 
    60 => "00111111001110001100111111100001", 
    61 => "10110110111010101110000110001011", 
    62 => "00110110101001111100010110101100", 
    63 => "00110111100101101111111010110101", 
    64 => "00111110100000111001010010111000", 
    65 => "10110111000001100011011110111101", 
    66 => "10110111110110100001101010010011", 
    67 => "00111110010101000101001010000011", 
    68 => "00111110010111101111101100101011", 
    69 => "00111110111101011000000110101110", 
    70 => "10110111111000100111111000001111", 
    71 => "10110111010110100001101010010011", 
    72 => "00111110100011110110011101001101", 
    73 => "00000000000000000000000000000000", 
    74 => "10110111001001111100010110101100", 
    75 => "00110111010110100001101010010011", 
    76 => "00111110010101011111001100001110", 
    77 => "00110111001001111100010110101100", 
    78 => "00111111001010110001001101101010", 
    79 => "00111101110110111011010110011110", 
    80 => "10110111001001111100010110101100", 
    81 => "10110111010010010101001110011100", 
    82 => "00111111011101000101011101101101", 
    83 => "00111111011100100010011111010000", 
    84 => "00110111010110100001101010010011", 
    85 => "00111110100000100101001100010001", 
    86 => "10110111011110111010100010000010", 
    87 => "00111110011111101011011000111001", 
    88 => "00111111010100000000000000000000", 
    89 => "00111110010101010101001111101111", 
    90 => "10110111100011101001101100111001", 
    91 => "00111111010101011110010100011001", 
    92 => "00110111011110111010100010000010", 
    93 => "10110111000101101111111010110101", 
    94 => "00111110000110000001001010111110", 
    95 => "00111110101001011101101110011000", 
    96 => "00110110111010101110000110001011", 
    97 => "00110110110010010101001110011100", 
    98 => "00111110100100111011110101111011", 
    99 => "00111110100110001001110010000000", 
    100 => "00111111010110100000110100100100", 
    101 => "10110110100001100011011110111101", 
    102 => "10000000000000000000000000000000", 
    103 => "00111110100101101010100000010001", 
    104 => "00110111010010010101001110011100", 
    105 => "00111110101100011111001111000111", 
    106 => "10110110111010101110000110001011", 
    107 => "00110110100001100011011110111101", 
    108 => "00111110110111101001111100100111", 
    109 => "00111111010000100001000010001100", 
    110 => "00111111010111000101000110111001", 
    111 => "10110101100001100011011110111101", 
    112 => "00110101100001100011011110111101", 
    113 => "00000000000000000000000000000000", 
    114 => "10110111000101101111111010110101", 
    115 => "00111111010110000011011011001010", 
    116 => "00110110101001111100010110101100", 
    117 => "00111110001011111011101011001011", 
    118 => "10110110110010010101001110011100", 
    119 => "00111110000011101100000011111001", 
    120 => "00111110101010101101111100001101", 
    121 => "00111110110010011011010010111011", 
    122 => "00111111001011000101100101100100", 
    123 => "00110110100001100011011110111101", 
    124 => "00111110100101001001011011001100", 
    125 => "00110110000001100011011110111101", 
    126 => "10110110101001111100010110101100", 
    127 => "00110111000101101111111010110101", 
    128 => "00000000000000000000000000000000", 
    129 => "00111110100010010101011110001010", 
    130 => "00111111011000100011011011110100", 
    131 => "10110101100001100011011110111101", 
    132 => "10110110111010101110000110001011", 
    133 => "00111111011001011000011010000111", 
    134 => "00111111011011101000000000101000", 
    135 => "00111111000100101000010110011000", 
    136 => "10110110100001100011011110111101", 
    137 => "00110110101001111100010110101100", 
    138 => "00000000000000000000000000000000", 
    139 => "00111111001100101011100101101111", 
    140 => "00111111001110001000110001110010", 
    141 => "00111110101011101110000001101110", 
    142 => "00111111010001110000100010001001", 
    143 => "00111110111101010110010000110000", 
    144 => "00111110111111111000001010110010", 
    145 => "00110110100001100011011110111101", 
    146 => "00111110101101110100101110100101", 
    147 => "00111110101010000101111010000001", 
    148 => "10110101100001100011011110111101", 
    149 => "00111110010010111010001100000001", 
    150 => "10110101100001100011011110111101", 
    151 => "00110110000001100011011110111101", 
    152 => "00110110101001111100010110101100", 
    153 => "10110110010010010101001110011100", 
    154 => "00111111001000011001001100101101", 
    155 => "10110110010010010101001110011100", 
    156 => "10110110100001100011011110111101", 
    157 => "10000000000000000000000000000000", 
    158 => "00110110000001100011011110111101", 
    159 => "00111110110111110111011010000001", 
    160 => "00111111000110011010000100110100", 
    161 => "00111111000001000110111111001110", 
    162 => "00111110110111101100111111001000", 
    163 => "10110110100001100011011110111101", 
    164 => "00111111001110110011001111111101", 
    165 => "00110110000001100011011110111101", 
    166 => "10000000000000000000000000000000", 
    167 => "00111110111101000101000101010101", 
    168 => "00111111001011001100100101110101", 
    169 => "00110101100001100011011110111101", 
    170 => "10110101100001100011011110111101", 
    171 => "10110110000001100011011110111101", 
    172 => "10000000000000000000000000000000", 
    173 => "00111110110000110111000101010100", 
    174 to 175=> "10110101100001100011011110111101", 
    176 => "00111110111101111011110111110001", 
    177 => "00110101100001100011011110111101", 
    178 => "00111111000101001110001101011000", 
    179 => "10000000000000000000000000000000", 
    180 => "00111111000100001110100111010101", 
    181 => "00111111001000000000000000000000", 
    182 => "00110110000001100011011110111101", 
    183 => "00110101100001100011011110111101", 
    184 => "10000000000000000000000000000000", 
    185 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_dhF is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_dhF is
    component predict_ensemble_dhF_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_dhF_rom_U :  component predict_ensemble_dhF_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


