-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_bZs_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_bZs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110111010011110011001000111", 
    1 => "00111110110101010000011010111100", 
    2 => "00111110111001111010000001010001", 
    3 => "00111111010100101110100011000000", 
    4 => "00111111001111001011110010111110", 
    5 => "00111111001101011101000101110000", 
    6 => "00111110011110010111001110010111", 
    7 => "00111110111010111010110110011111", 
    8 => "00111110000111111101000100010100", 
    9 => "00111110111101011110110010000001", 
    10 => "00111111001000110110000000101000", 
    11 => "00111110010101110100010110111111", 
    12 => "00111110111111011101010111110101", 
    13 => "00111110110000101110100011000000", 
    14 => "00111111000001000111011001101100", 
    15 => "00111110110000111101110000000101", 
    16 => "00111110100110101000110100000000", 
    17 => "00111110011101101100101010001010", 
    18 => "00111110010100011111000011000011", 
    19 => "00111110000001010010001100101101", 
    20 => "10111111100111110100011111100000", 
    21 => "00111110011110110110101000011111", 
    22 => "00111111000111011101010111010100", 
    23 => "00111111000111000111000111000101", 
    24 => "00111110111001000110010011011100", 
    25 => "00111110111000000010010001110000", 
    26 => "00111111101100011110010101001011", 
    27 => "10111111001010100110110010001111", 
    28 => "00111111010101011100110110110011", 
    29 => "00111111000010111101111001110010", 
    30 => "00111111000011001100101000101110", 
    31 => "00111110011000100110110110001011", 
    32 => "00111110101110110000010101010011", 
    33 => "00111110110101000101110100100000", 
    34 => "00111111010011011101111000000101", 
    35 => "00111110001100010111111000110101", 
    36 => "00111111011011000111111011010000", 
    37 => "00111110010001110110000111001100", 
    38 => "10111110101100110011001100110011", 
    39 => "10111111010100011001011100111110", 
    40 => "00111110101110001001110011100101", 
    41 => "00111111010101111010111001101000", 
    42 => "00111101100010010110111111101011", 
    43 => "00111101101011011100111011000000", 
    44 => "10111110011100101000011101111111", 
    45 => "00111110110010001001110101001001", 
    46 => "00111111011001011001011111100101", 
    47 => "00111110111100100100001100110101", 
    48 => "00111111000110001010110110001010", 
    49 => "00111111010010000101100111011010", 
    50 => "00111111001100010100000000000011", 
    51 => "00111101111010111110110011101110", 
    52 => "00111110110101101011000111000100", 
    53 => "10111111100001101010000110110110", 
    54 => "00111110110010011000100100110111", 
    55 => "00111110101010001011101000011111", 
    56 => "00111111100110101010100111001110", 
    57 => "00111111000111000101101010100011", 
    58 => "00111110111010001101100001000101", 
    59 => "00111110100011000011101001100100", 
    60 => "00111110111010111011011101110100", 
    61 => "10111110001100010110011110101001", 
    62 => "10111101010101110000101000111101", 
    63 => "00111111000101001101001000111101", 
    64 => "00111111010000100001000010001100", 
    65 => "00111111001010111010001011110000", 
    66 => "00111111001010010000011110010110", 
    67 => "00111110101100001100100001000111", 
    68 => "00111110000001001010010101011001", 
    69 => "00111110111101101101111111000110", 
    70 => "00111110111111101111101000011110", 
    71 => "00111111011101011100110010010110", 
    72 => "00111101111011101100111110100111", 
    73 => "00111111000111111001001100110110", 
    74 => "00111111001001101001101101101011", 
    75 => "10111110011101001011011001100011", 
    76 => "00111111001100010100111000111100", 
    77 => "00111110011010010001000011000011", 
    78 => "00111111001000111100000010100000", 
    79 => "00111110001010110001001101011001", 
    80 => "00111110110001001111111111001001", 
    81 => "00111110110010000100011010100110", 
    82 => "10111110010001011010110011001101", 
    83 => "00111110111111000000011000011000", 
    84 => "00111111001001001000101001101001", 
    85 => "00111110001000001101000100110001", 
    86 => "10111101011110110011100001010000", 
    87 => "10111110110000101110011011001001", 
    88 => "10111101101110001011100110111011", 
    89 => "00111110101011110100110001101110", 
    90 => "10111110010000111001010110000001", 
    91 => "10111110110001000100010000111001", 
    92 => "10111111000001110101011010111000", 
    93 => "00111111000011111001101011010000", 
    94 => "00111110110011001011011110010001", 
    95 => "00111101110010110001100000010001", 
    96 => "10111101011000000010010000101101", 
    97 => "00111110110110110110111010110101", 
    98 => "10111110100110101110000101001000", 
    99 => "00111111010101111010111110111000", 
    100 => "00111111001110111111111000001001", 
    101 => "00111111000000000010010000001011", 
    102 => "00111100111010000010000011100110", 
    103 => "00111111010110101111000111111110", 
    104 => "00111101110111101101000001110000", 
    105 => "00111110101100110010001010001110", 
    106 => "10111110000100110111010010111100", 
    107 => "00111110100000011000100011110100", 
    108 => "00111110111001111000001001101111", 
    109 => "10111111001110011100000010011000", 
    110 => "00111110110001000001110010000010", 
    111 => "10111100100011100010110000010011", 
    112 => "00111111000010101001101110111111", 
    113 => "00111111001100001100101101011100", 
    114 => "00111110111011101000101110100000", 
    115 => "00111110001111111010001001101010", 
    116 => "00111011110001001001101110100110", 
    117 => "00111111001011101000101110100000", 
    118 => "00111111000101110000101010100010", 
    119 => "00111100110010111110010000000100", 
    120 => "10111011110100000000101101000110", 
    121 => "00111110101110101010010000010010", 
    122 => "00111111000001001101101100100111", 
    123 => "10111110100011110000100101110100", 
    124 => "10111100000011111100100100110110", 
    125 => "00111110101010001011101000011111", 
    126 => "10111011010100000001001110101001", 
    127 => "00111110011011100000101011001000", 
    128 => "00111100110001001001101110100110", 
    129 => "00111101101100111001000000000000", 
    130 => "00111110100001001111111101100101", 
    131 => "00111110100101010001001000100011", 
    132 => "00111110101100001101011111100000", 
    133 => "00111111000110000000101110101010", 
    134 => "10111110110110101111100111001010", 
    135 => "10111101110100011010111100111010", 
    136 => "10111111011001000010100011100101", 
    137 => "00111110110110100010111001111111", 
    138 => "00111111001111010100110101000000", 
    139 => "10111100101100010011100111001001", 
    140 => "10111111000110001110111011110010", 
    141 => "00111111000001000001011110111001", 
    142 => "00111111001001000101110100010000", 
    143 => "00111110001111111100110000011000", 
    144 => "00111110101011110001100110010011", 
    145 => "00111110000100110111110100100000", 
    146 => "10111110010000101100011101110101", 
    147 => "10111110000001110000010000110110", 
    148 => "10111101011011110110100000111000", 
    149 => "10111100101000111101011100001010", 
    150 => "00000000000000000000000000000000", 
    151 => "00111101100011111100111001110100", 
    152 => "00111110010111011101110111110100", 
    153 => "10111110110100000111010100001100", 
    154 => "00111110111000110111110101100011", 
    155 => "00111110100100100000110011010000", 
    156 => "10111110000000001101000000100100", 
    157 => "00111110111101110100010111100001", 
    158 => "10111110000000111000100111111000", 
    159 => "00111111000111000110010011111110", 
    160 => "00111110100001101100100010010011", 
    161 => "00111111000011111110010111101011", 
    162 => "10111110101010110001000001010110", 
    163 => "00111111000111000010100111110001", 
    164 => "00111111001011010001011101000000", 
    165 => "10111101000011110001010111101000", 
    166 => "00111110101110100100010101001110", 
    167 => "00111111000000001010100100100110", 
    168 => "10111110101111101011110110010000", 
    169 => "10111100101000111101011100001010", 
    170 => "10111110011011011001000101101000", 
    171 => "00111011110110101111110100010001", 
    172 => "00111101101000111101011100001010", 
    173 => "10111101110101000010101100110000", 
    174 => "00111110010010110000101101111100", 
    175 => "10111101000001111001111101100110", 
    176 => "00111101010011111011000000001100", 
    177 => "10111110011001000110000110110111", 
    178 => "00111111000101010011110110111000", 
    179 => "00111101101011110100000001011111", 
    180 => "00111101111101010111011000000100", 
    181 => "10111110101100001011111011010111", 
    182 => "00111111000101001101110101010001", 
    183 => "00111110000000110001001001101111", 
    184 => "00111011011101010010101110010001", 
    185 => "00111110000100100100100100011011", 
    186 => "10111101101110011110011100110010", 
    187 => "00000000000000000000000000000000", 
    188 => "10111101110011111001010101001111", 
    189 => "10111110010001100111011011101010", 
    190 => "10111100110111111101111011111000", 
    191 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_bZs is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_bZs is
    component predict_ensemble_bZs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_bZs_rom_U :  component predict_ensemble_bZs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


