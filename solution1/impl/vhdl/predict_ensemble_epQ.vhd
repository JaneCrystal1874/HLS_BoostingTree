-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_epQ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_epQ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001011000010100010110011", 
    1 => "10111000100010000101000010011100", 
    2 => "00111101011010000111010111010101", 
    3 => "00111110100100110101001111111000", 
    4 => "00111111011100101110111100001011", 
    5 => "00111000110011011000010101011001", 
    6 => "10110111001001111100010110101100", 
    7 => "00111111011010100101011010111101", 
    8 => "10111000000001100011011110111101", 
    9 => "00111101110110001101011110011101", 
    10 => "00111000010010010101001110011100", 
    11 => "00111110111010000010010010110011", 
    12 => "00111111011101001001010110011110", 
    13 => "00111110111100000011111001000010", 
    14 => "00111111000101100011011101001000", 
    15 => "00111101000010110010011101000110", 
    16 => "00111111000010100001100000010110", 
    17 => "00111111000000110101011010111000", 
    18 => "00111000101101000101101011100110", 
    19 => "10110111010110100001101010010011", 
    20 => "10111000100111110110001000110000", 
    21 => "00111110111100000000100111110110", 
    22 => "00111110001001011010010010101101", 
    23 => "00110110100001100011011110111101", 
    24 => "00111000010001010010000111011110", 
    25 => "10111000000110110011000001110011", 
    26 => "00110111010110100001101010010011", 
    27 => "00111000001000111001001111101110", 
    28 => "10110110000001100011011110111101", 
    29 => "00111101010101011001101100111101", 
    30 => "00111101100000101101000111110010", 
    31 => "10111000001001111100010110101100", 
    32 => "00111110010001111111101110101101", 
    33 => "00110111101110001000110010100100", 
    34 => "00111110000101010111110100011000", 
    35 => "10110111100001100011011110111101", 
    36 => "00110101100001100011011110111101", 
    37 => "00111110100111110100110000001010", 
    38 => "00111101001001011100110001000010", 
    39 => "00110111110100011011011100010111", 
    40 => "00111110110011010000111101100010", 
    41 => "10110111000001100011011110111101", 
    42 => "00111111011110111110111110001101", 
    43 => "00111101111101010001010100000101", 
    44 => "00111110111101101100001010001011", 
    45 => "00111111011010010010101111010100", 
    46 => "00110111000001100011011110111101", 
    47 => "10110110100001100011011110111101", 
    48 => "00111110000000010101111111001100", 
    49 => "00110111000101101111111010110101", 
    50 => "00110110100001100011011110111101", 
    51 => "00111110001011001100100100100001", 
    52 => "00111110100110000010100000011100", 
    53 => "00111110110000110100001001000110", 
    54 => "00111111000000110010100001100011", 
    55 => "00111110110111111100001010101001", 
    56 => "00111110001001010011001100101011", 
    57 => "00110110100001100011011110111101", 
    58 => "10110111011110111010100010000010", 
    59 => "00000000000000000000000000000000", 
    60 => "00110110000001100011011110111101", 
    61 => "10110101100001100011011110111101", 
    62 to 63=> "00110101100001100011011110111101", 
    64 => "00111111000111000001010110010000", 
    65 => "00110110111010101110000110001011", 
    66 => "00111110100101111010001010101101", 
    67 => "10110111001001111100010110101100", 
    68 => "10110110010010010101001110011100", 
    69 => "00111110100001110101000101001000", 
    70 => "00111110000101101011010111010100", 
    71 => "10110111011010101110000110001011", 
    72 => "00111110010011000000010111010101", 
    73 => "00110110100001100011011110111101", 
    74 => "00111110100000100011011010100000", 
    75 => "00110110111010101110000110001011", 
    76 => "00111110100000011111000110101110", 
    77 => "10110110100001100011011110111101", 
    78 => "00111110001010111001010111100110", 
    79 => "00111110111111100000111010010101", 
    80 => "00111111001000000000111110001000", 
    81 => "10110110100001100011011110111101", 
    82 => "00111110011001010000110101101011", 
    83 => "10110111000001100011011110111101", 
    84 => "10110110000001100011011110111101", 
    85 => "00111110011101010011000101010101", 
    86 => "00110110110010010101001110011100", 
    87 => "00111111000010000100001000001111", 
    88 => "00111111010100001111011100000001", 
    89 => "10110110101001111100010110101100", 
    90 => "00111110100010001110011011010001", 
    91 => "00110110110010010101001110011100", 
    92 => "00111110111100000011001000010010", 
    93 => "00111111011011110101001011001010", 
    94 => "00110110010010010101001110011100", 
    95 => "00110101100001100011011110111101", 
    96 => "10000000000000000000000000000000", 
    97 => "10110110000001100011011110111101", 
    98 => "00110110000001100011011110111101", 
    99 => "00111111011011000101001110001111", 
    100 => "00111111001001101001001111000000", 
    101 => "00111101110110111111001101111100", 
    102 => "00110110100001100011011110111101", 
    103 => "00110110000001100011011110111101", 
    104 => "10110110101001111100010110101100", 
    105 => "10110110010010010101001110011100", 
    106 => "00111110100011100100010110100010", 
    107 => "00110110010010010101001110011100", 
    108 => "00111110100101111011010011100101", 
    109 => "10110110000001100011011110111101", 
    110 => "00111110101010110100011111000111", 
    111 => "10110101100001100011011110111101", 
    112 => "00111110100011100111101100111110", 
    113 => "00110101100001100011011110111101", 
    114 => "00111111010110101111000111111110", 
    115 => "00111111010101110100110010110010", 
    116 => "00111110100101000101110100100000", 
    117 => "00111110011101010100101100000110", 
    118 => "10110101100001100011011110111101", 
    119 => "10000000000000000000000000000000", 
    120 => "00111111011000010111011010101011", 
    121 => "00110101100001100011011110111101", 
    122 => "00111110101010000100010011010000", 
    123 => "00000000000000000000000000000000", 
    124 => "00110101100001100011011110111101", 
    125 => "10110101100001100011011110111101", 
    126 => "00111110101110101011011101111000", 
    127 => "00111110101111101011100010010101", 
    128 => "00111110101111000011001010101001", 
    129 => "00000000000000000000000000000000", 
    130 => "00110101100001100011011110111101", 
    131 => "00111110101010001111101100100010", 
    132 => "00111110110010100011101110011011", 
    133 => "00111110100010011010011010010011", 
    134 => "00110110000001100011011110111101", 
    135 => "00111110111100100001001011111001", 
    136 => "00111111010100100100001101100111", 
    137 => "10000000000000000000000000000000", 
    138 => "00000000000000000000000000000000", 
    139 => "00111110110101101010011110001011", 
    140 => "00000000000000000000000000000000", 
    141 => "00111110111100110000111100000110", 
    142 => "10110101100001100011011110111101", 
    143 => "10110110000001100011011110111101", 
    144 => "10000000000000000000000000000000", 
    145 to 146=> "00111110110000101110100011000000", 
    147 => "00110101100001100011011110111101", 
    148 => "00000000000000000000000000000000", 
    149 => "00111110101100010111010001100000", 
    150 => "00111110110110100010111001111111", 
    151 => "00111110101111110110010010001100", 
    152 => "10110101100001100011011110111101", 
    153 => "00000000000000000000000000000000", 
    154 => "00111111001110000010010101101100", 
    155 => "00000000000000000000000000000000", 
    156 => "10000000000000000000000000000000", 
    157 => "00111111010000010001010010110001", 
    158 => "10110101100001100011011110111101", 
    159 => "00111110010001100101100100001000", 
    160 => "00111111001100111100001111010111", 
    161 => "10000000000000000000000000000000", 
    162 => "00111111010000011000000101001001", 
    163 => "00000000000000000000000000000000", 
    164 => "00110101100001100011011110111101", 
    165 => "00111111001001000101110100010000", 
    166 => "00111111001111111101101010110110", 
    167 to 168=> "10000000000000000000000000000000", 
    169 => "00000000000000000000000000000000", 
    170 => "10000000000000000000000000000000", 
    171 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_epQ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_epQ is
    component predict_ensemble_epQ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_epQ_rom_U :  component predict_ensemble_epQ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


