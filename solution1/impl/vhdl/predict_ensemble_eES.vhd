-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_eES_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_eES_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111010111101000101110100000", 
    1 => "00111101001011000010100010110011", 
    2 => "00111111011011010001011101000000", 
    3 => "10111110010111000101011110011111", 
    4 => "00111110001000011010010101000100", 
    5 => "10111110010101110111111010100010", 
    6 => "00111011001100011001101001000001", 
    7 => "00111110000111000011011001010100", 
    8 => "00111111011100111000001100000110", 
    9 => "00111110000010001111110111100011", 
    10 => "00111110110100101011100010000100", 
    11 => "00111111011001011001110101100111", 
    12 => "00111110000100100101110110001101", 
    13 => "10111110101001010101001111001110", 
    14 => "00111110101111111111000101010010", 
    15 => "00111110101001000101001010100100", 
    16 => "10111110010101010100100101110011", 
    17 => "00111110101111100111011010000110", 
    18 => "00111111000001111010110000111111", 
    19 => "00111110010011101110111111100101", 
    20 => "00111110101100010000001010011011", 
    21 => "00111110110110000100110000000110", 
    22 => "10111110010000011100110011011001", 
    23 => "00111111011001010000101000110101", 
    24 => "00111111000110100011111000001000", 
    25 => "10111110001101011101100000001110", 
    26 => "00111111001100100000100011000000", 
    27 => "00111111000000100111011001110101", 
    28 => "00111111010000110100011101100011", 
    29 => "00111110110011000100111100011010", 
    30 => "00111110011000001011001110010010", 
    31 => "00111111010111011111111100001101", 
    32 => "00111110111000000001001110101001", 
    33 => "00111110000000111011111110110110", 
    34 => "00111111001000100001010000010110", 
    35 => "00111111000101100001101000111111", 
    36 => "00111110010100110000010111011001", 
    37 => "00111110101011000100110111001011", 
    38 => "00111111000000000000000000000000", 
    39 => "00111110100100010000011010001010", 
    40 => "00111110100111010010010011000000", 
    41 => "00111110100110111100000001111111", 
    42 => "10111110011001110110100010011101", 
    43 => "00111110110011011111101110010100", 
    44 => "10111101101101001011011000100000", 
    45 => "00111101101110111111010110010100", 
    46 => "00111110110110111100110001101100", 
    47 => "00111110111011001110001010001111", 
    48 => "00111101101100111110010001101001", 
    49 => "00111111001010110100100010000000", 
    50 => "10111100100000001111101110101001", 
    51 => "00111110010001011010110111011010", 
    52 => "00111110100010101100001110101000", 
    53 => "10111101111100111011010110111111", 
    54 => "10111110100000110001000010111010", 
    55 => "00111100010101111101101111110101", 
    56 => "10111101010100100010010100110001", 
    57 => "10111101111010101111000101000101", 
    58 => "00111111011101001010101110110100", 
    59 => "10111110101011101100101011101111", 
    60 => "00111110110000010100001101111100", 
    61 => "10111101001011101111001111010100", 
    62 => "00111101101110000110100001110111", 
    63 => "00111101011110001001111001110111", 
    64 => "00111110101000110101110100000011", 
    65 => "10111110100101100100111110011000", 
    66 => "10111101000011011010000110101001", 
    67 => "00111110010110000011110001101101", 
    68 => "00111101110011001100011010000010", 
    69 => "10111100111001000001001011001111", 
    70 => "00111111001100101110100011000000", 
    71 => "00111101111001110001010110000011", 
    72 => "00111110101001101001110101010010", 
    73 => "00111111000011000111000010111001", 
    74 => "10111110000011000011001111111000", 
    75 => "10111110001101010111101101000010", 
    76 => "00111111000001110100010111010000", 
    77 => "00111111001010111001010010010110", 
    78 => "00111110100111101110110110101011", 
    79 => "10111101000011110000111110011101", 
    80 => "00111101111101001100000110101001", 
    81 => "00111011011111110011001001111011", 
    82 => "00111111000001010001101110010011", 
    83 => "00111111000101011111111101100001", 
    84 => "00111111001011100001110110101000", 
    85 => "10111101110001011100101110111100", 
    86 => "00111111000000100111100001011011", 
    87 => "00111110011000000011111110110011", 
    88 => "00111101010100010010111111010011", 
    89 => "00111110001010010000001101100100", 
    90 => "00111110101010111000111010001111", 
    91 => "10111110001001101010100001110110", 
    92 => "10111101110000011001000100010101", 
    93 => "00111110110011101110000000001001", 
    94 => "10111110100000011010010110000111", 
    95 => "00111111000100110101111010010110", 
    96 => "00111111001101101111010110111010", 
    97 => "00111110000001100000100101010111", 
    98 => "00111111001001011001011001010011", 
    99 => "10111101101111111000001000101100", 
    100 => "00111101011100100110111100011110", 
    101 => "00111111011010100101011010111101", 
    102 => "00111111010101111100011110110100", 
    103 => "00111100000010111001011101111000", 
    104 => "00111111001001111000000001010110", 
    105 => "10111101110010100000110000101000", 
    106 => "00111111001010111000000011111110", 
    107 => "00111100100010111101110010101101", 
    108 => "10111101111001000110110011111101", 
    109 => "00111101110001011100111001011011", 
    110 => "00111111000111000011111011001001", 
    111 => "00111111001110001011101000110000", 
    112 => "10111110010110100011100111000101", 
    113 => "00111111000100110101111111100101", 
    114 => "00111110010101110110010001101011", 
    115 => "00111110100111101101011010011001", 
    116 => "00111110010010111111010011001011", 
    117 => "00111111001110000101110010011010", 
    118 => "00111111010100011101010001000001", 
    119 => "00111111011011110001001010010000", 
    120 => "00111111001100101110001111100111", 
    121 => "00111110010010111010001100000001", 
    122 => "00111110110001011100100010010111", 
    123 => "00111110110000001100101011000101", 
    124 => "10111110000001110101101011111011", 
    125 => "00111101111010111010011000100110", 
    126 => "00111101011000111100110110011010", 
    127 => "00111110110111010001011101000000", 
    128 => "00111111010101010011011100101010", 
    129 => "00111110110101011011000110100111", 
    130 => "00111101110111101110010111101111", 
    131 => "00111111000111100001001101011110", 
    132 => "00111100111101001010111111010101", 
    133 => "00111111000100001001111001000101", 
    134 => "00111110100000001011111011111001", 
    135 => "00111111010010100010111010010000", 
    136 => "00111010001110101010010110000011", 
    137 => "00111110001101000100000111111111", 
    138 => "00111110111110111111001001101111", 
    139 => "10111101111110010111100100011000", 
    140 => "10111011101110010011110011001101", 
    141 => "00111110000001101000110000100110", 
    142 => "00111111001111010010011101011111", 
    143 => "10111101000101110110001001010010", 
    144 => "00111111001000101100011000110111", 
    145 => "10111101101110000010010001001111", 
    146 => "00111111001001101011000100011100", 
    147 => "10111100001110111000110000110011", 
    148 => "00111101101011110101111101001110", 
    149 => "10111101111101000100100010001100", 
    150 => "00111110110100011011011111100001", 
    151 => "00111110000111100001111111000001", 
    152 => "00111101000111101011110110010000", 
    153 => "00111101101100001000110101001100", 
    154 => "00111110100110110100110010100001", 
    155 => "10111101101110011111011011101100", 
    156 => "00111111010111011111110000101011", 
    157 => "00111111001011010011000100010010", 
    158 => "00111101110001011111000001101111", 
    159 => "00111111001110110000111101111100", 
    160 => "10111101100011101100100111100010", 
    161 => "00111110101111101110010101101001", 
    162 => "00111110110111001000011110011000", 
    163 => "10111110000101001000000001100011", 
    164 => "00111111000100100001101010010011", 
    165 => "00111101111001001011111001000000", 
    166 => "10111011001100110000101101011011", 
    167 => "00111101000010001110111011110010", 
    168 => "10111100110011111010101011001110", 
    169 => "10111100110111110001101111101111", 
    170 => "00111010010111111001101111011100", 
    171 => "00111110100010100011111111001101", 
    172 => "00111101111110001001000001001111", 
    173 => "00111111000110010001011011101100", 
    174 => "10111101101101111100011011111100", 
    175 => "00111110110111110001000001100110", 
    176 => "00111101101001111001110001000001", 
    177 => "00111101001000010101000100011110", 
    178 => "00111110100101101100011111001001", 
    179 => "00111110110110100010111001111111", 
    180 => "10111101100001111001100010010110", 
    181 => "10111101100000011010100100110011", 
    182 => "00111101100000001111011001101010", 
    183 => "00111100011110111011110101111011", 
    184 => "10111101010111011111101110010100", 
    185 => "00111100100010110001110111010110", 
    186 => "10111101001011111001001000101001", 
    187 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_eES is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_eES is
    component predict_ensemble_eES_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_eES_rom_U :  component predict_ensemble_eES_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


