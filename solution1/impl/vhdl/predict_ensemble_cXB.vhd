-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_cXB_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_cXB_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010010110010010100101101", 
    1 => "00111001101100001010111101100000", 
    2 => "00111101100001000010011101000010", 
    3 => "00111110111110011100110101100000", 
    4 => "00111111011101110000001101101101", 
    5 => "00111111000011000100000001111101", 
    6 => "10111010000111001100001100011010", 
    7 => "00111100111101011001000000111010", 
    8 => "00111111001000010111010001100000", 
    9 => "10111001100010111111110000100010", 
    10 => "00111000100100001011010000011000", 
    11 => "10111001001110011001100100010011", 
    12 => "00111111010111101100110000011101", 
    13 => "00111001101111110101110101111001", 
    14 => "10110111111110111010100010000010", 
    15 => "00111111010110001100101101001011", 
    16 => "00111111001111000011111111100110", 
    17 => "00111101100111011011110100110000", 
    18 => "10111001010110010000111000100100", 
    19 => "00111001100011100001010100000001", 
    20 => "00111101110011111110100100110010", 
    21 => "10111000110111000011001101110010", 
    22 => "00111111011101100101011000010101", 
    23 => "10111001010100111100111111110110", 
    24 => "00111000111101010101110111100110", 
    25 => "00111111011011100101000000001101", 
    26 => "10111000101010011101111010001011", 
    27 => "00111101011110011110110011110110", 
    28 => "00111001000001000001111011011110", 
    29 => "00111101010001011001011001000010", 
    30 => "00111101100101001011110101110111", 
    31 => "10000000000000000000000000000000", 
    32 => "10111001000001110100010000101100", 
    33 => "00111001000011111010011110101000", 
    34 => "00111111010100111010010101111111", 
    35 => "00111111010001111101111100011010", 
    36 => "10111000100001000001111011011110", 
    37 => "00111110000011110101111111010100", 
    38 => "00111000001111001011111001100010", 
    39 => "00111110100101110000011111100001", 
    40 => "00111110000101010111110100011000", 
    41 => "00111000111010001100100010101100", 
    42 => "00111101101011110100000001011111", 
    43 => "10111000110110100001101010010011", 
    44 => "00111111011001001101000101000010", 
    45 => "00110111110010010101001110011100", 
    46 => "00111110101010111110111101101011", 
    47 => "00111111011110110110010101000101", 
    48 => "10111000000101101111111010110101", 
    49 => "10110111110000001111000000100000", 
    50 => "00111111000111110011101000000100", 
    51 => "00111110011101101100101010001010", 
    52 => "10110111110100011011011100010111", 
    53 => "00111111000000100001101011100111", 
    54 => "00110111000001100011011110111101", 
    55 => "00111111000001001100100010001010", 
    56 => "00111110010101010110011110011001", 
    57 => "00111110111111010101010110100100", 
    58 => "10110111011010101110000110001011", 
    59 => "00110111001001111100010110101100", 
    60 => "00110111111010101110000110001011", 
    61 => "00111111010011010001011101000000", 
    62 => "00111111010000011011111101111011", 
    63 => "00111110110010000111111011100001", 
    64 => "00111110111110000001001010111110", 
    65 => "10110111000101101111111010110101", 
    66 => "10111000000011101001101100111001", 
    67 => "00111111011001100011110110010010", 
    68 => "10110111110100011011011100010111", 
    69 => "10110110010010010101001110011100", 
    70 => "00110111011110111010100010000010", 
    71 => "00110101100001100011011110111101", 
    72 => "10110110101001111100010110101100", 
    73 => "00111111010101110001101011100011", 
    74 => "00110111110100011011011100010111", 
    75 => "00111111011000110100000000001100", 
    76 => "10110111101110001000110010100100", 
    77 => "00111111010101011111010100111000", 
    78 => "00111000000001100011011110111101", 
    79 => "00111110101010110100011111000111", 
    80 => "10110111100111110110001000110000", 
    81 => "00111110101000101101010011110110", 
    82 => "00111110000101001010010100010110", 
    83 => "00111110011101110100111100101111", 
    84 => "00111110110000000010001101100100", 
    85 => "10110111110100011011011100010111", 
    86 => "00111110100010011110010100011001", 
    87 => "00111110010100110111111110111111", 
    88 => "00111000000111110110001000110000", 
    89 => "00111111000001110101100010001110", 
    90 => "00110110110010010101001110011100", 
    91 => "00111111000010110011001010101101", 
    92 => "00111110101001001100000100100010", 
    93 => "00110111111100110100010100000111", 
    94 => "00110110010010010101001110011100", 
    95 => "10110111010110100001101010010011", 
    96 => "10110110010010010101001110011100", 
    97 => "00111110110001110100001111101001", 
    98 => "00111000010100011011011100010111", 
    99 => "00111110100101011001001001110101", 
    100 => "00111111001000000000011010001110", 
    101 => "00111101101010000110000001010111", 
    102 => "10110111110110100001101010010011", 
    103 => "00111110001101010111100111110010", 
    104 => "10111000000101101111111010110101", 
    105 => "00111110000000000000000000000000", 
    106 => "10110111101100000010100100101000", 
    107 => "10110111010010010101001110011100", 
    108 => "00111000010110100001101010010011", 
    109 => "00110111000101101111111010110101", 
    110 => "00111110100101000111000001000011", 
    111 => "00110111011110111010100010000010", 
    112 => "00111110011011011101001001101011", 
    113 => "10110111011010101110000110001011", 
    114 => "00111110100001001110101110111100", 
    115 => "10110111100101101111111010110101", 
    116 => "00111110100001100000111100111101", 
    117 => "10110101100001100011011110111101", 
    118 => "10110111000101101111111010110101", 
    119 => "00110111100001100011011110111101", 
    120 => "00111110101101001011010010101111", 
    121 => "10110111000101101111111010110101", 
    122 => "00111110101110001100100101010100", 
    123 => "00110111000101101111111010110101", 
    124 => "00111110110010111110111110101110", 
    125 => "00111110110101000001110000111111", 
    126 => "00111110111101110100010111100001", 
    127 => "10110111100101101111111010110101", 
    128 => "00111110101101110100010111100001", 
    129 => "00111110101111010010101011000111", 
    130 => "00111110001110000011101110100011", 
    131 => "10110110100001100011011110111101", 
    132 => "00111110110011001101011101001001", 
    133 => "00110111100001100011011110111101", 
    134 => "00111110111111100101110011110110", 
    135 => "00111111000001011110111100110001", 
    136 => "00111110001111110111000110101000", 
    137 => "00110110100001100011011110111101", 
    138 => "10110110010010010101001110011100", 
    139 => "00111110110010011001000011110011", 
    140 => "00111111000000111001011111101110", 
    141 => "00110101100001100011011110111101", 
    142 => "10110110111010101110000110001011", 
    143 => "00111111000110101100111001010111", 
    144 => "00111111001110101100001100110011", 
    145 => "00110110101001111100010110101100", 
    146 => "00111110111111000101000100010001", 
    147 => "00111110110010110011010011100111", 
    148 => "10110110000001100011011110111101", 
    149 => "00000000000000000000000000000000", 
    150 => "00110111001110001000110010100100", 
    151 => "00111111011001101011110101101111", 
    152 => "10110111000001100011011110111101", 
    153 => "00111111000110001000000000110000", 
    154 => "00110110100001100011011110111101", 
    155 => "10110101100001100011011110111101", 
    156 => "00110101100001100011011110111101", 
    157 => "00111110011000100100111000010110", 
    158 => "00110110110010010101001110011100", 
    159 => "00111110111101010000010110101111", 
    160 => "00110110100001100011011110111101", 
    161 => "00111111001010100010111010010000", 
    162 => "00111110100010001111110011010110", 
    163 => "10110110000001100011011110111101", 
    164 => "00110101100001100011011110111101", 
    165 => "00111111000011110111001100111011", 
    166 => "10110111000001100011011110111101", 
    167 => "00111111000101101001001011110111", 
    168 => "00111111001111010010001111000100", 
    169 => "00110110000001100011011110111101", 
    170 => "10110110000001100011011110111101", 
    171 => "00110111000101101111111010110101", 
    172 => "00110101100001100011011110111101", 
    173 => "00111111001000100000110000000111", 
    174 => "00111111001011101011001101010111", 
    175 => "00111111000010101011111001001001", 
    176 => "10110110100001100011011110111101", 
    177 => "10110101100001100011011110111101", 
    178 => "00110110010010010101001110011100", 
    179 => "00111111000000011111110011010010", 
    180 => "00111110111000001100100110111000", 
    181 => "10110101100001100011011110111101", 
    182 => "10110110010010010101001110011100", 
    183 => "10110110000001100011011110111101", 
    184 => "00111111001011000100010111011101", 
    185 => "00110101100001100011011110111101", 
    186 => "10110101100001100011011110111101", 
    187 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_cXB is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_cXB is
    component predict_ensemble_cXB_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_cXB_rom_U :  component predict_ensemble_cXB_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


