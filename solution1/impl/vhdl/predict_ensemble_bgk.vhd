-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_bgk_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_bgk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111011010101011110000011111", 
    1 => "00111101000011100110110100010110", 
    2 => "00111101110000110000000100100001", 
    3 => "00111100000001101001010000000011", 
    4 => "00111101111101110011001000010110", 
    5 => "10111100000001010110000111010100", 
    6 => "00111001011001011010001101011101", 
    7 => "10111011100010101101111011101100", 
    8 => "00111101011110101001000110010111", 
    9 => "00111110101011001001001111001001", 
    10 => "00111101101000111110111110101110", 
    11 => "00111011011100010101111001111101", 
    12 => "00111101010110000010000000011101", 
    13 => "00111111000011010101110010000101", 
    14 => "00111101110000111101011100001010", 
    15 => "10111011001000111000001100100111", 
    16 => "00111010111101100010011100111001", 
    17 => "10111011111011110000001010000010", 
    18 => "00111010110011000101011101011100", 
    19 => "00111011010100110100100110111111", 
    20 => "00111101111000001100000111111101", 
    21 => "00111110111001111000001010110010", 
    22 => "00111110001100010001000000011011", 
    23 => "10111011011001000011001001000100", 
    24 => "00111001100010011110001101000011", 
    25 => "00111110001010000111110010100110", 
    26 => "00111110010010111101100111001011", 
    27 => "00111110100100010000011010001010", 
    28 => "10111011010011110011100110001111", 
    29 => "00111111010011010001011101000000", 
    30 => "00111111011000000001100011100111", 
    31 => "00111110100101010100000111011001", 
    32 => "00111010010101010001111110000010", 
    33 => "00111011001001101010100001110110", 
    34 => "00111001101100110100111001110111", 
    35 => "00111110100101000001001110011000", 
    36 => "10111010101101100011000010101001", 
    37 => "10111010100000100000010111111111", 
    38 => "00111110100010001000111111001001", 
    39 => "00111111000101010100110001100110", 
    40 => "00111111011010000010011111111010", 
    41 => "10111001100110110011000001110011", 
    42 => "00111010000100101100110011110111", 
    43 => "00111101110111001111011001111011", 
    44 => "10111011000101001101010100001111", 
    45 => "00111111011101010111011111101010", 
    46 => "00111011000001110110010110111010", 
    47 => "00111010111101101000101111100011", 
    48 => "00111110001110101100100011100111", 
    49 => "00111110100111011101100000001110", 
    50 => "00111010100100000100111101101110", 
    51 => "10111010110111100110110111011111", 
    52 => "00111110101101001011010010101111", 
    53 => "00111110111101010000001011101111", 
    54 => "00111110011100001111000011101001", 
    55 => "00111010001111111010000010010100", 
    56 => "00111110100011101101111001110110", 
    57 => "00111010101110000100100110001000", 
    58 => "00111111001111101000101110100000", 
    59 => "10111010111001101000111000111111", 
    60 => "00111110010111010110101010011100", 
    61 => "00111110100101101011101101010110", 
    62 => "10111010101000100010001011010101", 
    63 => "10111001100111010100100101010010", 
    64 => "00111010001011100001000001001001", 
    65 => "00111010111100110100010100000111", 
    66 => "00111110100001100000100101111000", 
    67 => "00111010010000110000100011111111", 
    68 => "00111111001110001011101000110000", 
    69 => "00111110111100110101010101000111", 
    70 => "00111110011010100011000010011000", 
    71 => "00111110101100111000011001101110", 
    72 => "10111010011100111100101100111110", 
    73 => "10111010110000110010101010001101", 
    74 => "00111001100011010000100010010010", 
    75 => "00111010111001010001110100100110", 
    76 => "00111110100110100001111101101101", 
    77 => "00111110101011011000101001110110", 
    78 => "00111110101011011110010110110000", 
    79 => "00111110110110011111011000100011", 
    80 => "00111111001001101100111001101000", 
    81 => "10110110010010010101001110011100", 
    82 => "00111010011010010000101111001000", 
    83 => "00111110011111110101100000111010", 
    84 => "00111111001101100110011111111001", 
    85 => "00110111111000100111111000001111", 
    86 => "10111010100001101101111110000011", 
    87 => "00111111001000111011001110010110", 
    88 => "00111111011011101111111101111110", 
    89 => "10111001100100010011101001010000", 
    90 => "10111010110000000000010100111110", 
    91 => "10111001100001110100010000101100", 
    92 => "00111010010100011111101000110011", 
    93 => "00111110000000010010110001101011", 
    94 => "00111111010001000101110111011001", 
    95 => "00111110111111011011111111001111", 
    96 => "10111011010110110100100010010001", 
    97 => "00111101111110001001101001000110", 
    98 => "00111110111011101101101100101111", 
    99 => "00111010010000101100010111100011", 
    100 => "00111011000001110101010011110011", 
    101 => "00111111011001100010001110011110", 
    102 => "00111111000001110111100000100101", 
    103 => "10111001111100111100101100111110", 
    104 => "00111011000100101101110110111110", 
    105 => "00111110110011100001000000101000", 
    106 => "00111110111110001000111101000011", 
    107 => "00111111010001111000110101100001", 
    108 => "00111001101001111100010110101100", 
    109 => "00111010011010001100100010101100", 
    110 => "00111111011000000110011011010011", 
    111 => "00111110111011101101001111011000", 
    112 => "00111110110110010100100100011111", 
    113 => "00111111000110011011111011100100", 
    114 => "00111111000111100010111100100111", 
    115 => "00111110110111110000101010100010", 
    116 => "00111110110011100100011000000110", 
    117 => "00111111010010011100000110100100", 
    118 => "00111010001000000110111010100000", 
    119 => "00111110111011000111110001010010", 
    120 => "10111010011000110100011101100011", 
    121 => "00111110110011010100101101101010", 
    122 => "00111001100000101000110000110111", 
    123 => "00111110110000001001101000100100", 
    124 => "00111110110101000110100110010100", 
    125 => "00111111000010111011101100110000", 
    126 => "00111111001001011001011001010011", 
    127 => "00111010001010001000111100000000", 
    128 => "00111111010010100010001101001011", 
    129 => "10111010101011000101110000010100", 
    130 => "00111111000000010111010001100000", 
    131 => "00111111001110110000101101111100", 
    132 => "10111010000100010011101001010000", 
    133 => "00111110100011110101111110010001", 
    134 => "00111110111000000011101001010100", 
    135 => "00111010000110000000101100100100", 
    136 => "00111010110001111100000011110100", 
    137 => "00111001110100010011000011100000", 
    138 => "00111111000000010011011011100111", 
    139 => "00111111000010011001000111111111", 
    140 => "00111110110101111110101010100011", 
    141 => "00111111000000111001100111110110", 
    142 => "00111111000011001011000000111010", 
    143 => "10111010100010001011010101000110", 
    144 => "00111111000111001110000111000110", 
    145 => "00111111001001100101100111100010", 
    146 => "00111010000001111000011101001000", 
    147 => "10111001001110101010010110000011", 
    148 => "10111010000110101010101000111011", 
    149 => "00111111001001011000111010101000", 
    150 => "00111010001100010011010110011000", 
    151 => "10111000100001100011011110111101", 
    152 => "00111010100100100100011010111111", 
    153 => "00111001111001100010100110010101", 
    154 => "00111110101100101011100001100011", 
    155 => "10111001110100100011110101001111", 
    156 => "00110111100001100011011110111101", 
    157 => "10111010101011111010001011110000", 
    158 => "10111001110111001011100110101010", 
    159 => "10111010000000110001001001101111", 
    160 => "00111001010101011110100011010101", 
    161 => "00111111010111011001111010000100", 
    162 => "00111111000011110111110100100000", 
    163 => "00111001000000110001001001101111", 
    164 => "00111111010000000100101010000100", 
    165 => "00111111001000011000110001011101", 
    166 => "00111001111100100011100010010111", 
    167 => "10111001100111110110001000110000", 
    168 => "10111010010111011000001011111101", 
    169 => "10111001100110000000101100100100", 
    170 => "00111001001000000110111010100000", 
    171 => "10111010000101011111001001000101", 
    172 => "10111000100011101001101100111001", 
    173 => "00111110111011011101111110000111", 
    174 => "10111001011110101001110000010011", 
    175 => "10110111010110100001101010010011", 
    176 => "10111010100011111010011110101000", 
    177 => "00111010100011001010001111101000", 
    178 => "00111010000100111101100101100110", 
    179 => "00111001001000000110111010100000", 
    180 => "10111010001011010000001111011010", 
    181 => "00111110110111001011001001110100", 
    182 => "00111111000101100010101101001001", 
    183 => "00111001110011111001111000111000", 
    184 => "10111001001100010011010110011000", 
    185 => "00111001101100110100111001110111", 
    186 => "00111010011001111111111101011000", 
    187 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_bgk is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_bgk is
    component predict_ensemble_bgk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_bgk_rom_U :  component predict_ensemble_bgk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


