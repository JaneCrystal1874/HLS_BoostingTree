-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_eYW_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_eYW_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111011100110101100110101011", 
    1 => "00111110100111111000011000111100", 
    2 => "00111000001000111001001111101110", 
    3 => "00111110100010000001000011101001", 
    4 => "00111110101010010000100111010000", 
    5 => "00111110011100001111111101010100", 
    6 => "00111110111011101110100110011010", 
    7 => "00111000010001010010000111011110", 
    8 => "00111111001010010000011110010110", 
    9 => "00111110000110000000010011011010", 
    10 => "00111000101001011010110011001101", 
    11 => "10111001001111011100101011010001", 
    12 => "00111110111001111110000110010111", 
    13 => "00111111011011100101000000001101", 
    14 => "00111000010100011011011100010111", 
    15 => "10111000000100101100110011110111", 
    16 => "00111100110101111000001111100000", 
    17 => "00111110010010111011000000011101", 
    18 => "10110111100111110110001000110000", 
    19 => "00111110011110011111001010111011", 
    20 => "10110111111110111010100010000010", 
    21 => "00110110101001111100010110101100", 
    22 => "00111110111100001111110001110010", 
    23 => "10000000000000000000000000000000", 
    24 => "00110110010010010101001110011100", 
    25 => "00111110101010110110110010111110", 
    26 => "00111101010111100000111001110011", 
    27 => "00111110111000110011010011100111", 
    28 => "00111110000000101001010100100001", 
    29 => "00111101111001011101001010001101", 
    30 => "10111000100011101001101100111001", 
    31 => "00111000000110110011000001110011", 
    32 => "00111111010110111010001011110000", 
    33 => "10110101100001100011011110111101", 
    34 => "00110110101001111100010110101100", 
    35 => "10110110111010101110000110001011", 
    36 => "00111110010001101110000011010010", 
    37 => "10110111001001111100010110101100", 
    38 => "00111110000010110010001111011101", 
    39 => "00111101011101000000000111000101", 
    40 => "00110111000101101111111010110101", 
    41 => "00110110010010010101001110011100", 
    42 => "10110110100001100011011110111101", 
    43 => "00110110100001100011011110111101", 
    44 => "00111101100111001011000101000110", 
    45 => "10110111100001100011011110111101", 
    46 => "00111111001000110011001010001011", 
    47 => "10110110010010010101001110011100", 
    48 => "00111111010010100010111010010000", 
    49 => "00111100111111110110001010110111", 
    50 => "00110111000101101111111010110101", 
    51 => "00111110010101010101001111101111", 
    52 => "00110110000001100011011110111101", 
    53 => "00110110111010101110000110001011", 
    54 => "00111111011101010101000000100010", 
    55 => "10110101100001100011011110111101", 
    56 => "00111110011001001001001000110110", 
    57 => "00111101100111011011110100110000", 
    58 => "00111111000011100100100001110011", 
    59 => "10110101100001100011011110111101", 
    60 => "00111110100110101000000000101000", 
    61 => "00110110101001111100010110101100", 
    62 => "00111111011100110010000010000110", 
    63 => "10110111001110001000110010100100", 
    64 => "00111110111001110110000000111001", 
    65 => "00110101100001100011011110111101", 
    66 => "00111110100001110100100111001111", 
    67 => "00111101111101010010111000110000", 
    68 => "00110110100001100011011110111101", 
    69 => "10110110110010010101001110011100", 
    70 => "00111111000001010011011111100011", 
    71 => "00000000000000000000000000000000", 
    72 => "00111110100111100010000000100101", 
    73 => "00111110110010010101011101101001", 
    74 => "00111110101011011000101100011110", 
    75 => "00110110111010101110000110001011", 
    76 => "10110101100001100011011110111101", 
    77 => "00111110110110000011010010001111", 
    78 => "00000000000000000000000000000000", 
    79 => "10110110111010101110000110001011", 
    80 => "00110101100001100011011110111101", 
    81 => "00110110100001100011011110111101", 
    82 => "00111101101100111001000000000000", 
    83 => "10000000000000000000000000000000", 
    84 => "10110101100001100011011110111101", 
    85 => "10110110010010010101001110011100", 
    86 => "00111101111111110110001010110111", 
    87 => "00110110101001111100010110101100", 
    88 => "00111110010111010110101010011100", 
    89 => "10110110010010010101001110011100", 
    90 => "00111110000000000000000010000110", 
    91 => "00110110010010010101001110011100", 
    92 => "00111111010110010001001110100101", 
    93 => "00111111010011111110110000000011", 
    94 => "10110110000001100011011110111101", 
    95 => "00111110110101010100000010101011", 
    96 => "00110110010010010101001110011100", 
    97 => "00111110100010101110110111111110", 
    98 => "00111111010111101111011010100101", 
    99 => "00000000000000000000000000000000", 
    100 => "00111110101010111100000101101010", 
    101 => "00111111010100000011100001001100", 
    102 => "00111111011010010010110110111010", 
    103 => "00111111010110001101001101111100", 
    104 => "10110110000001100011011110111101", 
    105 => "00111111011100100010111001101111", 
    106 => "10110101100001100011011110111101", 
    107 => "00110110000001100011011110111101", 
    108 => "00000000000000000000000000000000", 
    109 => "10000000000000000000000000000000", 
    110 => "10110101100001100011011110111101", 
    111 => "00111111011011100101110001011111", 
    112 => "10110101100001100011011110111101", 
    113 => "00111110100001011101010100001011", 
    114 to 115=> "00110101100001100011011110111101", 
    116 => "00111110101001111100110101000110", 
    117 => "00111110110111010011101101001011", 
    118 => "00111110110011101100110010000001", 
    119 => "10000000000000000000000000000000", 
    120 => "10110101100001100011011110111101", 
    121 => "00111111011011100100010011111010", 
    122 => "00111111000101000100001001010011", 
    123 => "00111110111000010101011001011100", 
    124 => "10000000000000000000000000000000", 
    125 => "00111110110010101111111111010010", 
    126 => "00110101100001100011011110111101", 
    127 => "10000000000000000000000000000000", 
    128 => "00111110101010010011000011100000", 
    129 => "00111110100101011101101010001100", 
    130 => "00111110111011011110001010101100", 
    131 => "00110101100001100011011110111101", 
    132 => "00111110101111111111101111001110", 
    133 => "10000000000000000000000000000000", 
    134 => "00111111000101110101001001010100", 
    135 => "00000000000000000000000000000000", 
    136 => "00111111001110000101111101101100", 
    137 => "10000000000000000000000000000000", 
    138 => "00111110101011101110010000111011", 
    139 to 140=> "00110101100001100011011110111101", 
    141 => "00000000000000000000000000000000", 
    142 => "10000000000000000000000000000000", 
    143 => "00000000000000000000000000000000", 
    144 => "00111111010011100110111110000010", 
    145 => "00111111001000111000000001010110", 
    146 => "00111111010000010000111110110110", 
    147 => "00111111001000011000110001011101", 
    148 => "00111111010010000101100111011010", 
    149 to 150=> "10000000000000000000000000000000", 
    151 => "00111111001000001110100010010110", 
    152 => "10000000000000000000000000000000", 
    153 => "00111111010100001110000101100001", 
    154 => "10000000000000000000000000000000", 
    155 => "00111111000110100011001000011010", 
    156 => "00111110010010001011101011000111", 
    157 to 158=> "00000000000000000000000000000000", 
    159 => "00111111000011011110101001000110", 
    160 => "10000000000000000000000000000000", 
    161 to 162=> "00000000000000000000000000000000", 
    163 => "00111111000001111011011001010110", 
    164 => "10000000000000000000000000000000", 
    165 => "00111111000100011010101011111000", 
    166 => "00000000000000000000000000000000", 
    167 => "00111110111101011101000111100101", 
    168 to 169=> "10000000000000000000000000000000", 
    170 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_eYW is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_eYW is
    component predict_ensemble_eYW_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_eYW_rom_U :  component predict_ensemble_eYW_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


