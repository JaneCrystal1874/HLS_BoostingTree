-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_ncg_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_ncg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011000111001110101011110", 
    1 => "00111110111101111101101011101000", 
    2 => "00111101100001110101011010000110", 
    3 => "00111101001110110100110000111100", 
    4 => "10111110000010000101010100010001", 
    5 => "00111111000000100000111111000011", 
    6 => "00111111011101110000001101101101", 
    7 => "00111100110000001001001111011001", 
    8 => "10111100100000101000110000110111", 
    9 => "10111100000100001110011001101101", 
    10 => "00111101100100010110100011111001", 
    11 => "00111101100111011011110100110000", 
    12 => "00111111001100001101110000010010", 
    13 => "00111101100010011111011110110110", 
    14 => "00111110000000010101111111001100", 
    15 => "10111101011010101110000110001011", 
    16 => "00111011100101001010001010111010", 
    17 => "00111110110001110010100110010001", 
    18 => "00111110001000101001010101100100", 
    19 => "00111101000101110001001110101101", 
    20 => "00111110111101011111101000000001", 
    21 => "00111110111101001001011010001001", 
    22 => "00111111011011101111101110100000", 
    23 => "00111110101000000111000010111001", 
    24 => "00111111011010110101101011011001", 
    25 => "00111111010101010111111011001100", 
    26 => "00111111000110011001011010100111", 
    27 => "00111100011001101111111101111110", 
    28 => "00111111000110100010001001100000", 
    29 => "10111100100111101110100010001110", 
    30 => "10111101100011110010101101100111", 
    31 => "00111101100110001111000011000111", 
    32 => "10111101000000111010101001111010", 
    33 => "00111110100010100001100110000111", 
    34 => "00111111000011100001101010100100", 
    35 => "00111110000011011001100100000011", 
    36 => "00111100100010100011101101011000", 
    37 => "10111100111011100000010011000000", 
    38 => "00111101011110001111111011101111", 
    39 => "00111101011100011101001011100001", 
    40 => "10111100000001100111101011011001", 
    41 => "10111011100110001110110110100010", 
    42 => "00111100111011001011100101100111", 
    43 => "00111101100011011100011011100011", 
    44 => "00111101001001101100111000110110", 
    45 => "10111100111010100110001110110111", 
    46 => "10111011110010111101000100100100", 
    47 => "00111101001010101101100100100111", 
    48 => "00111110000010101000011000001110", 
    49 => "10111010100000100010011110001101", 
    50 => "00111101001100111110101010110011", 
    51 => "00111110000001101000011011101000", 
    52 => "00111110111110000000001100000100", 
    53 => "00111110101010010001000101001001", 
    54 => "10111101010001011010111001100000", 
    55 => "00111111011011010100101010010000", 
    56 => "00111111000111010000111011101101", 
    57 => "00111111001000011100001011010010", 
    58 => "00111110011110010011111100101001", 
    59 => "00111110011111000101100000100101", 
    60 => "00111100111010000001100010000011", 
    61 => "00111111010111000011010101101001", 
    62 => "10111100111110011111000000011100", 
    63 => "00111100110101101001001010110100", 
    64 => "10111100100010010001111000100001", 
    65 => "10111011111011111111010111000111", 
    66 => "10111101001101100110110001101110", 
    67 => "00111111000100101110100011000000", 
    68 => "00111110110111101110100110011010", 
    69 => "00111111010011111101010011110001", 
    70 => "00111100100011000101110010011010", 
    71 => "10111101000010001011100101111000", 
    72 => "10111011110100110110101101001100", 
    73 => "00111111001010001111111011101111", 
    74 => "00111110101100111100111111110110", 
    75 => "00111110110100100101101110111000", 
    76 => "10111100101111100110001111101001", 
    77 => "00111110110010000010001001010111", 
    78 => "00111111001011110110000011110010", 
    79 => "00111101000111000000010101001111", 
    80 => "00111111001010100010111010010000", 
    81 => "10111100100001110011111111111011", 
    82 => "00111111000011111100111110010010", 
    83 => "00111110101001001100000100100010", 
    84 => "00111110110100001011101010100110", 
    85 => "00111101010000010111111111000111", 
    86 => "00111111001110010110011001101011", 
    87 => "00111110101011001011110110011000", 
    88 => "00111110100110101010110001010100", 
    89 => "00111111001011001010011011101100", 
    90 => "00111111001001000111100110000001", 
    91 => "00111111010010100010111010010000", 
    92 => "10111101001010000010110001101111", 
    93 => "00111101000101010111110111100001", 
    94 => "00111110111111111001010110110011", 
    95 => "00111111001100101011010011011001", 
    96 => "00111100100000100011010000100010", 
    97 => "00111111000101111100010000111011", 
    98 => "00111110110011101010111011000000", 
    99 => "00111011010001110100101110000100", 
    100 => "00111101001011100010101110001100", 
    101 => "00111110110111010011100101010100", 
    102 => "10111011100010011011000011101110", 
    103 => "10111100110110101010001011100100", 
    104 => "00111111000101001110110011101010", 
    105 => "00111110001111001011011010000101", 
    106 => "10111100101110110011010000011110", 
    107 => "00111111000111101000101110100000", 
    108 => "00111110111111011110111010111011", 
    109 => "10111011111111000000010011001001", 
    110 => "10111100101011111001100001110100", 
    111 => "00111011100000010101010111010110", 
    112 => "00111100111010000000000101110001", 
    113 => "10111100100010111110001011111000", 
    114 => "00111111000001010000010001001111", 
    115 => "00111100110011111010100010110101", 
    116 => "00111111001110111011111111101000", 
    117 => "10111100011101110101010100110111", 
    118 => "00111111000110101000000100000010", 
    119 => "00111011110111000100010000111001", 
    120 => "00111110111000100101000111000010", 
    121 => "00111110010000110001110110110100", 
    122 => "00111110001110011001001111010101", 
    123 => "10111100111100100011001001001101", 
    124 => "10111010101110111101001110000000", 
    125 => "00111110100101100111101100111110", 
    126 => "00111110110001100101101100100001", 
    127 => "10111010100100100100011010111111", 
    128 => "00111100001011000011111010111000", 
    129 => "00111111001101010001111100111111", 
    130 => "00111111001010001100010000110111", 
    131 => "10111011010011010000111111101001", 
    132 => "10111100100001111111011001101111", 
    133 => "00111100111100000010101000110101", 
    134 => "00111110000000100100000011111011", 
    135 => "10111100100011010000010001100000", 
    136 => "00111111001111010011010011110000", 
    137 => "10111100100101010100011001001110", 
    138 => "10111010011010111110110111111010", 
    139 => "00111100101000110111000001001000", 
    140 => "00111001100101100111100001111101", 
    141 => "00111110100100001010001010000111", 
    142 => "00111111010001010010011110110011", 
    143 => "00111110111000011000001001100110", 
    144 => "00111111001011000111000010000110", 
    145 => "10111100101000011110001111101011", 
    146 => "00111111000010110111010110100111", 
    147 => "10111011111000011110111101110100", 
    148 => "00111011100101101101010011000011", 
    149 => "00111010110000100110000100111001", 
    150 => "00111101000100011101010001110100", 
    151 => "00111110111110100010111001111111", 
    152 => "00111110111010001000001100010010", 
    153 => "10111101000111010111000000011110", 
    154 => "10111100011010000100011010100110", 
    155 => "00111100001010101111111111110011", 
    156 => "00111111010011011111110001001100", 
    157 => "00111110111010110100001010101011", 
    158 => "00111111000001010000000001010000", 
    159 => "00111011000110000011110101111001", 
    160 => "10111100110101000001011101000100", 
    161 => "10111100011111110100011101110011", 
    162 => "00111111011011010011010011110000", 
    163 => "00111111010100101111000111111110", 
    164 => "00111100000010010110100110100001", 
    165 => "10111100001111001101111111110000", 
    166 => "00111100000010110101010001011100", 
    167 => "00111101000000011010001001100010", 
    168 => "00111100000100110111000010001011", 
    169 => "00111110111000011011011010110011", 
    170 => "00111110111001000101011010110100", 
    171 => "10111010111100110000000111101011", 
    172 => "10111100011101110011001110101001", 
    173 => "00111111001101000110110110100100", 
    174 => "00111111010111011010101000001101", 
    175 => "10111100110001000110000011101110", 
    176 => "00111111010010000110000001000110", 
    177 => "00111100110011100001011000001110", 
    178 => "00111100010100001111000111110101", 
    179 => "10111010111101001101011110101110", 
    180 => "00111011110101101101110000011010", 
    181 => "00111100001001011000101100111111", 
    182 => "00111110001111011011000101100100", 
    183 => "10111100011101111001110010000100", 
    184 => "00111100000111011100001011110100", 
    185 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_ncg is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_ncg is
    component predict_ensemble_ncg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_ncg_rom_U :  component predict_ensemble_ncg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


