-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_bbk_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_bbk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111111110110001010110111", 
    1 => "00111011101000100100110011000111", 
    2 => "00111101011100001010011011111100", 
    3 => "10111011100100100010110110010101", 
    4 => "00111111010110111010001011110000", 
    5 => "00111111011110010011001100001001", 
    6 => "00111111010110111001000100111111", 
    7 => "00111101100011011111111001110110", 
    8 => "00111011010111001001100000011100", 
    9 => "00111110100101001100010101010100", 
    10 => "10111011101111110111011010100011", 
    11 => "00111111011100101010010000110011", 
    12 => "00111101110011100011110111100110", 
    13 => "00111010100000101111000011100001", 
    14 => "00111111001011111100010100110111", 
    15 => "00111110101110111100111111010101", 
    16 => "10111011111101100101000100101011", 
    17 => "00111111000001111010000011010111", 
    18 => "00111111011100100100110110110001", 
    19 => "10111010110011100010110100011111", 
    20 => "10111010001011001100000010111110", 
    21 => "00111011011010111101110100110011", 
    22 => "10111011001101110001101110001011", 
    23 => "00111110111100110000000101000011", 
    24 => "10111011001101111101010000010111", 
    25 => "00111101110011101010100101100001", 
    26 => "00111011001100001110000110110101", 
    27 => "00111011000111111111100100101111", 
    28 => "00111100010001011001101110000000", 
    29 => "00111111001001000110111011000001", 
    30 => "00111110010111100011110000010000", 
    31 => "00111011001011110001110010111001", 
    32 => "00111110000101011001100000011000", 
    33 => "00111110111111101100100010010011", 
    34 => "00111111010111000010011100100000", 
    35 => "00111010100000000011000000111100", 
    36 => "10110111100101101111111010110101", 
    37 => "10111011011010010010110101010110", 
    38 => "00111001001101111000000000110100", 
    39 => "00111110101000011100001011000010", 
    40 => "00111010110011101001000111001001", 
    41 => "00111111001110010110011001101011", 
    42 => "00111110001110101011111100110100", 
    43 => "00111111000110101010011010001111", 
    44 => "00111011001110101111100101100110", 
    45 => "10111010111110000100000000011000", 
    46 => "00111110010100001011111001010001", 
    47 => "00111011000000111111110101010000", 
    48 => "00111110010110101001100001100111", 
    49 => "00111011000010000001111001000111", 
    50 => "00111111011001001101000101000010", 
    51 => "10111010100101001010001010111010", 
    52 => "00111110010111001011100111101101", 
    53 => "00111111010010000011100111011110", 
    54 => "00111110101011010010000001001011", 
    55 => "10111001100011101001101100111001", 
    56 => "00111010101100011111111011101011", 
    57 => "00111111011011110101001011001010", 
    58 => "00111111010010100001011010110101", 
    59 => "00111010000000001111100110010000", 
    60 => "10111011100100101000000101110111", 
    61 => "00111111011010100001011101001100", 
    62 => "00111010110110111000101110101100", 
    63 => "10111011010000110111111001101111", 
    64 => "00111111011010001000010110110010", 
    65 => "00111111000110111101001111110110", 
    66 => "10111011000000110001001001101111", 
    67 => "00111110111111010111101101100011", 
    68 => "00111111001101110000110010011001", 
    69 => "00111110101010001000110001100001", 
    70 => "00111110000101010111001111101011", 
    71 => "00111010001010010101100001010011", 
    72 => "00111111011110000101000101100101", 
    73 => "00111010101111100010111101111011", 
    74 => "10111001100101001110010111010110", 
    75 => "00111110101001101110000010110001", 
    76 => "00111110011101000000010100101101", 
    77 => "00111011010000010001000110101110", 
    78 => "00111111010011011101111000000101", 
    79 => "00111111011010101101000000101101", 
    80 => "10111011000101010001100000101011", 
    81 => "00111110011101011000100001011101", 
    82 => "00111011000110100110011100011111", 
    83 => "10111011000000010110111100000000", 
    84 => "00111110101111000110001000011011", 
    85 => "00111110101110111111111000011001", 
    86 => "10111010101110001000110010100100", 
    87 => "00111110110111110111010000100101", 
    88 => "00111001001010111111011101101010", 
    89 => "00111110100101010010100101111000", 
    90 => "00111111001100101110100011000000", 
    91 => "00111010101100111101010010101110", 
    92 => "00111110110000000111101110011010", 
    93 => "00111011000010010011101101111110", 
    94 => "00111110111011011000101001110110", 
    95 => "00111111010110110111101000101101", 
    96 => "10111001100101011111001001000101", 
    97 => "10111010111010111100110001101100", 
    98 => "00111001101001100011001100000101", 
    99 => "00111110101001110101000101001000", 
    100 => "00111111000000100101111100100000", 
    101 => "10111010110111011010010010001011", 
    102 => "00111110100110110001110101010000", 
    103 => "00111110111111011110111010111011", 
    104 => "00111111001011111001101011110010", 
    105 => "10111010111111010111111001000110", 
    106 => "10111010100001100111101011011001", 
    107 => "00111110101100011011000010001010", 
    108 => "10111010110100000010010001110000", 
    109 => "00111110100010111101111101101110", 
    110 => "10111001111001100010100110010101", 
    111 => "00111010100000110011001111111101", 
    112 => "00111110000001110101100000011001", 
    113 => "10111010110000010111011001010111", 
    114 => "00111001100010100110100101111011", 
    115 => "00111111000110110010110100111100", 
    116 => "00111111000101100001100111001010", 
    117 => "00111110010110100101011001011000", 
    118 => "00111010100101111000010011101100", 
    119 => "00111010010101011110100011010101", 
    120 => "00111011000101001111011010011101", 
    121 => "00111101111101100010100001000110", 
    122 => "00111110000011010100110001110111", 
    123 => "00111011000010100011011100100110", 
    124 => "00111001110111001011100110101010", 
    125 => "00111110011011110101110111111111", 
    126 => "10111010100011010110110100111011", 
    127 => "00111110011111000111110000001111", 
    128 => "10111010010011010100001000111110", 
    129 => "00111111000011010110001000000111", 
    130 => "00111111001101110100010111010000", 
    131 => "00111010101110111001000001100100", 
    132 => "00111111001000011011010101100011", 
    133 => "00111111000100001001000100101010", 
    134 => "00111111001100111100011100011101", 
    135 => "10111000011100110100010100000111", 
    136 => "00111010100011000001110110110000", 
    137 => "00111011000000100111101101110000", 
    138 => "10111010001000110101000011010011", 
    139 => "10111011001101110110111101101101", 
    140 => "10111010111100011111010101111011", 
    141 => "00111110111100011100001110101101", 
    142 => "00111111001010000011100110001010", 
    143 => "00111010100011001110011100000100", 
    144 => "00111110110111111010111000110110", 
    145 => "00111111010000000000010000010000", 
    146 => "00111111001110011010010000010110", 
    147 => "00111110101110110110011111000011", 
    148 => "00111111001100000000000000000000", 
    149 => "00111010110011101111011001110011", 
    150 => "00111000110111000011001101110010", 
    151 => "00111010010100100011110101001111", 
    152 => "00111110111101111101000010001101", 
    153 => "10111001011101100110101001010101", 
    154 => "00111001111001110011011000000101", 
    155 => "10111010011011101101000000101101", 
    156 => "10111001011110001000001100110100", 
    157 => "00111110111000110001100010111001", 
    158 => "00111110110100010010111111110101", 
    159 => "00111110110110101001110001111000", 
    160 => "00111001101010111111011101101010", 
    161 => "10111000110010110110110001111010", 
    162 => "00111001111000111000101001111110", 
    163 => "00111111000000100100100100111101", 
    164 => "00111111000000000100000110111100", 
    165 => "00111010110000010011001100111100", 
    166 => "00111110110111110001000001100110", 
    167 => "10111010110001001011110100110100", 
    168 => "00111110111000111000111000101010", 
    169 => "10111011000011001010001111101000", 
    170 => "10111010001001000001101000100110", 
    171 => "00111110111100000010110110111110", 
    172 => "00111010000100000111000011111100", 
    173 => "00111110111111010001011101000000", 
    174 => "00111110111011001101000101000010", 
    175 => "10111001011110011000111110100011", 
    176 => "00111111000010100011101101011000", 
    177 => "00111010000101100011010101100001", 
    178 => "10111010101010101100100101101101", 
    179 => "00111010010101011010010110111001", 
    180 => "00111000111001001001011011101110", 
    181 => "10111010100001000110000111111010", 
    182 => "00111110111000001110100100101101", 
    183 => "10111010101111011100101011010001", 
    184 => "10111010000010111111110000100010", 
    185 => "00111001001100100100001000000111", 
    186 => "00111110110111011110001010001011", 
    187 => "10110111000101101111111010110101", 
    188 => "10111010000010001001001110111000", 
    189 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_bbk is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_bbk is
    component predict_ensemble_bbk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_bbk_rom_U :  component predict_ensemble_bbk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


