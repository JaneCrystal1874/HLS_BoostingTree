-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_sc4_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_sc4_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100100001111111000000100", 
    1 => "00111101100001000010011101000010", 
    2 => "00111101101111010101110000110001", 
    3 => "00111110111110011100110101100000", 
    4 => "10111101101111010100000011101110", 
    5 => "00111111000001111010000011010111", 
    6 => "00111111010110001011101000110000", 
    7 => "00111110111010000110011000011011", 
    8 => "10111101011010001010100000101010", 
    9 => "00111101100101101000010010001100", 
    10 => "00111011001001000011101110110100", 
    11 => "00111101111010011001111110100001", 
    12 => "00111110010101011011110100001110", 
    13 => "00111110110010101110000101101001", 
    14 => "00111100111011110110100101000100", 
    15 => "00111110111100100111010111101111", 
    16 => "00111110000001100100010001010010", 
    17 => "00111001101011111010001011110000", 
    18 => "10111101000100010010001000110010", 
    19 => "10111100001101110010110001010010", 
    20 => "00111100001100001001001000000100", 
    21 => "10111011011101111011100111100000", 
    22 => "00111101001011001001110100010111", 
    23 => "00111110111010011110011001000111", 
    24 => "00111111011011110111110010011010", 
    25 => "00111110110011000011100100010101", 
    26 => "00111111000000100111111000100000", 
    27 => "00111101000001100011111000001000", 
    28 => "00111111001100000111100101001111", 
    29 => "10111100100000110110000000000111", 
    30 => "10111101010101101101111101000000", 
    31 => "10111100010100000010000000111110", 
    32 => "00111101001001001001110000101100", 
    33 => "00111101010001000010110010000000", 
    34 => "00111101110101101101000100011000", 
    35 => "10111101001011000010110011100100", 
    36 => "00111011111000111110011011000101", 
    37 => "10111100101111101110001111010110", 
    38 => "00111110000011110100010110011110", 
    39 => "00111111000000011100000010101001", 
    40 => "00111110011111100001010111001010", 
    41 => "10111101000111100001100011110000", 
    42 => "00111011111001000001100100011010", 
    43 => "00111110100001011100100100011101", 
    44 => "00111111011110000111011001111101", 
    45 => "00111110010010111110111010000000", 
    46 => "00111101100111001000011111011011", 
    47 => "00111110110111100011110000110010", 
    48 => "00111100101011010010110111001011", 
    49 => "00111101000100100010100001010110", 
    50 => "00111011110010101000100111111100", 
    51 => "10111100101011100101011110010111", 
    52 => "00111110001010010001011001000100", 
    53 => "00111110111011011000101001110110", 
    54 => "00111111000000000000000010101000", 
    55 => "00111101111111001011101111000011", 
    56 => "00111110101000001100101000011101", 
    57 => "00111110101100111010100000111111", 
    58 => "00111110100111101000010100010010", 
    59 => "00111110111100101101100011100100", 
    60 => "00111111011001110000101101111100", 
    61 => "00111110100001101101101011101100", 
    62 => "00111111000010101110110111111110", 
    63 => "10111100010010011000010111110000", 
    64 => "00111100011000011010110001011000", 
    65 => "10111101000011110111010001000111", 
    66 => "00111010111000001010100001001100", 
    67 => "00111111000011001010000101001001", 
    68 => "00111110101110100001100010011100", 
    69 => "00111110111010111010001011100000", 
    70 => "10111100001100001100000000100111", 
    71 => "00111110001111001011011001000001", 
    72 => "00111100100000101000101000011110", 
    73 => "00111100000001111111000000100100", 
    74 => "10111100000000010011100001111010", 
    75 => "00111100111001101010000100011111", 
    76 => "00111100001000111100001000010010", 
    77 => "00111110100011001110101101111001", 
    78 => "00111110100111100110001100100000", 
    79 => "00111110100010100001100110000111", 
    80 => "00111110110101111001100010110111", 
    81 => "00111101001110000110100011111101", 
    82 => "00111110101110000100001001110100", 
    83 => "00111111011011000001001001111011", 
    84 => "00111110111100000001111011101111", 
    85 => "00111011110000010110110111110100", 
    86 => "10111010110100110000011010100011", 
    87 => "00111110011101000001010101101110", 
    88 => "00111110110011011100111011100001", 
    89 => "00111110110110110001111101101000", 
    90 => "00111101000000000000110110100010", 
    91 => "10111100001011000001100011111000", 
    92 => "00111011000011001101011000111101", 
    93 => "10111011011010100100101010001100", 
    94 => "00111100111101111111110011111100", 
    95 => "00111110111100010111010001100000", 
    96 => "00111111000111001101100110010100", 
    97 => "00111111000100011100011110111101", 
    98 => "00111110110010101110011000100001", 
    99 => "00111011110010110100001010001001", 
    100 => "00111110110101110001010000110100", 
    101 => "10111100111101001111110101101101", 
    102 => "10111100000100001011010000011000", 
    103 => "00111100010000011100011000001001", 
    104 => "00111110111001100000111010110110", 
    105 => "00111100011000010110110101101110", 
    106 => "00111111001000010111010001100000", 
    107 => "00111100000010101101001001010110", 
    108 => "00111100101010100010101000001011", 
    109 => "00111111000001100100010100011100", 
    110 => "00111110111101010100100111011000", 
    111 => "00111110110000100011100100011101", 
    112 => "00111110111010000110000000110101", 
    113 => "00111111001111101010101000001000", 
    114 => "10111010010101010001111110000010", 
    115 => "00111010010010001000101001001000", 
    116 => "10111100000000110111101101001010", 
    117 => "00111110001011110101100000111010", 
    118 => "00111111000110000100111101001100", 
    119 => "00111110110110000110111110001011", 
    120 => "00111110111101010100011001101111", 
    121 => "00111110100110110100001010001001", 
    122 => "00111100110100010011111110001110", 
    123 => "00111011010010100111000011010010", 
    124 => "10111101001000010101101110011010", 
    125 => "00111111011011100000101011011001", 
    126 => "00111110111010001010101111010110", 
    127 => "10111100101101001110001100110111", 
    128 => "10111100001100011100000000000001", 
    129 => "10111100100011100001010100000001", 
    130 => "10111010110111101000111101101101", 
    131 => "10111011010010010100001011010101", 
    132 => "00111011111000110101100000101010", 
    133 => "00111100100001000001001001001001", 
    134 => "00111110110001100011010010011000", 
    135 => "10111100101000001011110000111000", 
    136 => "10111010110001111100000011110100", 
    137 => "00111100100000110100000010010010", 
    138 => "10111011111011110110111110001111", 
    139 => "00111110110110100101100011010110", 
    140 => "00111100001000011100111011110010", 
    141 => "00111110011110100010111001111111", 
    142 => "00111110101100111011101101100010", 
    143 => "10111011101000000010001100100001", 
    144 => "00111011100010111111110000100010", 
    145 => "00111110011101010010100000101000", 
    146 => "00111011101000100100010001100011", 
    147 => "00111100110110001111000011000111", 
    148 => "00111101110001000101001000111111", 
    149 => "00111110101110010001001111101000", 
    150 => "00111111000001101000001011011000", 
    151 => "10111100110110011001111011011000", 
    152 => "00111111001100110001111101000111", 
    153 => "10111100000000100111101101110000", 
    154 => "00111111010000001110000000010001", 
    155 => "00111011111001000000100001010011", 
    156 => "00111111000010011101011010101110", 
    157 => "00111110110010111010001011100000", 
    158 => "00111110010100110101101001000010", 
    159 => "00111110111001010110001000111001", 
    160 => "00111110111110100010111001111111", 
    161 => "00111011011101100001011001110010", 
    162 => "00111100100000101001000001101001", 
    163 => "10111100110001111000101001101110", 
    164 => "00111110111101101001011000111110", 
    165 => "10111100001111011110001111111100", 
    166 => "10111010101010100000000000011001", 
    167 => "00111111000101001011110100100011", 
    168 => "00111111001001100011011110001011", 
    169 => "00111111001000100111100011000000", 
    170 => "10111100010011100000001100101110", 
    171 => "10111100101111101101000011110110", 
    172 => "10111011111110101100011000000100", 
    173 => "10111100100011100010111000101100", 
    174 => "00111110111000000110110011001010", 
    175 => "10111011111110001111100010100101", 
    176 => "00111011000011000001110110110000", 
    177 => "00111111000100010110010011101001", 
    178 => "00111100011101001000110000101110", 
    179 => "10111011100110011111000110101110", 
    180 => "00111100100001110101100100100101", 
    181 => "00111100000101110101101011111011", 
    182 => "10111011010110000111011100100101", 
    183 => "00111111001101100101000010110101", 
    184 => "10111011010101000010001111011001", 
    185 => "00111100010000100100100000001111", 
    186 => "00111011100101000010010011100110", 
    187 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_sc4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_sc4 is
    component predict_ensemble_sc4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_sc4_rom_U :  component predict_ensemble_sc4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


