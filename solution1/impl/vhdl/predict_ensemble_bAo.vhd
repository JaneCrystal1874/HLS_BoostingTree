-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_bAo_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_bAo_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100001110101000100000100111", 
    1 => "10111011000100100000001110100011", 
    2 => "00111100011001110100101011111101", 
    3 => "00111011010111010001111001010100", 
    4 => "00111101100000010001000000011011", 
    5 => "00111111011101000001100100111011", 
    6 => "00111101100100001111111000000100", 
    7 => "00111110101100111011111000000001", 
    8 => "00111011001110010001001011011100", 
    9 => "10111011000110001101010001111000", 
    10 => "00111101110100000010000111010001", 
    11 => "10111010101010101100100101101101", 
    12 => "00111110111011111100100001101101", 
    13 => "10111010011011100000011011011001", 
    14 => "00111110001001101111101111010010", 
    15 => "00111011000001101111000001001010", 
    16 => "00111101010111110111011100101001", 
    17 => "00111010101000100100010001100011", 
    18 => "00111110010110100010010010001001", 
    19 => "10111010101010111011010001001110", 
    20 => "00111010000110011001110111001011", 
    21 => "00111110010000111010000111010011", 
    22 => "00111101110001101100100101111110", 
    23 => "00111000111110011000111110100011", 
    24 => "10111010101010000100101111100100", 
    25 => "00111111001001011101000101110000", 
    26 => "00111101110100110000010110010110", 
    27 => "00111001011100000001111110111000", 
    28 => "10111010101110011011101010100001", 
    29 => "00111010010111110001010110100101", 
    30 => "00111111010111000010011100100000", 
    31 => "00111111011110000111011001111101", 
    32 => "00111010000111001100001100011010", 
    33 => "00111111011001001101000101000010", 
    34 => "00111010000010011110001101000011", 
    35 => "00111101111100101101001010111011", 
    36 => "00111110110111011111111011111100", 
    37 => "00111110111001111000001010110010", 
    38 => "00111101111110010110001010001101", 
    39 => "10111010100000010011110010101100", 
    40 => "00111001100000100000010111111111", 
    41 => "10111010000101011111001001000101", 
    42 => "10111000110100111100111111110110", 
    43 => "00111010000101001110010111010110", 
    44 => "00111110000011111100000100010110", 
    45 => "00111001110001111100000011110100", 
    46 => "00111110010111001000001111101101", 
    47 => "00111110111101100011111110111100", 
    48 => "00111111010101011101000101110000", 
    49 => "10111010001001111000001010010000", 
    50 => "00111110001100000011111001100100", 
    51 => "00111111010111000101000110111001", 
    52 => "00111110110011011001110101110111", 
    53 => "00111000100110110011000001110011", 
    54 => "10111001100010111111110000100010", 
    55 => "00111110000000000110100001010101", 
    56 => "00111001110100001010101010101000", 
    57 => "00110111110000001111000000100000", 
    58 => "00111010010000010111011001010111", 
    59 => "10111001110000111000111100110110", 
    60 => "00111111011110100011100001110110", 
    61 => "00111111011011100101110001011111", 
    62 => "00111001101011000111110110100010", 
    63 => "00111110100001101101101011101100", 
    64 => "00111110111001101011001011110010", 
    65 => "00111111001010111011100000011011", 
    66 => "00111110100110001010100010001111", 
    67 => "00111001001110011001100100010011", 
    68 => "10111001110011111001111000111000", 
    69 => "00111110011100000000000111010110", 
    70 => "10111001111010110110011111000011", 
    71 => "00111110011010111100110011110011", 
    72 => "00111110000001011001000000111010", 
    73 => "00111111001000010000100000111110", 
    74 => "00111110101100111111100001110111", 
    75 => "00111000001001111100010110101100", 
    76 => "00111001101011011000101000010001", 
    77 => "00111001100110111011011010101010", 
    78 => "00111110000100111010000101001101", 
    79 => "00111001001100010011010110011000", 
    80 => "00110111010110100001101010010011", 
    81 => "10111000011100110100010100000111", 
    82 => "10111001011001101010111111001101", 
    83 => "00111110111111101010101000001000", 
    84 => "00111110000110111101111100001001", 
    85 => "00110111101001111100010110101100", 
    86 => "00111110000010101110101100111110", 
    87 => "00111001111010100101101101010011", 
    88 => "00111111011010000101000101010101", 
    89 => "10111001110110011001010001011011", 
    90 => "10111001100101001110010111010110", 
    91 => "00111111011100000110110100011110", 
    92 => "00111101110001011101011010111111", 
    93 => "00111110101010010011011010100100", 
    94 => "10111001110011110001100000000001", 
    95 => "00111010000000100100100100011011", 
    96 => "10111000100101101111111010110101", 
    97 => "00111110110010110000001111100010", 
    98 => "00111110101111101010111001011100", 
    99 => "00111110110110100001001001010001", 
    100 => "00111110110101111101101001100010", 
    101 => "00111110110000111011100110101110", 
    102 => "00111110100010101010101101101001", 
    103 => "00111001110101100110111100001101", 
    104 => "00110111011110111010100010000010", 
    105 => "10111001001110011001100100010011", 
    106 => "00111111011000101000110100000000", 
    107 => "10111001110100100011110101001111", 
    108 => "00111110110100110110001110110010", 
    109 => "00111110001101110011001101100110", 
    110 => "00111111001000000110110011111101", 
    111 => "00111110101001100101100011100110", 
    112 => "00111001101100100100001000000111", 
    113 => "10111001001111011100101011010001", 
    114 => "00111110111111011111010000011011", 
    115 => "00111000000100101100110011110111", 
    116 => "10111001101000101000011101111111", 
    117 => "00111110110100010101101110111100", 
    118 => "00111111001000100011100000100010", 
    119 => "00111111010111101101010101111100", 
    120 => "00111001011101000101000101110110", 
    121 => "00111000100100001011010000011000", 
    122 => "10111000110110000000000110110100", 
    123 => "00111110111001101001110011001011", 
    124 => "00111110111001010011000001101010", 
    125 => "10111001101111110101110101111001", 
    126 => "00111111001100100000111100111101", 
    127 => "00111110111111101100010110110000", 
    128 => "10111001001000111001001111101110", 
    129 => "00111110111011100101010011111000", 
    130 => "00111110111001001100100010011011", 
    131 => "00111111010010100001111000001100", 
    132 => "00111111000100100011011000011010", 
    133 => "00111111000111100010011111110010", 
    134 => "00111001010001010010000111011110", 
    135 => "00111110101001011101000110000001", 
    136 => "00111001001011100001000001001001", 
    137 => "00111110110001001011110001101010", 
    138 => "00111110111010001110110001010011", 
    139 => "00110111001001111100010110101100", 
    140 => "10111001100011011000111011001001", 
    141 => "00111001101100001010111101100000", 
    142 => "00111001000110000000101100100100", 
    143 => "00111111000001110010111100010010", 
    144 => "00111111001010110001100000010001", 
    145 => "00111111001101011001100000101001", 
    146 => "10111001010111110101100011000001", 
    147 => "10111000110111100100110001010001", 
    148 => "00111111010100111110110001101000", 
    149 => "00111110110100101000110101100101", 
    150 => "00111001100110110011000001110011", 
    151 => "00111000010110100001101010010011", 
    152 => "00111110101110000010001100100001", 
    153 => "00111110111111001001011101110100", 
    154 => "10111001010011000111100011101010", 
    155 => "00111001110000110000100011111111", 
    156 => "00111111000110011000011110110101", 
    157 => "00111001000001110100010000101100", 
    158 => "00111111000001010010010000011000", 
    159 => "00111111001010111011000111010001", 
    160 => "10111000101100100100001000000111", 
    161 => "00111110101110010010100010111111", 
    162 => "10111001100000101000110000110111", 
    163 => "10111001101010000100101111100100", 
    164 => "10110110010010010101001110011100", 
    165 => "00111110110010001011011000110001", 
    166 => "00111001101110110010101110111011", 
    167 => "10111000111011001111101001101010", 
    168 => "00111000101000010111101100001111", 
    169 => "10110111110010010101001110011100", 
    170 => "10111001000011011000111011001001", 
    171 => "00111111000110100111000000101010", 
    172 => "00111001000011001000001001011010", 
    173 => "00111110101100011001101110110010", 
    174 => "00111110101010110000111100101000", 
    175 => "00111110101110111010101011011110", 
    176 => "00111110110011101100010010000010", 
    177 => "00111110100010111111001110011101", 
    178 => "10111000110101011110100011010101", 
    179 => "00111110101010000100010001101011", 
    180 => "00111001010100101100001110000111", 
    181 => "00111110111001100011011100110111", 
    182 => "00111000101001011010110011001101", 
    183 => "10110111010010010101001110011100", 
    184 => "10111001010000110000100011111111", 
    185 => "00111000110111100100110001010001", 
    186 => "10110111111010101110000110001011", 
    187 => "10111000001100000010100100101000", 
    188 => "00111000111001101010111111001101", 
    189 => "00111001000001110100010000101100", 
    190 => "10111000000010100110100101111011", 
    191 => "10111001001000010111101100001111", 
    192 => "00110110101001111100010110101100", 
    193 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_bAo is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_bAo is
    component predict_ensemble_bAo_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_bAo_rom_U :  component predict_ensemble_bAo_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


