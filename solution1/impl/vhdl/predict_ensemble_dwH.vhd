-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_dwH_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_dwH_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111011110010011001100001001", 
    1 => "00111111011110101011111000111000", 
    2 => "00111001011110001000001100110100", 
    3 => "00111101001110110100110000111100", 
    4 => "10111001000010010101110100001011", 
    5 => "00111001000001010010101101001110", 
    6 => "00111111001011010001011101000000", 
    7 => "00111110101000000011011101010000", 
    8 => "00111101100110101100000111010011", 
    9 => "00111001001111101101011101000001", 
    10 => "00111100000100011011001111110010", 
    11 => "00111111011011010000111000010011", 
    12 => "00111111011011000100111000011110", 
    13 => "00111000110010110110110001111010", 
    14 => "00111101100011000011110110101011", 
    15 => "10111001100001110100010000101100", 
    16 => "10110111110000001111000000100000", 
    17 => "00111110001001011010010010101101", 
    18 => "10111001000111110110001000110000", 
    19 => "00111110101011100110001110100110", 
    20 => "00111110101001111011111000010010", 
    21 => "10111000100110010001011110010100", 
    22 => "00111111000101101100100111010001", 
    23 => "10111000000101101111111010110101", 
    24 => "00111001001100000010100100101000", 
    25 => "10111000101000111001001111101110", 
    26 => "00111101101010010101000110000011", 
    27 => "00111110001100010100000010011010", 
    28 => "00111111010011010011110010111100", 
    29 => "10111000011101110111011011000101", 
    30 => "00111110000000101111011110110001", 
    31 => "00111000001111001011111001100010", 
    32 => "00111101110011100001000011001111", 
    33 => "00110111011010101110000110001011", 
    34 => "10111000100001000001111011011110", 
    35 => "00111111001011011010100110000110", 
    36 => "00111111010111101100110000011101", 
    37 => "10110111101110001000110010100100", 
    38 => "00111101111011000010101111011000", 
    39 => "00111100011110101010110011011010", 
    40 => "10111000101001011010110011001101", 
    41 => "00111111011100101010010000110011", 
    42 => "00111000000111110110001000110000", 
    43 => "00110111111110111010100010000010", 
    44 => "00111110001110110011101110111000", 
    45 => "00110111110100011011011100010111", 
    46 => "10110111101001111100010110101100", 
    47 => "00111111011010100101011010111101", 
    48 => "00111000000001100011011110111101", 
    49 => "10110111100011101001101100111001", 
    50 => "00111110011000100101111001010111", 
    51 => "00111111010100001011000101000110", 
    52 => "00111000001101000101101011100110", 
    53 => "00111110001100110110001001100011", 
    54 => "00111110010101010110111001101001", 
    55 => "00111110000011000010101110010101", 
    56 => "10110111101001111100010110101100", 
    57 => "10110111010010010101001110011100", 
    58 => "00111110111110111001001000011001", 
    59 => "00110111010110100001101010010011", 
    60 => "00111110011011000000000000010001", 
    61 => "00111111010011010001110111011110", 
    62 => "00111111010110001011000000101001", 
    63 => "00110110110010010101001110011100", 
    64 => "10110110101001111100010110101100", 
    65 => "10110111011110111010100010000010", 
    66 => "00111111000100100000010001011100", 
    67 => "10111000000100101100110011110111", 
    68 => "00111110110110111001000101001111", 
    69 => "00111111010111000010010101011011", 
    70 => "00111000000010100110100101111011", 
    71 => "00111111010101000101110100010000", 
    72 => "10110111000101101111111010110101", 
    73 => "00110111000101101111111010110101", 
    74 => "00111101101010001010101011001001", 
    75 => "00111110100000011111000110101110", 
    76 => "10110111010110100001101010010011", 
    77 => "00111111001000111000111110001010", 
    78 => "00110111000001100011011110111101", 
    79 => "10110110101001111100010110101100", 
    80 => "00110110101001111100010110101100", 
    81 => "00110111100001100011011110111101", 
    82 => "00111111010101100010011101101011", 
    83 => "00111111001110011100110111010101", 
    84 => "00111111010001110100001100100000", 
    85 => "00111111010011010100010011001100", 
    86 => "00110111010110100001101010010011", 
    87 => "00111110010000001001011011111111", 
    88 => "10110110111010101110000110001011", 
    89 => "00000000000000000000000000000000", 
    90 => "00110111000001100011011110111101", 
    91 => "00111110100011011010001101011101", 
    92 => "10110111011110111010100010000010", 
    93 => "00111110001010101111110110010111", 
    94 => "00111111000101010010001100101101", 
    95 => "00111110100100010111000101111110", 
    96 => "00111110100101101010101101111010", 
    97 => "00110110000001100011011110111101", 
    98 => "10110110101001111100010110101100", 
    99 => "00111110101111011111001101010010", 
    100 => "00110110010010010101001110011100", 
    101 => "00110111100001100011011110111101", 
    102 => "10110101100001100011011110111101", 
    103 => "10110111101100000010100100101000", 
    104 => "00111111001010101111000101000101", 
    105 => "00111110111101001101110000100011", 
    106 => "00111110101100101100101011011110", 
    107 => "00111111001101001101101100100111", 
    108 => "00110110100001100011011110111101", 
    109 => "00111110111000000001101100000000", 
    110 => "00110110010010010101001110011100", 
    111 => "10110110100001100011011110111101", 
    112 => "00111110111011001100000100000001", 
    113 => "00111111011001100010101001101111", 
    114 => "10110110100001100011011110111101", 
    115 => "00111110110101101001000101000011", 
    116 => "00111110010010011010010000010110", 
    117 => "00110101100001100011011110111101", 
    118 => "10110101100001100011011110111101", 
    119 => "00111111010001101110111000110001", 
    120 => "00110110010010010101001110011100", 
    121 => "00110101100001100011011110111101", 
    122 => "00111110101101000000100000110001", 
    123 => "00000000000000000000000000000000", 
    124 => "00110110000001100011011110111101", 
    125 => "00111111001110111100110110001010", 
    126 => "00110110100001100011011110111101", 
    127 => "10000000000000000000000000000000", 
    128 => "00000000000000000000000000000000", 
    129 => "00111111000001110111110111101001", 
    130 => "10110110000001100011011110111101", 
    131 => "00111111001001110100010111010000", 
    132 => "00111111010110100000000011010010", 
    133 => "00111111001001111011101110100101", 
    134 => "10110110010010010101001110011100", 
    135 => "00111111010010001011111111110100", 
    136 => "10110101100001100011011110111101", 
    137 => "00111111010000110000100101000010", 
    138 => "00111110110011100001000110011001", 
    139 => "00111110110111101001000111001001", 
    140 => "00111111000111000111001001101101", 
    141 => "00111110111100100110101010000111", 
    142 => "00111110001000100000001010010111", 
    143 => "10110110000001100011011110111101", 
    144 => "10000000000000000000000000000000", 
    145 => "00111111000100101010010000000001", 
    146 => "00111111000101101001010000100101", 
    147 => "10000000000000000000000000000000", 
    148 => "00110110101001111100010110101100", 
    149 => "00111110111010001101000111011001", 
    150 => "00111110111100111111110110110101", 
    151 => "10000000000000000000000000000000", 
    152 => "00111111000100101110001111100111", 
    153 => "00111111000000000111110001100011", 
    154 => "00111110101111010010101101001110", 
    155 => "10110110000001100011011110111101", 
    156 => "00111111000100001001001010011011", 
    157 => "00111110111001111011011000110101", 
    158 => "00111110111011010000000011110111", 
    159 => "10110110000001100011011110111101", 
    160 => "10000000000000000000000000000000", 
    161 => "00110101100001100011011110111101", 
    162 => "00110110010010010101001110011100", 
    163 => "00110101100001100011011110111101", 
    164 => "10110101100001100011011110111101", 
    165 => "00110110100001100011011110111101", 
    166 => "00110110000001100011011110111101", 
    167 => "00000000000000000000000000000000", 
    168 => "10110101100001100011011110111101", 
    169 => "00110110000001100011011110111101", 
    170 => "00111110100111101000011001000000", 
    171 => "10110101100001100011011110111101", 
    172 => "00111110101010011110111010101010", 
    173 => "00110101100001100011011110111101", 
    174 => "00111110110000111101111011000110", 
    175 => "00110101100001100011011110111101", 
    176 => "00111111000001101000111000101110", 
    177 => "10110101100001100011011110111101", 
    178 to 179=> "00000000000000000000000000000000", 
    180 => "10110101100001100011011110111101", 
    181 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_dwH is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_dwH is
    component predict_ensemble_dwH_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_dwH_rom_U :  component predict_ensemble_dwH_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


