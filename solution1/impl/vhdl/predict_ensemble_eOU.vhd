-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_eOU_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_eOU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111010000110001111011100010", 
    1 => "00111111001100000011000100010110", 
    2 => "00111110110000010100100001110111", 
    3 => "00111111001010001001111011001011", 
    4 => "10111000110110100001101010010011", 
    5 => "00111110101001101011000111100110", 
    6 => "00111001000010010101110100001011", 
    7 => "00111101010100110010010100001011", 
    8 => "00111000011000100111111000001111", 
    9 => "00111101110110001001100010110011", 
    10 => "10110111100111110110001000110000", 
    11 => "10111000011110111010100010000010", 
    12 => "00111111011110000111011001111101", 
    13 => "00111110011010101000100000100111", 
    14 => "00111110000001001010010101011001", 
    15 => "00111101011001000111110111000011", 
    16 => "00111000000001100011011110111101", 
    17 => "10000000000000000000000000000000", 
    18 => "00110111001110001000110010100100", 
    19 => "10110110101001111100010110101100", 
    20 => "00110110000001100011011110111101", 
    21 => "00111000000001100011011110111101", 
    22 => "00111111011011100101000000001101", 
    23 => "00111101000001100011111000001000", 
    24 => "10110111111000100111111000001111", 
    25 => "00110111010110100001101010010011", 
    26 => "00111111011101110111111110111111", 
    27 => "00111101100001000111111101010110", 
    28 => "10110111011010101110000110001011", 
    29 => "00110111011010101110000110001011", 
    30 => "00111110001001011010010010101101", 
    31 => "00111110101000000011100101101001", 
    32 => "00111111010101110111111011100101", 
    33 => "10110111011010101110000110001011", 
    34 => "00111110111110011110010101111110", 
    35 => "00111111011000000000000000000000", 
    36 => "00111111000001101001000000010101", 
    37 => "00111110010100101111001010110110", 
    38 => "10110110110010010101001110011100", 
    39 => "00111111001000000111110001110100", 
    40 => "10110110110010010101001110011100", 
    41 => "00111110111110110100101100001110", 
    42 => "10110111100001100011011110111101", 
    43 => "00110110110010010101001110011100", 
    44 => "10110110000001100011011110111101", 
    45 => "00111111011100111101101100011010", 
    46 => "00111111011101000001100100111011", 
    47 => "10110110010010010101001110011100", 
    48 => "00110110100001100011011110111101", 
    49 => "00111111011100011010101101111110", 
    50 => "00111111000101110100110100100111", 
    51 => "00111110011111111000100111000110", 
    52 => "00110111010110100001101010010011", 
    53 => "00111110001100010001011001100110", 
    54 => "00110110110010010101001110011100", 
    55 => "10110111011010101110000110001011", 
    56 => "00110101100001100011011110111101", 
    57 => "00110110101001111100010110101100", 
    58 => "00111111001100000001110001110001", 
    59 => "00110110101001111100010110101100", 
    60 => "00111101100010111111001100111000", 
    61 => "00111111000110100001011101001100", 
    62 => "00111111010010010110100010000011", 
    63 => "10110110111010101110000110001011", 
    64 => "00111101111000000000100101110000", 
    65 => "00111111000100100100000100011100", 
    66 => "10110110000001100011011110111101", 
    67 => "00110110100001100011011110111101", 
    68 => "00111110111111111001010110110011", 
    69 => "10110110000001100011011110111101", 
    70 => "00111101010100010111001111111011", 
    71 => "00111110110110110101111010110111", 
    72 => "00111111000101111110111011100101", 
    73 => "10000000000000000000000000000000", 
    74 => "00000000000000000000000000000000", 
    75 => "00110110010010010101001110011100", 
    76 => "00111111011000001100011000111111", 
    77 => "10000000000000000000000000000000", 
    78 => "10110101100001100011011110111101", 
    79 => "00110101100001100011011110111101", 
    80 => "00000000000000000000000000000000", 
    81 => "00111101011001100000100000000111", 
    82 => "00110110010010010101001110011100", 
    83 => "00110110000001100011011110111101", 
    84 => "00111111011010110110001000110000", 
    85 => "00111101111101110010111001101010", 
    86 => "00111110110101010100000010101011", 
    87 => "00110110000001100011011110111101", 
    88 => "00111111011010110101100010011111", 
    89 => "00110110100001100011011110111101", 
    90 => "00111110111111101111101000011110", 
    91 => "00111110000101010010100110111011", 
    92 => "10110110000001100011011110111101", 
    93 => "00110101100001100011011110111101", 
    94 => "10000000000000000000000000000000", 
    95 => "00111110111001011000111001000011", 
    96 => "00111110010111001000100111110100", 
    97 => "10110110000001100011011110111101", 
    98 => "00111110110001110010110100111100", 
    99 => "10110101100001100011011110111101", 
    100 => "00111110101010010110001100110101", 
    101 => "00111111001100000000000000000000", 
    102 => "10110101100001100011011110111101", 
    103 => "00111110011011000001111010111101", 
    104 => "00111101110111110000011011110111", 
    105 => "10000000000000000000000000000000", 
    106 => "00000000000000000000000000000000", 
    107 => "00110110010010010101001110011100", 
    108 => "00000000000000000000000000000000", 
    109 => "00110101100001100011011110111101", 
    110 => "00111110010001010100101011000011", 
    111 => "10110110000001100011011110111101", 
    112 => "00111110011010111100110011110011", 
    113 => "00111110111101101100111011011101", 
    114 => "00111111000111010000111011101101", 
    115 => "10000000000000000000000000000000", 
    116 => "10110101100001100011011110111101", 
    117 => "00111111011011110111101111100001", 
    118 => "10110101100001100011011110111101", 
    119 => "00111110001111101110010001011100", 
    120 => "10110101100001100011011110111101", 
    121 => "00111110110000100000100011000000", 
    122 => "00111110110111000011111100111110", 
    123 => "00110101100001100011011110111101", 
    124 => "00111111001001000011110101010111", 
    125 => "00111110100011110101110101111001", 
    126 => "00111110101100000010011100001111", 
    127 => "00000000000000000000000000000000", 
    128 => "00110101100001100011011110111101", 
    129 => "00111110011100010111111011111110", 
    130 => "00111110111100100111111001110100", 
    131 => "00111110100000110010001100110110", 
    132 => "00111111010110010001001110000011", 
    133 => "00000000000000000000000000000000", 
    134 => "10110101100001100011011110111101", 
    135 => "00000000000000000000000000000000", 
    136 => "00111110111000101101101010011000", 
    137 => "00111110010001110111101011110110", 
    138 => "00111110100101001010001111000110", 
    139 => "00111111011001010000101000110101", 
    140 => "00000000000000000000000000000000", 
    141 to 142=> "10000000000000000000000000000000", 
    143 => "00110101100001100011011110111101", 
    144 => "10000000000000000000000000000000", 
    145 to 146=> "00110101100001100011011110111101", 
    147 => "00111111001111111010011100110011", 
    148 => "00000000000000000000000000000000", 
    149 => "00111111001011101011110011111001", 
    150 => "10000000000000000000000000000000", 
    151 => "00111110101111000010000101011100", 
    152 => "00111111010010011100101001011100", 
    153 => "00000000000000000000000000000000", 
    154 => "00111110111011010010001011001001", 
    155 => "00111111010001111000110101100001", 
    156 to 157=> "10000000000000000000000000000000", 
    158 => "00111110110001001000011011001111", 
    159 => "00111110100011001101001001110000", 
    160 to 161=> "00000000000000000000000000000000", 
    162 => "00111111000011101101011000010011", 
    163 to 164=> "00000000000000000000000000000000", 
    165 => "10000000000000000000000000000000", 
    166 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_eOU is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_eOU is
    component predict_ensemble_eOU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_eOU_rom_U :  component predict_ensemble_eOU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


