-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_dcE_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_dcE_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001011000010100010110011", 
    1 => "10111001101001001010000001011110", 
    2 => "00111101010011111101101100001010", 
    3 => "00111001111011100000011011011001", 
    4 => "00111111011110000011101001000011", 
    5 => "00111101100010111101110000100111", 
    6 => "10111001101001100011001100000101", 
    7 => "00111110101011100110001110100110", 
    8 => "00111111011101100101011000010101", 
    9 => "10111000111010001100100010101100", 
    10 => "00111001100001100011011110111101", 
    11 => "00111111011011100101000000001101", 
    12 => "10111001000011111010011110101000", 
    13 => "00111101000101111101110100000001", 
    14 => "00111001001100000010100100101000", 
    15 => "00111000111011001111101001101010", 
    16 => "00111101011000010010011000100000", 
    17 => "10111001001111101101011101000001", 
    18 => "00111101000011100110110100010110", 
    19 => "00111111000101011101000000110001", 
    20 => "00111101110011111110100100110010", 
    21 => "10110101100001100011011110111101", 
    22 => "00111001001100010011010110011000", 
    23 => "10111000110110000000000110110100", 
    24 => "00111101101000011101111110111001", 
    25 => "10111000110011011000010101011001", 
    26 => "00111110000111001100000001111011", 
    27 => "00111000101111101101011101000001", 
    28 => "00111111011110001100011011100111", 
    29 => "00111111011010111110100011001101", 
    30 => "10111000011110111010100010000010", 
    31 => "00111110010110111100011101110001", 
    32 => "00111000011011110001001101001001", 
    33 => "10111000010100011011011100010111", 
    34 => "00111111011100011001001010111000", 
    35 => "00111111010101010000000111010010", 
    36 => "00111110101111100010110101100010", 
    37 => "00111111010000100010100111011000", 
    38 => "00111000101110001000110010100100", 
    39 => "10111001000010010101110100001011", 
    40 => "00111110110111000101100101110101", 
    41 => "00111101101111110111100101000010", 
    42 => "10111000010010010101001110011100", 
    43 => "10110111011010101110000110001011", 
    44 => "00111111000010101000100010011100", 
    45 => "00111111000111101001101110101110", 
    46 => "00111110010100101111001010110110", 
    47 => "00110110101001111100010110101100", 
    48 => "00110111110000001111000000100000", 
    49 => "00111000011011110001001101001001", 
    50 => "00000000000000000000000000000000", 
    51 => "00111101111111110011010010010100", 
    52 => "00111110100001001100111100000111", 
    53 => "00111110111101101101110000011010", 
    54 => "10110110010010010101001110011100", 
    55 => "00111110101010011000000110011101", 
    56 => "00111111010101010010101101001110", 
    57 => "10110111001001111100010110101100", 
    58 => "10111000100011101001101100111001", 
    59 => "10110110000001100011011110111101", 
    60 => "00111000101101000101101011100110", 
    61 => "00111111010110001011101000110000", 
    62 => "10111000010101011110100011010101", 
    63 => "00111111010001101101110001111111", 
    64 => "00111110111110110101110000011000", 
    65 => "00111111011110100011100001110110", 
    66 => "00111000000000100000010111111111", 
    67 => "00111000011101110111011011000101", 
    68 => "10110110100001100011011110111101", 
    69 => "00111111011100101010010000110011", 
    70 => "00111000000000100000010111111111", 
    71 => "00111111001101010100111011000010", 
    72 => "00111111000110101001111000011011", 
    73 => "00111111011000011110000101111110", 
    74 => "00110111110110100001101010010011", 
    75 => "00111111000011111100001111000110", 
    76 => "10111000010101011110100011010101", 
    77 => "00111110000001011101011101000101", 
    78 => "00110111100001100011011110111101", 
    79 => "10110111110100011011011100010111", 
    80 => "00110111010010010101001110011100", 
    81 => "10110111010010010101001110011100", 
    82 => "00111111011000100011011011110100", 
    83 => "00111110000100100101010010100100", 
    84 => "00111111011011101000000000101000", 
    85 => "10110111010110100001101010010011", 
    86 => "00111110100101101010101101111010", 
    87 => "00111111011010010110100101101110", 
    88 => "10000000000000000000000000000000", 
    89 => "00110111100101101111111010110101", 
    90 => "00111111010011111001011100000011", 
    91 => "10110111001110001000110010100100", 
    92 => "10110111100001100011011110111101", 
    93 => "00111111011010100110001000100100", 
    94 => "00111111011010110101101011011001", 
    95 => "00111111010010101100001011011111", 
    96 => "10110111010110100001101010010011", 
    97 => "00111111000110110111100001111001", 
    98 => "00110111100011101001101100111001", 
    99 => "00111111001111110010110101011110", 
    100 => "00111111010011110010000110010010", 
    101 => "00111111001110000001000100111100", 
    102 => "10110110000001100011011110111101", 
    103 => "00111111001010101111101111100011", 
    104 => "00110111000101101111111010110101", 
    105 => "10110111100001100011011110111101", 
    106 => "00111111000110100011010110100100", 
    107 => "00110110000001100011011110111101", 
    108 => "00000000000000000000000000000000", 
    109 => "00111111011001011000011010000111", 
    110 => "00111111001011101101010000001011", 
    111 => "10110110101001111100010110101100", 
    112 => "00110110101001111100010110101100", 
    113 => "00111110101100010011000100000001", 
    114 => "00110111001001111100010110101100", 
    115 => "10110111000101101111111010110101", 
    116 => "00111110111001111001100000001111", 
    117 => "00111110101011011001011011101010", 
    118 => "00111110011010110011101000100110", 
    119 => "00110110010010010101001110011100", 
    120 => "00111111000001111010000100001010", 
    121 => "00111110011000100110110110001011", 
    122 => "00110111010010010101001110011100", 
    123 => "10110110110010010101001110011100", 
    124 => "00111110100010011001001110010010", 
    125 => "00111111000000000101110000100101", 
    126 => "10110101100001100011011110111101", 
    127 => "00110110110010010101001110011100", 
    128 => "00111111000001010000000001010000", 
    129 => "00111110101001111010100011111000", 
    130 => "00111110100011111100111111000100", 
    131 => "10110110010010010101001110011100", 
    132 => "10110111000001100011011110111101", 
    133 => "10110110010010010101001110011100", 
    134 => "00110101100001100011011110111101", 
    135 => "00111111000100010100110111010111", 
    136 => "10110111010110100001101010010011", 
    137 => "00110111000101101111111010110101", 
    138 => "00111110101100110111011101011100", 
    139 => "00111110111000011000101001000100", 
    140 => "00110110101001111100010110101100", 
    141 => "00110110110010010101001110011100", 
    142 => "00111110000000101011001001111101", 
    143 => "00111110100100100111111100111101", 
    144 => "10110110110010010101001110011100", 
    145 => "10110110100001100011011110111101", 
    146 => "00111110011110000010111000000010", 
    147 => "00111110001001100111001001110101", 
    148 => "00111110100101011101101010001100", 
    149 => "10110110100001100011011110111101", 
    150 => "00111110101011101110010000111011", 
    151 => "10110110010010010101001110011100", 
    152 => "00111111000010100011001101111011", 
    153 => "10110110000001100011011110111101", 
    154 => "10110110100001100011011110111101", 
    155 => "00111110100011100011011000101010", 
    156 => "00111110001010010111100111100001", 
    157 => "10000000000000000000000000000000", 
    158 => "00110110010010010101001110011100", 
    159 => "00000000000000000000000000000000", 
    160 => "00110110111010101110000110001011", 
    161 => "10110110100001100011011110111101", 
    162 => "00111110110001000001110010000010", 
    163 => "00111110111100101111101000101111", 
    164 => "00111110110010001011101000011111", 
    165 => "00111111000111010110110011101000", 
    166 => "00000000000000000000000000000000", 
    167 => "00110110101001111100010110101100", 
    168 => "00111110101100000000100100001011", 
    169 => "10110110100001100011011110111101", 
    170 => "10110110000001100011011110111101", 
    171 => "00110101100001100011011110111101", 
    172 => "00111110110011010100101101101010", 
    173 => "10110110000001100011011110111101", 
    174 => "00111110111011010011110010011011", 
    175 => "00110101100001100011011110111101", 
    176 => "00111111001001001001111011101101", 
    177 => "00111111000111100010001010110100", 
    178 => "00110101100001100011011110111101", 
    179 => "00111111000010011011010101110100", 
    180 => "10110110000001100011011110111101", 
    181 => "00111111000000110110111001010000", 
    182 => "00111111000011001001010011000100", 
    183 => "10000000000000000000000000000000", 
    184 => "00110101100001100011011110111101", 
    185 => "10110101100001100011011110111101", 
    186 => "00111111000100010101001001011101", 
    187 => "10000000000000000000000000000000", 
    188 => "00110101100001100011011110111101", 
    189 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_dcE is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_dcE is
    component predict_ensemble_dcE_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_dcE_rom_U :  component predict_ensemble_dcE_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


