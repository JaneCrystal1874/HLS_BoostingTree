-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_Mgi_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_Mgi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111011011101111101110100000", 
    1 => "00111100011001101111111101111110", 
    2 => "00111111000111011001001110100011", 
    3 => "10111100010101111110000000100110", 
    4 => "00111101011100001111111100010001", 
    5 => "00111100100101001000011101110111", 
    6 => "10111001111001001001011011101110", 
    7 => "00111110110010101001011011110110", 
    8 => "00111101100001110101011010000110", 
    9 => "10111100101000101110010111011110", 
    10 => "00111110110010001001110101001001", 
    11 => "00111100001100111001111000101000", 
    12 => "00111101101000111110111110101110", 
    13 => "00111011010111101000111101101101", 
    14 => "10111011101100110011110110110000", 
    15 => "10111100011001011011100001010110", 
    16 => "00111101101100100010000011111111", 
    17 => "00111100100100111100111011101010", 
    18 => "00111101110010011000110101000111", 
    19 => "10111100000111001000010000110000", 
    20 => "00111101110100110000010110010110", 
    21 => "00111100100100000101110000000011", 
    22 => "00111101111101100010100001000110", 
    23 => "00111111001000010001101010000111", 
    24 => "00111101111111010000101101110100", 
    25 => "00111101111000011111010110111110", 
    26 => "00111100001110101010100110110101", 
    27 => "10111100000101101101110100100111", 
    28 => "00111111010110111010001011110000", 
    29 => "00111011001111010110011000100111", 
    30 => "10111010110010110010100101011111", 
    31 => "00111110100100001110010001010100", 
    32 => "00111111001010011010111111110011", 
    33 => "00111110000001111010000000110000", 
    34 => "00111110100101110010000101110001", 
    35 => "00111100010000011011100101110011", 
    36 => "10111010010000110100110000011011", 
    37 => "00111110101110101111110010101101", 
    38 => "00111110000101001010100011000001", 
    39 => "00111110101011101100001001101010", 
    40 => "00111111010010100010111010010000", 
    41 => "00111110111011001010001110000011", 
    42 => "00111100000010100000010011010001", 
    43 => "10111100001011100010000100010000", 
    44 => "00111110110111001110110100101101", 
    45 => "00111100100001011111110100000101", 
    46 => "00111110111000000001011100110011", 
    47 => "00111110000000101011001001111101", 
    48 => "10111100000011100110010010110010", 
    49 => "10111011100101010110001110101010", 
    50 => "00111110111100010011111101101100", 
    51 => "10111011111010001101100101110011", 
    52 => "00111110100111110101000100000101", 
    53 => "00111011101110011010100111011010", 
    54 => "10111001100101000101111110011110", 
    55 => "00111100000011100010000110010110", 
    56 => "00111110101100010000100011000100", 
    57 => "00111011100000111010000100001010", 
    58 => "00111110110101110001111010001110", 
    59 => "00111111000001101000000010001101", 
    60 => "00111110001011010011000100110011", 
    61 => "00111110111001100001110100000000", 
    62 => "00111110100110010010101010110111", 
    63 => "00111011001110011010100111011010", 
    64 => "00111110111011110111000111101011", 
    65 => "00111110101011010101001110101100", 
    66 => "10111011010011011010011011100111", 
    67 => "10111011110011101011001101010111", 
    68 => "00111111000110000000101110101010", 
    69 => "00111110101011100110111010000111", 
    70 => "00111110101010110011111000110110", 
    71 => "00111100001100011100110010010110", 
    72 => "00111110100110100010111001111111", 
    73 => "10111001011000010111000110011111", 
    74 => "10111010110111001101101100111000", 
    75 => "00111011011101100000010110101011", 
    76 => "00111001111010000100001001110100", 
    77 => "10111011000111110001111100010101", 
    78 => "00111001100111111110100001101000", 
    79 => "10111011101000010010111110010000", 
    80 => "00111110101001011101000110000001", 
    81 => "10111100001001010110100110110001", 
    82 => "10111011110011100110011111010111", 
    83 => "00111111000100100011010000000001", 
    84 => "00111110101101001011111010000011", 
    85 => "00111011101011110001110010111001", 
    86 => "00111010001011111110011000001100", 
    87 => "00111110101110111011011110110111", 
    88 => "00111110110101110011011110111001", 
    89 => "00111011110011111101000010001101", 
    90 => "00111111001100001110011011010001", 
    91 => "00111100000010100110010101001001", 
    92 => "00111010110010101100010010110101", 
    93 => "00111110101101011010010111111100", 
    94 => "00111111000100110000101000011100", 
    95 => "00111111011010100000010110011010", 
    96 => "10111011101001100011101101101001", 
    97 => "00111110111010110101110110101011", 
    98 => "10111011110100000010010001110000", 
    99 => "00111100000010101101111011101100", 
    100 => "00111110110101100011100101010000", 
    101 => "00111110000011010100110001110111", 
    102 => "10111011101100000111010010100111", 
    103 => "10111010100000101000110000110111", 
    104 => "00111011011101011110010000011101", 
    105 => "10111010111100101110000001011101", 
    106 => "00111011001011010000001111011010", 
    107 => "00111110000010011101111111011011", 
    108 => "00111110000100111010000101001101", 
    109 => "00111010100011010110110100111011", 
    110 => "10111100000110100110001011101101", 
    111 => "00111011101011110000001110001110", 
    112 => "00111110110001110101011100001100", 
    113 => "00111110101110111111011011000010", 
    114 => "00111111000010110001100100111111", 
    115 => "00111010011101110011001110101001", 
    116 => "00111111000100000000000000000000", 
    117 => "00111111000010111111100010101001", 
    118 => "00111111000011001000110101111110", 
    119 => "10111010000100011100000010000111", 
    120 => "00111110111000100101001111011010", 
    121 => "00111110110111011001100101100111", 
    122 => "00111011101101010100010111001000", 
    123 => "10111011111110111100101000010000", 
    124 => "00111111010001111011000101001011", 
    125 => "10111011100000101000001111010011", 
    126 => "10111100000010110001000101000001", 
    127 => "00111110110110011000001100001110", 
    128 => "00111110101010011000100010010000", 
    129 => "00111111010100000010011011011101", 
    130 => "10111011100000010110011010011101", 
    131 => "10111010110011011100100001110101", 
    132 => "00111111001000000000111110001000", 
    133 => "00111011100100110000011110101111", 
    134 => "00111111001011111011011011011101", 
    135 => "00111111010001001111101010101101", 
    136 => "00111111000111111010101000100110", 
    137 => "00111100000011011111001101110011", 
    138 => "00111110110111101101110111001110", 
    139 => "00111111000110111101110010011100", 
    140 => "00111111001001000011110101000111", 
    141 => "00111111000000101101000000111110", 
    142 => "00111011101111010101110111000100", 
    143 => "00111110001010101000000100010011", 
    144 => "00111111000111111010101110101000", 
    145 => "10111011000101001010001010111010", 
    146 => "00111011101011000110110011011011", 
    147 => "00111110111001101010000000010010", 
    148 => "00111011000110100011010011001010", 
    149 => "00111111001000111110000000010101", 
    150 => "00111111011011010011010011110000", 
    151 => "00111111000000011100110100111110", 
    152 => "00111110110101010011011101111110", 
    153 => "10111011001010101010011111011111", 
    154 => "10111011101110111001000001100100", 
    155 => "00111010101100011111111011101011", 
    156 => "10111011000010001101011011010100", 
    157 => "00111111000110100111111100111101", 
    158 => "00111111001111001000111101000011", 
    159 => "00111011101110110011010000011110", 
    160 => "00111111000110111111010010101010", 
    161 => "00111111011010010000111011111110", 
    162 => "10111011010111111010110010100011", 
    163 => "10111011110011000101111111000000", 
    164 => "10111010111111100100011110011001", 
    165 => "00111111000100110101011010010111", 
    166 => "10111011001100011011101111001111", 
    167 => "10111011000000111000011111011111", 
    168 => "10111011100110010011100100100010", 
    169 => "00111110111000000011110010110000", 
    170 => "10111011100010001010110011100010", 
    171 => "10111010110100000100010111111110", 
    172 => "00111010111101000000111001011010", 
    173 => "00111110110111011001111100001010", 
    174 => "00111011101111010010101101101111", 
    175 => "00111111010001110011110100101001", 
    176 => "00111011101000011111000010000000", 
    177 => "10111011010100000011010100110111", 
    178 => "00111111000010110110001100001011", 
    179 => "00111111001101001101101001011110", 
    180 => "10111011001000111111100010011000", 
    181 => "10111011011110001101011100010111", 
    182 => "00111010111001000101001111010010", 
    183 => "00111111001010011110011110100111", 
    184 => "00111011001001100001000101110111", 
    185 => "10111010101001111000001010010000", 
    186 => "00111110110010011111100111001111", 
    187 => "10111011000101101100110001100000", 
    188 => "00111000011111111101101001000000", 
    189 => "00111010011101000000111001011010", 
    190 => "00111011000111110111001011110111", 
    191 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_Mgi is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_Mgi is
    component predict_ensemble_Mgi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_Mgi_rom_U :  component predict_ensemble_Mgi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


