-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_6jw_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_6jw_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110010010111010001100000001", 
    1 => "00111110001101000101110011111111", 
    2 => "00111111011001011001110101100111", 
    3 => "00111110111010110101110110101011", 
    4 => "10111111100000010001111000010001", 
    5 => "00111101111101110011001000010110", 
    6 => "10111111000101111101111101111111", 
    7 => "00111110111010000010110001001101", 
    8 => "00111110101111110110010010001100", 
    9 => "00111111011100000101101100001000", 
    10 => "00111110010010000011011010101000", 
    11 => "00111111001000100011111100100101", 
    12 => "10111111100101101010110010011111", 
    13 => "00111110100110001001111111101000", 
    14 => "10111100110110110110111001010000", 
    15 => "00111111000001101110000000111011", 
    16 => "00111101111110010110001010001101", 
    17 => "00111110100110110111101110001101", 
    18 => "10111110110110000010110101111011", 
    19 => "00111110000001001011010100010011", 
    20 => "10111111101000111101011100001010", 
    21 => "00111111011001100100000100011100", 
    22 => "00111110000000001110100101001111", 
    23 => "10111110000110001100100101110101", 
    24 => "00111100110011001100110011001101", 
    25 => "00111110001111000000100011111010", 
    26 => "10111111001110111011101110110110", 
    27 => "00111111010111000100101111000010", 
    28 => "00111111000001001101111010001111", 
    29 => "00111111101010001111010111000011", 
    30 => "00111111000101110101000111110000", 
    31 => "00000000000000000000000000000000", 
    32 => "00111110010011001100110011001101", 
    33 => "00111110011010100000111010000100", 
    34 => "00111111000000001111011010011101", 
    35 => "00111110110110000100100000111000", 
    36 => "00111111011101011000111001010100", 
    37 => "00111111000101000100001001010011", 
    38 => "00111111001011000101000100010001", 
    39 => "10111110101000111101011100001010", 
    40 => "11000000001100001010001111010111", 
    41 => "00111111011011011100100010101000", 
    42 => "00111111000000100111011100101101", 
    43 => "00111111010110011001100110011010", 
    44 => "00111101110001111110110001111000", 
    45 => "00111111000100111011100101111100", 
    46 => "00111111011000010010010010001101", 
    47 => "00111110110011111100111010111000", 
    48 => "00111110000101101011110110110010", 
    49 => "10111110011101011100001010001111", 
    50 => "00111110111100100010011011000100", 
    51 => "10111111100001000100010001000001", 
    52 => "00111101101011010110011101110111", 
    53 => "00111111000000001110110001010011", 
    54 => "00111111000110001111110000011110", 
    55 => "10111111110001111010111000010100", 
    56 => "00111111000111001011100110101010", 
    57 => "00111111011110101110000101001000", 
    58 => "00111110001010010100100111101001", 
    59 => "00111110011101011100001010001111", 
    60 => "00111111001000111101011100001010", 
    61 => "00000000000000000000000000000000", 
    62 => "10111111000010011100000010011000", 
    63 => "00111110100000011111000110101110", 
    64 => "00111111000001111111010011111101", 
    65 => "00111111001001001111011101010101", 
    66 => "00111110101101001011010100010011", 
    67 => "10111110101001100110011001100110", 
    68 => "10111100100001011100000000110011", 
    69 => "10111111011000010100011110101110", 
    70 => "00111101110111011101011011100000", 
    71 => "10111111001000111101011100001010", 
    72 => "00111110110100000010110110011101", 
    73 => "10111111100110011001100110011010", 
    74 => "00111111000100101001000010011011", 
    75 => "00111110110111001100110101110101", 
    76 => "00111111111011010000100101111101", 
    77 => "00111110101001101110110111101110", 
    78 => "00111111010100101001010010101011", 
    79 => "00111110101100100111110100100100", 
    80 => "00111110111100100110010011100101", 
    81 => "00111110110000111001000110010010", 
    82 => "00111110110101100110011101010001", 
    83 => "00111111000100000001100010100100", 
    84 => "10111111000101111110010010101100", 
    85 => "00111110111101100011001011000010", 
    86 => "00111111000010110111010110100111", 
    87 => "00111110111000101110100011000000", 
    88 => "10111111000000111010100000111111", 
    89 => "00111111100111101100011111101011", 
    90 => "00111111001000111000010100011111", 
    91 => "00111111010001010111011011111111", 
    92 => "00111111010111011111001100001110", 
    93 => "00111110101000100110101010000111", 
    94 => "00111101110111110000011011110111", 
    95 => "00111111100000110011001100110011", 
    96 => "00111110011110100110001110110111", 
    97 => "10111110100101111000001010010000", 
    98 => "00111101111011010100111011010011", 
    99 => "00111111100100000001011101100101", 
    100 => "00111110100011000011111110100011", 
    101 => "10111110000010001000100001110010", 
    102 => "00111110100001000010010100000111", 
    103 => "00111111011010011100011111011110", 
    104 => "00111110010111100010001100101001", 
    105 => "00111111001101010100100111011000", 
    106 => "00111111001001111100101100101110", 
    107 => "10111110111011101110111011111010", 
    108 => "10111110000011001100110011001101", 
    109 => "00111111010000000101110101000010", 
    110 => "00111111010111011111110000101011", 
    111 => "00000000000000000000000000000000", 
    112 => "00111110101010000110101100111000", 
    113 => "00111111000001010001111010111000", 
    114 => "00111111001011000011001110110101", 
    115 => "00111111001110000101000111101100", 
    116 => "00111110110100100110001001000101", 
    117 => "00111111001101001101100101110011", 
    118 => "10111110110010000011111110110011", 
    119 => "00111111001000110101100001101101", 
    120 => "00111110110101011111000101011010", 
    121 => "10111110100000100111000000101010", 
    122 => "10111101011111001101011010000000", 
    123 => "00111110110001010101110001110100", 
    124 => "00000000000000000000000000000000", 
    125 => "10111110100111110100100111110001", 
    126 => "00000000000000000000000000000000", 
    127 => "10111110111101011100001010001111", 
    128 => "10111110101101100000101101110000", 
    129 => "00111110101100101001100000000011", 
    130 => "00111110010110101001100001100111", 
    131 => "00111110100110011001100110011010", 
    132 => "00111110111111110011110000101110", 
    133 => "10111110100000001011101101001101", 
    134 => "00111111001100010001010101011001", 
    135 => "00111111001110001010010111110000", 
    136 => "00111110110111101101100101011010", 
    137 => "00111101100101111011010000011100", 
    138 => "00111110111000111000111000101010", 
    139 => "00111110100100110101111110000001", 
    140 => "00111110101111101011001011010001", 
    141 => "00111101110100100010111100100111", 
    142 => "00111111010000101000111101011100", 
    143 => "10111110110001010111110001001110", 
    144 => "00111110001101010101010100111111", 
    145 => "00111111010100110111010101110101", 
    146 => "00111101111000111000111000101010", 
    147 => "00111111001101011010011001100001", 
    148 => "00111110001111001100101111000000", 
    149 => "10111110110001100110011001100110", 
    150 => "00000000000000000000000000000000", 
    151 => "00111110100101100001011001110010", 
    152 => "10111111000101001011100101000101", 
    153 => "00111110111100101100111010101011", 
    154 => "10111110010000101000111101011100", 
    155 => "00000000000000000000000000000000", 
    156 => "00111110010011001100110011001101", 
    157 => "10111101101000111101011100001010", 
    158 => "00000000000000000000000000000000", 
    159 => "00111101100110011001100110011010", 
    160 => "00111111001110010000011111111011", 
    161 => "00111111010010000100000010001110", 
    162 => "10111110001100110011001100110011", 
    163 => "00111110100011111011100010110010", 
    164 => "00111110111000000010001110000101", 
    165 => "00111111001101110111011101111101", 
    166 => "00111110001101001110100000110010", 
    167 => "00111110101101010110010011111001", 
    168 => "00000000000000000000000000000000", 
    169 => "00111110111001001110111110001001", 
    170 => "10111110100010001000100010010100", 
    171 => "00111111000001010001111010111000", 
    172 => "00111100101101100000101011101001", 
    173 => "00111110100010100100110001100010", 
    174 => "00111110011101011100001010001111", 
    175 => "00111110100011010010001100001100", 
    176 => "00111101111101011100001010001111", 
    177 => "00111110010100011110010010110100", 
    178 => "10111101101000111101011100001010", 
    179 => "00000000000000000000000000000000", 
    180 => "00111101101000111101011100001010", 
    181 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_6jw is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_6jw is
    component predict_ensemble_6jw_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_6jw_rom_U :  component predict_ensemble_6jw_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


