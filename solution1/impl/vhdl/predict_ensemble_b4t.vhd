-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_b4t_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_b4t_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100010100011010011001010000", 
    1 => "00111010101000001111010011011000", 
    2 => "00111101010100010111001111111011", 
    3 => "10111010101101000111110001110100", 
    4 => "00111101001010001001111010111010", 
    5 => "10111010100000001111100110010000", 
    6 => "00111101001011000010100010110011", 
    7 => "10111010010001101011010010000101", 
    8 => "00111101011101100011101100100101", 
    9 => "00111110110010010101110010100111", 
    10 => "00111111011101110111111110111111", 
    11 => "10111000110011011000010101011001", 
    12 => "00111110111010110100011010111011", 
    13 => "00111111011110000111011001111101", 
    14 => "10111010100011101011110011000111", 
    15 => "00111001100001001010010100010110", 
    16 => "00111010100111100011010000110011", 
    17 => "00111111011100001100111011110110", 
    18 => "00111001110110100001101010010011", 
    19 => "00111111011100010010100110111011", 
    20 => "10111001110111001011100110101010", 
    21 => "00111111011000000001100011100111", 
    22 => "00111001101111101101011101000001", 
    23 => "00111101100011001101111000011010", 
    24 => "10111001101100111101010010101110", 
    25 => "00111110001110111000000110110110", 
    26 => "00111101110101101101000100011000", 
    27 => "10111001101011101001011010000001", 
    28 => "10110111111010101110000110001011", 
    29 => "00111001100111011100111110001001", 
    30 => "00111111010110111010001011110000", 
    31 => "00111111010101011111001000000010", 
    32 => "10111001011001011010001101011101", 
    33 => "00111101110010011000110101000111", 
    34 => "00111001010111100100110001010001", 
    35 => "00111110110110111111110011101011", 
    36 => "00111101110101100111010011010001", 
    37 => "00111001110110111010110100111010", 
    38 => "00111111000110101100000100101011", 
    39 => "10111001100110100010010000000011", 
    40 => "00111111011010000111110110000000", 
    41 => "00111001010110000000000110110100", 
    42 => "10111001101110001000110010100100", 
    43 => "00111111011000010111100011110111", 
    44 => "10111001000010010101110100001011", 
    45 => "00111110000100000110001111100000", 
    46 => "00111001001001001010000001011110", 
    47 => "00111000111101110111011011000101", 
    48 => "00111111011001001101000101000010", 
    49 => "00111110101110110000010101010011", 
    50 => "10111001000010000101000010011100", 
    51 => "00111111001001010001100001101110", 
    52 => "00111111010001000101110100010000", 
    53 => "10111001011010011101010100011011", 
    54 => "00111111010011101000101110100000", 
    55 => "00111111011101100000101010110111", 
    56 => "00111110111110010011000000010110", 
    57 => "00111111001010100000110010001101", 
    58 => "10111000100001000001111011011110", 
    59 => "00111111011100101010010000110011", 
    60 => "00111000110100111100111111110110", 
    61 => "00111111010011010001011101000000", 
    62 => "00111001001111101101011101000001", 
    63 => "00111110101000000101100101100100", 
    64 => "00111110101100100100011011100001", 
    65 => "00111111011010101101000000101101", 
    66 => "10111001000010000101000010011100", 
    67 => "00111110010100000101111000011100", 
    68 => "10111000100011001000001001011010", 
    69 => "00110110101001111100010110101100", 
    70 => "00111000100100101100110011110111", 
    71 => "10110111011110111010100010000010", 
    72 => "10111000010001010010000111011110", 
    73 => "00111111011011001100111111100001", 
    74 => "00111000111001001001011011101110", 
    75 => "00111001001000111001001111101110", 
    76 => "00111110011111010000010011100110", 
    77 => "00111110001010011001100001001010", 
    78 => "00111111001110111010100001100001", 
    79 => "00111000000101101111111010110101", 
    80 => "10110111010010010101001110011100", 
    81 => "00111110011110000001111110010111", 
    82 => "00111110100111011010011101001100", 
    83 => "00111111000111110010011110001001", 
    84 => "00111001000010000101000010011100", 
    85 => "00111110010111100011110000010000", 
    86 => "00111001000001100011011110111101", 
    87 => "00111110100101011110011000110110", 
    88 => "00111110110000101100100000011101", 
    89 => "00111000011111111101101001000000", 
    90 => "10110101100001100011011110111101", 
    91 => "00111000111011001111101001101010", 
    92 => "00111110101110110100001010101011", 
    93 => "00111110011000101001101110101110", 
    94 => "10111001000111000011110011100010", 
    95 => "00111111001110110000010101010011", 
    96 => "00111110110000000100100111001011", 
    97 => "00110111000001100011011110111101", 
    98 => "10111000000110110011000001110011", 
    99 => "00111111000010010011101011000101", 
    100 => "00111110110010011100011001001100", 
    101 => "00111001000101101111111010110101", 
    102 => "00111110011001000100100010001100", 
    103 => "10111000101010111111011101101010", 
    104 => "00111111011010110101101011011001", 
    105 => "10111000010011011000010101011001", 
    106 => "00111110100111001111010011000111", 
    107 => "00110111000101101111111010110101", 
    108 => "10111001001100100100001000000111", 
    109 => "10111000110000001111000000100000", 
    110 => "00111110100001001110011101101000", 
    111 => "00111111010100100111100100100101", 
    112 => "10111000101010011101111010001011", 
    113 => "10110111000101101111111010110101", 
    114 => "00111000000111110110001000110000", 
    115 => "00111000101100100100001000000111", 
    116 => "00111110100010100110110011100011", 
    117 => "00111110000000000000000000000000", 
    118 => "10111000100000100000010111111111", 
    119 => "10110111110110100001101010010011", 
    120 => "00111000000011101001101100111001", 
    121 => "00111000011100110100010100000111", 
    122 => "00111110000101101011110110110010", 
    123 => "00111000010101011110100011010101", 
    124 => "00111110101100110101110000111010", 
    125 => "10111000011100110100010100000111", 
    126 => "00111110111011001000011010101101", 
    127 => "00111111000101111101010100110100", 
    128 => "00111110101000101110100011000000", 
    129 => "00111110110000100010011101101011", 
    130 => "00111111010101111110101111110010", 
    131 => "00111111000111011101010001010010", 
    132 => "00111110110010001011101000011111", 
    133 => "00110111110110100001101010010011", 
    134 => "00111111000011111110101011010101", 
    135 => "00111110111010000010011010001001", 
    136 => "10110111010110100001101010010011", 
    137 => "10111000101100000010100100101000", 
    138 => "10110111100101101111111010110101", 
    139 => "00111111001000001000101111101011", 
    140 => "00111111000101111111000101000001", 
    141 => "00111111001001100010000111111011", 
    142 => "10111000000110110011000001110011", 
    143 => "00111001000010000101000010011100", 
    144 => "00111000000111110110001000110000", 
    145 => "00110111000101101111111010110101", 
    146 => "00111000001110001000110010100100", 
    147 => "00111110111001111111011100010110", 
    148 => "00111111000100110110110100100010", 
    149 => "00111000000011101001101100111001", 
    150 => "10110111011010101110000110001011", 
    151 => "00111111001001101101110010010000", 
    152 => "00111111001010001100100001111010", 
    153 => "00111110110101000011100100110111", 
    154 => "00111111000110100010001000111110", 
    155 => "10110110100001100011011110111101", 
    156 => "10111000001001111100010110101100", 
    157 => "00111111000111100100101111111101", 
    158 => "00111111001101001001000011100110", 
    159 => "10111000000100101100110011110111", 
    160 => "00110111100111110110001000110000", 
    161 => "10111000011100110100010100000111", 
    162 => "10111000000101101111111010110101", 
    163 => "00111110110111010111110101011011", 
    164 => "10111000001001111100010110101100", 
    165 => "00111000011010101110000110001011", 
    166 => "00111111001111011110011011001101", 
    167 => "10110111100101101111111010110101", 
    168 => "00111111001000000000000000000000", 
    169 => "00111111010100001110000101100001", 
    170 => "00111111000101111011111000100011", 
    171 => "00111111000001011001000111011110", 
    172 => "00110111111000100111111000001111", 
    173 => "10110111111110111010100010000010", 
    174 => "00111111010010001011111111110100", 
    175 => "00110111111010101110000110001011", 
    176 => "10110101100001100011011110111101", 
    177 => "10110111001001111100010110101100", 
    178 => "00110111001001111100010110101100", 
    179 => "00110111101001111100010110101100", 
    180 => "10110111001110001000110010100100", 
    181 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_b4t is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_b4t is
    component predict_ensemble_b4t_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_b4t_rom_U :  component predict_ensemble_b4t_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


