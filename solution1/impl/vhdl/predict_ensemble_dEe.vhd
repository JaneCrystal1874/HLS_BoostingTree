-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_dEe_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_dEe_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111010100101001010010101011", 
    1 => "00111111010011001111000110000000", 
    2 => "00111110110001011010100111001010", 
    3 => "00111110111111111000000010111011", 
    4 => "00111110101001100111111000100000", 
    5 => "00111111010111101011100110010001", 
    6 => "00111111011011101100000101011101", 
    7 => "00111110100110100010111001111111", 
    8 => "00111111010001110110100001101010", 
    9 => "01000010110110101010101010101011", 
    10 => "00111110111100100110010011100101", 
    11 => "00111111010001000101110100010000", 
    12 => "00111110110010010101110010100111", 
    13 => "00111110111001010001101011001010", 
    14 => "00111111001001000110010001010110", 
    15 => "00111101101100111001000000000000", 
    16 => "00111110100111011011011100101000", 
    17 => "00111111001000100000000011110011", 
    18 => "00111110110001011001111111010011", 
    19 => "00111111011011111110111010010001", 
    20 => "01000010110011010101010101010101", 
    21 => "01000010101111111001100110011010", 
    22 => "01000010101110011001100110011010", 
    23 => "00111110111101011100100101100000", 
    24 => "00111110111001011000001101000001", 
    25 => "00111111001100100110001010101010", 
    26 => "00111111000011011110001101010100", 
    27 => "00111111000111010001011101000000", 
    28 => "01000010110100110000000000000000", 
    29 => "01000010101110100011100011100100", 
    30 => "00111110110001001010011111010110", 
    31 => "00111110000000110100101011001011", 
    32 => "00111110101011000011001111111000", 
    33 => "00111111000000001010010101011001", 
    34 => "00111110111011101110000011010010", 
    35 => "01000010110010001101101101101110", 
    36 => "01000010110100010011001100110011", 
    37 => "01000010110100100100000000000000", 
    38 => "01000010110100000110011001100110", 
    39 => "01000010110001110011001100110011", 
    40 => "01000010110001000110011001100110", 
    41 => "01000010110010000110011001100110", 
    42 => "01000010110010000000000000000000", 
    43 => "01000010110010111001100110011010", 
    44 => "01000010110011110011001100110011", 
    45 => "00111111001101011101000101110000", 
    46 => "00111110011010011011100010001000", 
    47 => "01000010110100110011001100110011", 
    48 => "00111110111001111101100110011001", 
    49 => "00111111000000100111111100111101", 
    50 => "00111111000110010001011011101100", 
    51 => "00111111001010100010000011101111", 
    52 => "00111110111010001010111000110010", 
    53 => "00111110110111000110011101111011", 
    54 => "00111110111010111010001011100000", 
    55 => "00111110111011000100101001100010", 
    56 => "00111110100111010111000111110011", 
    57 => "00111111011100010010100110111011", 
    58 => "00111110110000101011001000111010", 
    59 => "01000010110101100000000000000000", 
    60 => "00111110101111000000000000010001", 
    61 => "00111111000101100100101110101001", 
    62 => "01000010110101001000000000000000", 
    63 => "01000010110010100000000000000000", 
    64 => "00111111011100001011001011001000", 
    65 => "00111111000111101001111010010000", 
    66 => "01000010101110011001100110011010", 
    67 => "00111110111110101000101111110100", 
    68 => "00111111000001011010011111100011", 
    69 => "01000010101101100000000000000000", 
    70 => "00111101110100100010111100100111", 
    71 => "00111110101001010111111110110111", 
    72 => "00111110001110011010111010010010", 
    73 => "00111110101001110001001111001111", 
    74 => "00111110011111010000110100000110", 
    75 => "00111110110010111101011111110101", 
    76 => "00111111000101001110001101011000", 
    77 => "01000010101111010010010010010010", 
    78 => "00111110111000111101001101011111", 
    79 => "00111110110101000101110100100000", 
    80 => "01000010110010000000000000000000", 
    81 => "00111111000000101110100011000000", 
    82 => "01000010101101111001100110011010", 
    83 => "00111111001010011011001110101111", 
    84 => "01000010101111010000000000000000", 
    85 => "01000010110101000000000000000000", 
    86 => "01000010110100110011001100110011", 
    87 => "01000010110011101100110011001101", 
    88 => "00111111010011001010011000000001", 
    89 => "01000010110100000000000000000000", 
    90 => "00111111001001000010001001111001", 
    91 => "01000010101110000000000000000000", 
    92 => "01000010101101100110011001100110", 
    93 => "01000010101101100000000000000000", 
    94 => "01000010101101100110011001100110", 
    95 => "01000010101101110110110110110111", 
    96 => "01000010101101100101010101010101", 
    97 => "01000010101110000000000000000000", 
    98 => "01000010101101111001100110011010", 
    99 => "00111110011011110111011010100011", 
    100 => "00111110100101010001001000100011", 
    101 => "00111101011111110100110110111110", 
    102 => "00111110100010111110011011000101", 
    103 => "01000010110000100000000000000000", 
    104 => "01000010110000101100110011001101", 
    105 => "00111111000110100010111010010000", 
    106 => "01000010110001101100110011001101", 
    107 => "00111110111100101001101010100010", 
    108 => "00111110111111110000100100001111", 
    109 => "00111110110110010011111111110010", 
    110 => "00111110100001100111001101100000", 
    111 => "00111110101010001011101000011111", 
    112 => "00111111000010011001000010011111", 
    113 => "00111110100011100100011100010011", 
    114 => "00111110111011101000101110100000", 
    115 => "01000010110001101110001110001110", 
    116 => "01000010101111011011011011011011", 
    117 => "01000010101110101100110011001101", 
    118 => "01000010101110100000000000000000", 
    119 => "00111111000111110010001100000011", 
    120 => "00111110111010111110011011100110", 
    121 => "00111111000000101001001000011101", 
    122 => "00111110000101100001100010001011", 
    123 => "01000010101110000000000000000000", 
    124 => "01000010101101101100110011001101", 
    125 => "01000010101110100000000000000000", 
    126 => "01000010101110101100110011001101", 
    127 => "01000010101111000000000000000000", 
    128 => "01000010101110000000000000000000", 
    129 => "00111110011101010011000101010101", 
    130 => "00111110100100011100011110111101", 
    131 => "01000010110010010011001100110011", 
    132 => "01000010110010000000000000000000", 
    133 => "01000010110000001010101010101011", 
    134 => "01000010110010000110011001100110", 
    135 => "00111110111100101100111010101011", 
    136 => "01000010110000011001100110011010", 
    137 => "01000010110000000000000000000000", 
    138 => "00111110111101000001001110111010", 
    139 => "01000010101111100110011001100110", 
    140 => "00111110110001011100010100001101", 
    141 => "01000010110000100000000000000000", 
    142 => "00111111000100111011111101010001", 
    143 => "01000010110001110011001100110011", 
    144 => "01000010110001000000000000000000", 
    145 => "01000010110001100000000000000000", 
    146 => "01000010110001100110011001100110", 
    147 => "01000010110001001010101010101011", 
    148 => "01000010110001100000000000000000", 
    149 => "01000010110100111001100110011010", 
    150 => "01000010110101000000000000000000", 
    151 => "01000010110100101100110011001101", 
    152 => "00111111000111011010011101111110", 
    153 => "01000010110011000000000000000000", 
    154 => "01000010110011010011001100110011", 
    155 => "01000010110011110110110110110111", 
    156 => "00111111011101010110000011111010", 
    157 => "01000010101111010011001100110011", 
    158 => "01000010101111111001100110011010", 
    159 => "00111110111011100101101111101010", 
    160 => "01000010101110011001100110011010", 
    161 => "00111111001110010111101000010100", 
    162 => "01000010101110110101010101010101", 
    163 => "01000010101110111001100110011010", 
    164 => "01000010101111011001100110011010", 
    165 => "00111110110101111011100100111001", 
    166 => "01000010101110100000000000000000", 
    167 => "01000010110000100000000000000000", 
    168 => "01000010110001001100110011001101", 
    169 => "01000010110100010100000000000000", 
    170 => "01000010110100100011100011100100", 
    171 => "01000010110011001100110011001101", 
    172 => "01000010110011100000000000000000", 
    173 => "01000010101111000000000000000000", 
    174 => "01000010101111011001100110011010", 
    175 => "01000010110000001000000000000000", 
    176 => "01000010101111100000000000000000", 
    177 => "00111111000010110110010110001000", 
    178 => "01000010101101101000000000000000", 
    179 => "01000010101110000000000000000000", 
    180 => "01000010101110001100110011001101", 
    181 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_dEe is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_dEe is
    component predict_ensemble_dEe_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_dEe_rom_U :  component predict_ensemble_dEe_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


