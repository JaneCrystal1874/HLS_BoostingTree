-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_ekP_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_ekP_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001110110100110000111100", 
    1 => "00111000111001101010111111001101", 
    2 => "00111101100001000010011101000010", 
    3 => "00111110111000101011101011100000", 
    4 => "00111111011101001001010110011110", 
    5 => "00110111000101101111111010110101", 
    6 => "00111111001110111010001011110000", 
    7 => "00111111011110000111011001111101", 
    8 => "00111111001010010111010000111111", 
    9 => "00111111001010000000011001101100", 
    10 => "10111001010100001010101010101000", 
    11 => "00111111011100001100111011110110", 
    12 => "00111000010010010101001110011100", 
    13 => "00111000110101011110100011010101", 
    14 => "00111111000001000110011001001101", 
    15 => "00110111100001100011011110111101", 
    16 => "10111000110111100100110001010001", 
    17 => "00111101010110000110110110110101", 
    18 => "10111000010011011000010101011001", 
    19 => "00110111100101101111111010110101", 
    20 => "10110111000101101111111010110101", 
    21 => "00110111110110100001101010010011", 
    22 => "00111100010100011010011001010000", 
    23 => "10110111110010010101001110011100", 
    24 => "00111111011100111000001100000110", 
    25 => "00111111010101011101000101110000", 
    26 => "00110111110000001111000000100000", 
    27 => "00111101111100110010000011011010", 
    28 => "00111110110010100101010101101101", 
    29 => "00111110011101100000001010000110", 
    30 => "00111101110101101010011010100000", 
    31 => "00111101101110110010011100000011", 
    32 => "00110111101100000010100100101000", 
    33 => "10111000000001100011011110111101", 
    34 => "00111101101100111001000000000000", 
    35 => "00111110111101001110100000110010", 
    36 => "00111111010101110010110101011110", 
    37 => "00110110101001111100010110101100", 
    38 => "10110110010010010101001110011100", 
    39 => "00110111100101101111111010110101", 
    40 => "10110111100111110110001000110000", 
    41 => "10110111110000001111000000100000", 
    42 => "00110111000001100011011110111101", 
    43 => "00111111010010000011110010001110", 
    44 => "00111110111010000111111111101101", 
    45 => "00111111001101011101000101110000", 
    46 => "10110111100101101111111010110101", 
    47 => "00110111111000100111111000001111", 
    48 => "00111111011111000001110010100100", 
    49 => "00111101110001011110110000111110", 
    50 => "00111101110101010110101001111011", 
    51 => "10110111010010010101001110011100", 
    52 => "00110111010010010101001110011100", 
    53 => "10110111111100110100010100000111", 
    54 => "00111110100011010011001101001100", 
    55 => "00111000000101101111111010110101", 
    56 => "00111111011100011110100110101111", 
    57 => "10110111000101101111111010110101", 
    58 => "00111111011011101000000000101000", 
    59 => "00111111010011010001011101000000", 
    60 => "00110110111010101110000110001011", 
    61 => "00111111011001001101000101000010", 
    62 => "00111111010010110000110110110111", 
    63 => "00111111010001110100010111010000", 
    64 => "00111110101000001110011101011000", 
    65 => "00111111011011100100010011111010", 
    66 => "10110110100001100011011110111101", 
    67 => "10110111001110001000110010100100", 
    68 => "00110110010010010101001110011100", 
    69 => "00111110100010010001111010101000", 
    70 => "00111110011100100011110111010101", 
    71 => "00110101100001100011011110111101", 
    72 => "00110110101001111100010110101100", 
    73 => "00111110001111110000001100001000", 
    74 => "00110110100001100011011110111101", 
    75 => "00110110010010010101001110011100", 
    76 => "00111111000000111110100001111001", 
    77 => "10110111000001100011011110111101", 
    78 => "10110110000001100011011110111101", 
    79 => "00110110010010010101001110011100", 
    80 => "00111110100000110000110111011000", 
    81 => "00111110100110000101110111011001", 
    82 => "10110110101001111100010110101100", 
    83 => "10110110100001100011011110111101", 
    84 => "00111110100101110010011000101001", 
    85 => "00110110010010010101001110011100", 
    86 => "00111110100010100001101000101110", 
    87 => "00110110010010010101001110011100", 
    88 => "00111110101011001111010110010000", 
    89 => "00000000000000000000000000000000", 
    90 => "00111110111100101011001011100001", 
    91 => "10110110010010010101001110011100", 
    92 => "00111111011000010011001101101110", 
    93 => "10110101100001100011011110111101", 
    94 => "10000000000000000000000000000000", 
    95 => "00111111010101111010001001011001", 
    96 => "00110110010010010101001110011100", 
    97 => "00111111010011000011101100111111", 
    98 => "10110110010010010101001110011100", 
    99 => "00111110000101001010100011000001", 
    100 => "00110110000001100011011110111101", 
    101 => "10110110000001100011011110111101", 
    102 => "00111110100110110101000110011100", 
    103 => "00111110011011100011000000000001", 
    104 => "00111110101010101101111100001101", 
    105 => "00110101100001100011011110111101", 
    106 => "00110110000001100011011110111101", 
    107 => "10110110000001100011011110111101", 
    108 => "00111101110111010001011110000011", 
    109 => "00110110000001100011011110111101", 
    110 => "00111111011000010111100011110111", 
    111 => "00111111010101110001101011100011", 
    112 => "00110101100001100011011110111101", 
    113 => "00111110110010101100001000110111", 
    114 => "10110110000001100011011110111101", 
    115 => "00111111000001000100110101000100", 
    116 => "00111111010011110001100110110101", 
    117 => "00111110111011100001000111011100", 
    118 => "00111110111000000000100110010001", 
    119 => "00111111010101011111010100111000", 
    120 => "00110101100001100011011110111101", 
    121 => "00111110100100011010000010001100", 
    122 => "00111111000010101000011101011101", 
    123 => "00110110000001100011011110111101", 
    124 => "00111110111001110000111110011101", 
    125 => "00111111001010111110101111110010", 
    126 => "10110101100001100011011110111101", 
    127 => "00111110111100000111001010001111", 
    128 => "00110101100001100011011110111101", 
    129 => "00111110000100110010111111001011", 
    130 => "10110101100001100011011110111101", 
    131 => "00110101100001100011011110111101", 
    132 => "00000000000000000000000000000000", 
    133 => "00111111001100111010000110110010", 
    134 => "00110101100001100011011110111101", 
    135 => "10110110000001100011011110111101", 
    136 => "10000000000000000000000000000000", 
    137 => "00000000000000000000000000000000", 
    138 => "00111110001110010000000000111111", 
    139 => "00111110110101101011010110110011", 
    140 => "00111111001101001011010110111011", 
    141 to 142=> "00110101100001100011011110111101", 
    143 => "00111111000100000010010011010101", 
    144 => "00111110111000000100110001001001", 
    145 => "10110101100001100011011110111101", 
    146 => "00111111010100111011001001000110", 
    147 => "00110101100001100011011110111101", 
    148 => "00000000000000000000000000000000", 
    149 => "00111110111011101111111101111110", 
    150 => "00111110111001011101000110000001", 
    151 => "00111110100110100010111001111111", 
    152 to 153=> "10110101100001100011011110111101", 
    154 => "10000000000000000000000000000000", 
    155 => "00110101100001100011011110111101", 
    156 => "00111111001001100101010110110000", 
    157 => "10110101100001100011011110111101", 
    158 => "00111111000101010011110110111000", 
    159 => "00111111001011101001101000111101", 
    160 to 161=> "00000000000000000000000000000000", 
    162 => "10000000000000000000000000000000", 
    163 => "00111111001110111101010110011001", 
    164 => "10000000000000000000000000000000", 
    165 => "00111111000111000010100100101000", 
    166 => "10000000000000000000000000000000", 
    167 => "00111111000100001011011100111101", 
    168 => "00111110110110110111010110100111", 
    169 => "00111111000000011010001100011010", 
    170 to 171=> "10000000000000000000000000000000", 
    172 => "00000000000000000000000000000000", 
    173 => "10000000000000000000000000000000", 
    174 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_ekP is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_ekP is
    component predict_ensemble_ekP_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_ekP_rom_U :  component predict_ensemble_ekP_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


