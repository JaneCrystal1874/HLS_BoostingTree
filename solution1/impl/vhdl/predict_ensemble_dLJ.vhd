-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_dLJ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_dLJ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101000111010000110010000", 
    1 => "00111101100011111100111001110100", 
    2 => "00111101101111110101101101100000", 
    3 => "00111101011110011110110011110110", 
    4 => "00111110110010010111000001010000", 
    5 => "10111111000000111110010110101000", 
    6 => "00111111001010100010100001000110", 
    7 => "00111101010111000100010101000110", 
    8 => "10111101100000000000110110100010", 
    9 => "00111111001000111101000100010100", 
    10 => "00111111000100010001100100010101", 
    11 => "00111100101111100111101011111010", 
    12 => "00111110010111101101110000111100", 
    13 => "00111110001110001001011001010111", 
    14 => "00111110110010111101000101100111", 
    15 => "00111110110101010011100110111001", 
    16 => "00111111001000101101001010111011", 
    17 => "10111110100110001011001011001000", 
    18 => "00111110101101010001101001100101", 
    19 => "10111110110011010101001101101001", 
    20 => "00111111000000101100101000100101", 
    21 => "00111110001100101000111011010110", 
    22 => "00111111001001011101100111100100", 
    23 => "00111111001001011101000101110000", 
    24 => "00111110010111010001011101000000", 
    25 => "00111110011110111001010100011100", 
    26 => "00111111000100100011011000011010", 
    27 => "10111101110010101010000110010100", 
    28 => "00111100010100100011110101001111", 
    29 => "10111110010101001110001001101101", 
    30 => "00111111001100101110100011000000", 
    31 => "00111110001010001011101001000001", 
    32 => "00111110100001001100111100000111", 
    33 => "00111111001010101111110110010111", 
    34 => "00111110100001000100110100100011", 
    35 => "00111111011001011000011010000111", 
    36 => "00111111000011010100011101101011", 
    37 => "10111101101001101110000010001111", 
    38 => "00111110111101110100101001110111", 
    39 => "10111011001110001110000010000111", 
    40 => "00111110100011110101001010111001", 
    41 => "10111110011011000101110111101010", 
    42 => "00111111010001111111001011010100", 
    43 => "00111110001101011000001010011001", 
    44 => "10111110010100010101000011011011", 
    45 => "00111110101101111111110101100001", 
    46 => "00111111010010011010100001001000", 
    47 => "00111111010111011111111100001101", 
    48 => "00111111000001011000011111101000", 
    49 => "10111110111100010010000011000000", 
    50 => "00111111001100000000000000000000", 
    51 => "10111101000100000100000011000000", 
    52 => "00111101010100110110011100011011", 
    53 => "00111111001011111111010001010110", 
    54 => "00111110000110100100011100100100", 
    55 => "00111111001100000000000000000000", 
    56 => "00111110000001010000101100001111", 
    57 => "00111110110001000100011110000000", 
    58 => "00111110010101001101011100101000", 
    59 => "00111111010010001101110110000011", 
    60 => "00111111001100101110100011000000", 
    61 => "00111110110100100110001110010101", 
    62 => "00111111000101000011110100100101", 
    63 => "00111111010010000111100001000010", 
    64 => "10111110010000001001111010011001", 
    65 => "10111101010101100001001111010011", 
    66 => "00111110100101001000010111000010", 
    67 => "10111110000010101011100010100110", 
    68 => "00111111001000011011010110000101", 
    69 => "00111110000111000110111100110111", 
    70 => "00111110011000111100111001100100", 
    71 => "00111111000101110100010111010000", 
    72 => "00111111000000100101001100000000", 
    73 => "00111101101111001000001000010111", 
    74 => "00111110110011000001011101000100", 
    75 => "10111100100011001001101110000100", 
    76 => "00111111000001001001100000101101", 
    77 => "10111110100000110011010001100001", 
    78 => "00111100111111111000101010001111", 
    79 => "00111111001001011111001011001011", 
    80 => "00111111000100100000110111111110", 
    81 => "00111101111011111001111010111111", 
    82 => "00111111001010110111011111000000", 
    83 => "00111110010011101101001011001100", 
    84 => "00111110001110000001111110010111", 
    85 => "00111110011111000101010110000110", 
    86 => "00111110100110110001110101010000", 
    87 => "10111110000111000101111001110000", 
    88 => "00111100101111110001111010001110", 
    89 => "00111110001110000000010010010110", 
    90 => "00111111011001110000101101111100", 
    91 => "00111110110001110011001101000100", 
    92 => "00111111000100010011000001111011", 
    93 => "10111101111010100110001100110000", 
    94 => "10111110101110101000111100011001", 
    95 => "00111111001000100101100010100011", 
    96 => "10111110000011111000101110011100", 
    97 => "00111110010011011011010101010010", 
    98 => "10111011011010000100001001110100", 
    99 => "10111101110010001111111000100110", 
    100 => "00111111001100101001011010010010", 
    101 => "00111101000111100111011101001111", 
    102 => "10111110010101000110011110111110", 
    103 => "00111110000001110011011111011010", 
    104 => "00111111000101001000110011000101", 
    105 => "10111101101011011101000011011001", 
    106 => "00111101110001000000011011000000", 
    107 => "00111110101101000101101011000100", 
    108 => "00111101111100010110100101111111", 
    109 => "00111110000011110101111111010100", 
    110 => "10111110001011110101101000010000", 
    111 => "00111110101100011110010100111011", 
    112 => "00111100010110111110001111000001", 
    113 => "00111101011101111111100011001011", 
    114 => "10111101000011100010000010001010", 
    115 => "00111110000000011100001000011010", 
    116 => "00111110001000000100100110101010", 
    117 => "10111101101000010011111011000100", 
    118 => "10111001000101101111111010110101", 
    119 => "00111110101100101101000111010000", 
    120 => "00111111000101100010101101001001", 
    121 => "00111001000111110110001000110000", 
    122 => "00111110000000001111010100011011", 
    123 => "10111101011100010110111000110111", 
    124 => "00111111000010110001110111100111", 
    125 => "00111110111111110011110000101110", 
    126 => "00111110100010110010111110001000", 
    127 => "00111110101111110001110000110010", 
    128 => "10111110110010010000101110100110", 
    129 => "00111101100011111101111010110101", 
    130 => "00111111000110010101001001001100", 
    131 => "00111111000110100100001000011000", 
    132 => "00111110110001011101000110000001", 
    133 => "10111110010001011011101010110010", 
    134 => "00111111000000111011101110000100", 
    135 => "10111100111001111111101100100110", 
    136 => "00111100101011011100010011001010", 
    137 => "00111110101100000101010111111100", 
    138 => "10111110001111001010101111000101", 
    139 => "00111111010110110111101000101101", 
    140 => "00111101111101001100011001100001", 
    141 => "00111110111101011110101011001101", 
    142 => "00111110111000000001101110101000", 
    143 => "10111100101100001110111001001010", 
    144 => "00111100111111100001110110101000", 
    145 => "10111101010010111011011111111010", 
    146 => "00111100001001100110000100101000", 
    147 => "00111110111100110011100010010011", 
    148 => "00111111000100101110100011000000", 
    149 => "00111110101110111011011110110111", 
    150 => "00111110111101000011011010010111", 
    151 => "00111111001010110111100111101010", 
    152 => "00111101110010010001100001011101", 
    153 => "10111110011000010110001000101000", 
    154 => "10111101100111000110000000000011", 
    155 => "00111110111011011111101110110101", 
    156 => "00111110110011110110011111010011", 
    157 => "00111110101110101110010011010010", 
    158 => "10111101110010011111100101001000", 
    159 => "00111110110110111100011110010011", 
    160 => "00111110111101010010011110000000", 
    161 => "00111101100111001100111100101001", 
    162 => "00111110111000011111010011010011", 
    163 => "00111110000010100110011110100101", 
    164 => "00111111000100010010111000110000", 
    165 => "10111110011001110001000001000101", 
    166 => "10111101100011100001001011101000", 
    167 => "00111101001101101000011110110001", 
    168 => "00111110011001001000111001000111", 
    169 => "00111110011101001101000011011101", 
    170 => "10111110000100111101011111010100", 
    171 => "10111100100101010100101010000000", 
    172 => "00111110101110111111011011000010", 
    173 => "10111101011111101010011100000101", 
    174 => "10111110101000011001000011010001", 
    175 => "00111100111110001011101111010100", 
    176 => "10111101001101111000100110100100", 
    177 => "00111101111001101100101000000100", 
    178 => "00111101001100000110110101010000", 
    179 => "10111101001011100000101100001011", 
    180 => "00111101000001100011111000001000", 
    181 => "00111100101001111111001111001111", 
    182 => "00111110001100001101110111000110", 
    183 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_dLJ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_dLJ is
    component predict_ensemble_dLJ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_dLJ_rom_U :  component predict_ensemble_dLJ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


