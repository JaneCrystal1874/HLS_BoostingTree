-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_c7D_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_c7D_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001110110100110000111100", 
    1 => "00111001101101011110110110001101", 
    2 => "00111111000010110111010110100111", 
    3 => "00111111011110000011101001000011", 
    4 => "00111101100011101101110000111100", 
    5 => "00111101010110111111111100000100", 
    6 => "00111001110011011000010101011001", 
    7 => "10111010010110011101011101110111", 
    8 => "00111110100111011010011111110100", 
    9 => "00111001001000010111101100001111", 
    10 => "00111110101001001010000110001100", 
    11 => "10111000110110100001101010010011", 
    12 => "00111110011010011001100100010011", 
    13 => "00111111011011011111101100011110", 
    14 => "00111111011100010101000010101001", 
    15 => "00111000010001010010000111011110", 
    16 => "00111110100101001101010001100111", 
    17 => "00111110010000101101000001011111", 
    18 => "10111001100001000001111011011110", 
    19 => "00111101100111111000110110110101", 
    20 => "00111001100000100000010111111111", 
    21 => "00111110110011110011111010101011", 
    22 => "00111111011101011100110010000101", 
    23 => "10111001010111010011111111100010", 
    24 => "00111110010111111101111100111011", 
    25 => "00111110110000101110100011000000", 
    26 => "00111111011010001001110001101111", 
    27 => "10111000100011101001101100111001", 
    28 => "00111110000001100000100101010111", 
    29 => "00111101111110110100000010110011", 
    30 => "00110111111010101110000110001011", 
    31 => "00111000001101000101101011100110", 
    32 => "00111101110000010001000110101110", 
    33 => "00110111010010010101001110011100", 
    34 => "00111001001100000010100100101000", 
    35 => "00111111010101011111001000000010", 
    36 => "00111110001000000100100110101010", 
    37 => "00111110110111000001101110010111", 
    38 => "00110111100011101001101100111001", 
    39 => "10110111101100000010100100101000", 
    40 => "00111111011011001001110001001110", 
    41 => "00111111000111101001101110101110", 
    42 => "00111110010100101111001010110110", 
    43 => "00111110001100110000100101000010", 
    44 => "00111111011011101111101110100000", 
    45 => "00111001001010011101111010001011", 
    46 => "00111110001110000011000111110000", 
    47 => "10000000000000000000000000000000", 
    48 => "10110111110010010101001110011100", 
    49 => "00111111001110100101110111110010", 
    50 => "10110111010110100001101010010011", 
    51 => "10111000011000100111111000001111", 
    52 => "00110110110010010101001110011100", 
    53 => "00111000001100000010100100101000", 
    54 => "00111110011101000000010010100111", 
    55 => "00111000101100100100001000000111", 
    56 => "00111111011101101000011100001001", 
    57 => "10111001000110110011000001110011", 
    58 => "00110111111110111010100010000010", 
    59 => "00111000100001000001111011011110", 
    60 => "00111110110011011101110100101011", 
    61 => "00111110001010111101101110100001", 
    62 => "00111111000110010010101110010001", 
    63 => "10110111110010010101001110011100", 
    64 => "00111110001011000010111101000000", 
    65 => "00111111011100111001110011101001", 
    66 => "10111000010110100001101010010011", 
    67 => "10111000010100011011011100010111", 
    68 => "00111111011011101000001100101100", 
    69 => "00111110000100010011101101011100", 
    70 => "00111110001110000011101110100011", 
    71 => "00000000000000000000000000000000", 
    72 => "00110111100001100011011110111101", 
    73 => "00110111101001111100010110101100", 
    74 => "00111110001111110000001100001000", 
    75 => "00111101100101001010010111011111", 
    76 => "00111000011101110111011011000101", 
    77 => "00110111010110100001101010010011", 
    78 => "00111111001111000010000110001110", 
    79 => "00111110111001111101101110010000", 
    80 => "10110111100111110110001000110000", 
    81 => "00110110100001100011011110111101", 
    82 => "00111111001111111010001010111110", 
    83 => "10110111010010010101001110011100", 
    84 => "00111101010100010111001111111011", 
    85 => "10111000010000001111000000100000", 
    86 => "00111101111111011001000110101100", 
    87 => "10110110100001100011011110111101", 
    88 => "00110101100001100011011110111101", 
    89 => "00110110110010010101001110011100", 
    90 => "00110101100001100011011110111101", 
    91 => "00111111000110100110100100010110", 
    92 => "00111111001000000001110001010000", 
    93 => "10110111010010010101001110011100", 
    94 => "00111111001010100010111010010000", 
    95 => "00111000000001100011011110111101", 
    96 => "00111111011100101010110010101000", 
    97 => "00111110110010010000100000011100", 
    98 => "00110110010010010101001110011100", 
    99 => "00111111000010110110100111101100", 
    100 => "10110110100001100011011110111101", 
    101 => "00111110111011101101100001101111", 
    102 => "00111110100110011010101011100111", 
    103 => "00111111011000111110011011000101", 
    104 => "10110111111100110100010100000111", 
    105 => "00110101100001100011011110111101", 
    106 => "00111110111100000000101100100100", 
    107 => "00110101100001100011011110111101", 
    108 => "10110110000001100011011110111101", 
    109 => "00110111101100000010100100101000", 
    110 => "00111110110000100000100011000000", 
    111 => "00111111010001011101000101110000", 
    112 => "10110110110010010101001110011100", 
    113 => "00111111011011010100110001000100", 
    114 => "00110111100011101001101100111001", 
    115 => "10110101100001100011011110111101", 
    116 => "00000000000000000000000000000000", 
    117 => "00110110111010101110000110001011", 
    118 => "00110110010010010101001110011100", 
    119 => "00111110011100110010100110000000", 
    120 => "10110110010010010101001110011100", 
    121 => "00111111010110010111111110000100", 
    122 => "00110111100011101001101100111001", 
    123 => "00110111001001111100010110101100", 
    124 => "00111110100000100100111000111000", 
    125 => "00111110010111111001000001010100", 
    126 => "10110111001110001000110010100100", 
    127 => "00110110010010010101001110011100", 
    128 => "00111110110111010101010100111111", 
    129 => "10110111011010101110000110001011", 
    130 => "00111101111101100001101100101010", 
    131 => "10110110010010010101001110011100", 
    132 => "10000000000000000000000000000000", 
    133 => "00110111001110001000110010100100", 
    134 => "00111110100011100100011100010011", 
    135 => "00111111010001010011001001100001", 
    136 => "00111111001111110111000111001001", 
    137 => "00110111001110001000110010100100", 
    138 => "00110110100001100011011110111101", 
    139 => "00111110010000000000000000000000", 
    140 => "10110111100101101111111010110101", 
    141 => "00110111000001100011011110111101", 
    142 => "00111110110000001100111000001100", 
    143 => "00111110111110110011010111010010", 
    144 => "00111110100101110010111000000110", 
    145 => "00111110100000110101111001010011", 
    146 => "10110111011010101110000110001011", 
    147 => "00111111000000110100010010000000", 
    148 => "00111110101010101110000001011101", 
    149 => "10110110111010101110000110001011", 
    150 => "00111110100101000001010110010000", 
    151 => "00111110000010000011000000011010", 
    152 => "00110111110100011011011100010111", 
    153 => "10110111010110100001101010010011", 
    154 => "00111110101111010001011101000000", 
    155 => "00110110100001100011011110111101", 
    156 => "10110110000001100011011110111101", 
    157 => "10110110100001100011011110111101", 
    158 => "00110110100001100011011110111101", 
    159 => "00111110111101000000001010001110", 
    160 => "00111110101110011100011001001100", 
    161 => "00111111001101101110010001001011", 
    162 => "00111110101100110001110100101110", 
    163 => "00110110101001111100010110101100", 
    164 => "00111111000111110111000110101000", 
    165 => "10110111001110001000110010100100", 
    166 => "10110110010010010101001110011100", 
    167 => "10110110100001100011011110111101", 
    168 => "00110110101001111100010110101100", 
    169 => "00111110010100000001111101110101", 
    170 => "00111111001111110011000001110011", 
    171 => "10110110100001100011011110111101", 
    172 => "00111111001000110101100001101101", 
    173 => "00110110110010010101001110011100", 
    174 => "00111111010101110011110001100000", 
    175 => "00111111000101000010100100010111", 
    176 => "10110110010010010101001110011100", 
    177 => "00111111001100110011101000100110", 
    178 => "00110110100001100011011110111101", 
    179 => "00111111000000100100000001000010", 
    180 => "00110110010010010101001110011100", 
    181 => "00111111001001110011001111001010", 
    182 => "10110101100001100011011110111101", 
    183 => "00111110111001001100010111011010", 
    184 => "10110110010010010101001110011100", 
    185 => "00000000000000000000000000000000", 
    186 => "00110110000001100011011110111101", 
    187 => "00110101100001100011011110111101", 
    188 => "00111110110111100111110110111011", 
    189 => "00000000000000000000000000000000", 
    190 => "10110110000001100011011110111101", 
    191 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_c7D is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_c7D is
    component predict_ensemble_c7D_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_c7D_rom_U :  component predict_ensemble_c7D_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


