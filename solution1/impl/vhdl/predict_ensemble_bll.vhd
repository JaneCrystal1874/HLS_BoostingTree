-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_bll_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_bll_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111111110110001010110111", 
    1 => "00111011100000111100101011111011", 
    2 => "00111101100011110011111011001101", 
    3 => "00111100010101010110001010011110", 
    4 => "00111110000001000101000110111001", 
    5 => "00111010001110101110100010011111", 
    6 => "10111100000100111111011011000010", 
    7 => "00111011100111010100100101010010", 
    8 => "00111111000111100001101010100100", 
    9 => "00111111011110000011101001000011", 
    10 => "00111101110000111101011100001010", 
    11 => "00111111011010111101011100101100", 
    12 => "10111011100001010100110011011011", 
    13 => "00111011101110101010110111100110", 
    14 => "00111111011110000111011001111101", 
    15 => "00111110010110111100011101110001", 
    16 => "00111111011011011100100010101000", 
    17 => "00111110101011100110111001100101", 
    18 => "00111010111001000011001001000100", 
    19 => "00111110010010001100110111101010", 
    20 => "00111111011010001110110100001011", 
    21 => "10111011100110010110101101110110", 
    22 => "00111101010111110111011100101001", 
    23 => "00111110100100101010011111011111", 
    24 => "00111111011100110010000010000110", 
    25 => "10111010011100010110111101000100", 
    26 => "10111011000010100101100010110100", 
    27 => "00111101110010101110100111101110", 
    28 => "00111011000010100000010011010001", 
    29 => "00111010111010010100111011100100", 
    30 => "00111111000101100001010111111101", 
    31 => "10111001010001010010000111011110", 
    32 => "10111011000110110100000100111010", 
    33 => "00111111011011100101110001011111", 
    34 => "00111010100010111011100100000110", 
    35 => "10111010101101011110110110001101", 
    36 => "00111101111010101111011010000011", 
    37 => "10111011010000101010010001010101", 
    38 => "00111111000000111001101101100111", 
    39 => "00111110111100001000101001001000", 
    40 => "10111010011111001111100000001110", 
    41 => "00111010111011101111000110111011", 
    42 => "00111111011010100111001001110101", 
    43 => "00111111000110111111010010101010", 
    44 => "10111010001110100001111101001011", 
    45 => "00111110110011010110111010001011", 
    46 => "00111111000010000110110101110010", 
    47 => "00111111010111001001110101101011", 
    48 => "00111110010011100101011110010111", 
    49 => "00111001110010100110000000001011", 
    50 => "00111111011100011010101101111110", 
    51 => "10111010101100110100111001110111", 
    52 => "00111111000101011010001110010000", 
    53 => "00111111011000111010111001000111", 
    54 => "00111111001011000110100001000101", 
    55 => "00111101111010111110110011101110", 
    56 => "00111010110110111100111011001000", 
    57 => "10111010101100100010000001111001", 
    58 => "00111001011010101110000110001011", 
    59 => "00111000100001000001111011011110", 
    60 => "10111010000100110001000000010011", 
    61 => "00111001101010100110010011000011", 
    62 => "10111000110100111100111111110110", 
    63 => "00111110010010111010001100000001", 
    64 => "00111010110000100011111110101011", 
    65 => "10111001111101111111110011111100", 
    66 => "00111000010001010010000111011110", 
    67 => "10111010010001010010000111011110", 
    68 => "00111110001010001011001111110110", 
    69 => "00111000100110110011000001110011", 
    70 => "00111110111111111001101011010000", 
    71 => "00111010100001001010010100010110", 
    72 => "00111111011000111100011000000000", 
    73 => "00111001111111111101101001000000", 
    74 => "00111010100010000010111100001110", 
    75 => "00111110000000000110100001010101", 
    76 => "10111010011010001000010110010000", 
    77 => "00111110111001101000110110010111", 
    78 => "00111110000000111000101101001000", 
    79 => "10111010101110001010111000110010", 
    80 => "00111001001110011001100100010011", 
    81 => "00111010100110001111011000000110", 
    82 => "00111110101011001001101111101001", 
    83 => "00111110111101010000001001101001", 
    84 => "00111110101011110010010011111011", 
    85 => "00111110011000110110111000101111", 
    86 => "00111110001011000011010111001110", 
    87 => "00111110100100100100110011000111", 
    88 => "00111110110000010010011110010001", 
    89 => "00111110001101101001011110101111", 
    90 => "00111110011110000000100011001000", 
    91 => "10111001011100100011100010010111", 
    92 => "00111111001101101010001101011001", 
    93 => "00111110100101001011111100001010", 
    94 => "00111010100010100100011111101101", 
    95 => "10111010001010100010000110100111", 
    96 => "00111111001010000101000000110111", 
    97 => "10111000100101101111111010110101", 
    98 => "00111110010100100101101110111000", 
    99 => "00111010001010111111011101101010", 
    100 => "00111110100001110011110100111010", 
    101 => "00111110101011010101001110101100", 
    102 => "00111010100000101010110111000101", 
    103 => "00111010001111101101011101000001", 
    104 => "10111001010001010010000111011110", 
    105 => "00111110110010111010000010000100", 
    106 => "00111010010111110101100011000001", 
    107 => "10111010110111010110000101110000", 
    108 => "10111010000010101110111110110011", 
    109 => "10111010100000001001010011100110", 
    110 => "00111110100011101011100011111010", 
    111 => "00111110101100111010100000111111", 
    112 => "00111001111111000010111010111010", 
    113 => "00111110111010000001100010000011", 
    114 => "00111110110110011111101100011110", 
    115 => "00111010000111100101010111000001", 
    116 => "00111110100101111111010000010011", 
    117 => "10111001101111000011100000101010", 
    118 => "00111110001000101111000000010111", 
    119 => "10111010101001000011101110110100", 
    120 => "00111001110001100010111001001101", 
    121 => "00111010001011100101001101100101", 
    122 => "00111111001111011010110100110010", 
    123 => "10111010001101101011011011100001", 
    124 => "00111111000011100110011100110000", 
    125 => "00111110010100111001000011001001", 
    126 => "00111010000010010001100111110000", 
    127 => "00111111000101010101011000001000", 
    128 => "00111110100111000000110111010100", 
    129 => "00111110101010101111110101010100", 
    130 => "00111111000000001000100101111111", 
    131 => "00111001100110111011011010101010", 
    132 => "10111000011101110111011011000101", 
    133 => "00111111010101110100110010110010", 
    134 => "10111001100110101010101000111011", 
    135 => "00111001000001010010101101001110", 
    136 => "00111010001011111010001011110000", 
    137 => "00111110111001101000001011111001", 
    138 => "00111111001010000101000110011000", 
    139 => "00111110100010111101001010110111", 
    140 => "00111111011110111110111110001101", 
    141 => "00111111010100010111010100111010", 
    142 => "10111001101111110101110101111001", 
    143 => "10111010001110101010010110000011", 
    144 => "00111001100101010110110000001101", 
    145 => "00111010010000010111011001010111", 
    146 => "00111001100011111010011110101000", 
    147 => "10111001111010010100111011100100", 
    148 => "10111010001111111010000010010100", 
    149 => "00111001110111010011111111100010", 
    150 => "10111001110100010011000011100000", 
    151 => "00111110101001011101000110000001", 
    152 => "00111010000010000101000010011100", 
    153 => "10111001100001010010101101001110", 
    154 => "00111110101010101000000100110100", 
    155 => "10111001011011110001001101001001", 
    156 => "00111110110100010101110110110011", 
    157 => "00111010001101111000000000110100", 
    158 => "00111110111111110001100001100101", 
    159 => "00111110111011110010111101010101", 
    160 => "00111111000100111100010100010101", 
    161 => "00111111000001110110011110110010", 
    162 => "00111010000111100001001010100101", 
    163 => "00111110111001111011011000110101", 
    164 => "00111000110110000000000110110100", 
    165 => "00111111000001101010011010001111", 
    166 => "00111111001011010001011101000000", 
    167 => "10111001110110100001101010010011", 
    168 => "10111001000101011111001001000101", 
    169 => "00111110111100001001001101110101", 
    170 => "10111010000100111001011001001010", 
    171 => "00111111000111000000100011111010", 
    172 => "00111010011110010100110010001000", 
    173 => "00111110111101011110101011001101", 
    174 => "00111110111110001001100000101101", 
    175 => "00111001101110100001111101001011", 
    176 => "10111000001000111001001111101110", 
    177 => "00111111000011110011000011000110", 
    178 => "00111001010001100010111001001101", 
    179 => "00111001111011000111010000110010", 
    180 => "00111111000101011101000101110000", 
    181 => "10111010000011100101100000011101", 
    182 => "00111000000101101111111010110101", 
    183 => "00111111000011010001011101000000", 
    184 => "00111001100100010011101001010000", 
    185 => "00111110100111110001001000011011", 
    186 => "10111001010111010011111111100010", 
    187 => "10110111100011101001101100111001", 
    188 => "00111001110010010101001110011100", 
    189 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_bll is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_bll is
    component predict_ensemble_bll_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_bll_rom_U :  component predict_ensemble_bll_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


