// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __predict_ensemble_bll_H__
#define __predict_ensemble_bll_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct predict_ensemble_bll_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 195;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(predict_ensemble_bll_ram) {
        ram[0] = "0b00111100111111110110001010110111";
        ram[1] = "0b00111011100000111100101011111011";
        ram[2] = "0b00111101100011110011111011001101";
        ram[3] = "0b00111100010101010110001010011110";
        ram[4] = "0b00111110000001000101000110111001";
        ram[5] = "0b00111010001110101110100010011111";
        ram[6] = "0b10111100000100111111011011000010";
        ram[7] = "0b00111011100111010100100101010010";
        ram[8] = "0b00111111000111100001101010100100";
        ram[9] = "0b00111111011110000011101001000011";
        ram[10] = "0b00111101110000111101011100001010";
        ram[11] = "0b00111111011010111101011100101100";
        ram[12] = "0b10111011100001010100110011011011";
        ram[13] = "0b00111011101110101010110111100110";
        ram[14] = "0b00111111011110000111011001111101";
        ram[15] = "0b00111110010110111100011101110001";
        ram[16] = "0b00111111011011011100100010101000";
        ram[17] = "0b00111110101011100110111001100101";
        ram[18] = "0b00111010111001000011001001000100";
        ram[19] = "0b00111110010010001100110111101010";
        ram[20] = "0b00111111011010001110110100001011";
        ram[21] = "0b10111011100110010110101101110110";
        ram[22] = "0b00111101010111110111011100101001";
        ram[23] = "0b00111110100100101010011111011111";
        ram[24] = "0b00111111011100110010000010000110";
        ram[25] = "0b10111010011100010110111101000100";
        ram[26] = "0b10111011000010100101100010110100";
        ram[27] = "0b00111101110010101110100111101110";
        ram[28] = "0b00111011000010100000010011010001";
        ram[29] = "0b00111010111010010100111011100100";
        ram[30] = "0b00111111000101100001010111111101";
        ram[31] = "0b10111001010001010010000111011110";
        ram[32] = "0b10111011000110110100000100111010";
        ram[33] = "0b00111111011011100101110001011111";
        ram[34] = "0b00111010100010111011100100000110";
        ram[35] = "0b10111010101101011110110110001101";
        ram[36] = "0b00111101111010101111011010000011";
        ram[37] = "0b10111011010000101010010001010101";
        ram[38] = "0b00111111000000111001101101100111";
        ram[39] = "0b00111110111100001000101001001000";
        ram[40] = "0b10111010011111001111100000001110";
        ram[41] = "0b00111010111011101111000110111011";
        ram[42] = "0b00111111011010100111001001110101";
        ram[43] = "0b00111111000110111111010010101010";
        ram[44] = "0b10111010001110100001111101001011";
        ram[45] = "0b00111110110011010110111010001011";
        ram[46] = "0b00111111000010000110110101110010";
        ram[47] = "0b00111111010111001001110101101011";
        ram[48] = "0b00111110010011100101011110010111";
        ram[49] = "0b00111001110010100110000000001011";
        ram[50] = "0b00111111011100011010101101111110";
        ram[51] = "0b10111010101100110100111001110111";
        ram[52] = "0b00111111000101011010001110010000";
        ram[53] = "0b00111111011000111010111001000111";
        ram[54] = "0b00111111001011000110100001000101";
        ram[55] = "0b00111101111010111110110011101110";
        ram[56] = "0b00111010110110111100111011001000";
        ram[57] = "0b10111010101100100010000001111001";
        ram[58] = "0b00111001011010101110000110001011";
        ram[59] = "0b00111000100001000001111011011110";
        ram[60] = "0b10111010000100110001000000010011";
        ram[61] = "0b00111001101010100110010011000011";
        ram[62] = "0b10111000110100111100111111110110";
        ram[63] = "0b00111110010010111010001100000001";
        ram[64] = "0b00111010110000100011111110101011";
        ram[65] = "0b10111001111101111111110011111100";
        ram[66] = "0b00111000010001010010000111011110";
        ram[67] = "0b10111010010001010010000111011110";
        ram[68] = "0b00111110001010001011001111110110";
        ram[69] = "0b00111000100110110011000001110011";
        ram[70] = "0b00111110111111111001101011010000";
        ram[71] = "0b00111010100001001010010100010110";
        ram[72] = "0b00111111011000111100011000000000";
        ram[73] = "0b00111001111111111101101001000000";
        ram[74] = "0b00111010100010000010111100001110";
        ram[75] = "0b00111110000000000110100001010101";
        ram[76] = "0b10111010011010001000010110010000";
        ram[77] = "0b00111110111001101000110110010111";
        ram[78] = "0b00111110000000111000101101001000";
        ram[79] = "0b10111010101110001010111000110010";
        ram[80] = "0b00111001001110011001100100010011";
        ram[81] = "0b00111010100110001111011000000110";
        ram[82] = "0b00111110101011001001101111101001";
        ram[83] = "0b00111110111101010000001001101001";
        ram[84] = "0b00111110101011110010010011111011";
        ram[85] = "0b00111110011000110110111000101111";
        ram[86] = "0b00111110001011000011010111001110";
        ram[87] = "0b00111110100100100100110011000111";
        ram[88] = "0b00111110110000010010011110010001";
        ram[89] = "0b00111110001101101001011110101111";
        ram[90] = "0b00111110011110000000100011001000";
        ram[91] = "0b10111001011100100011100010010111";
        ram[92] = "0b00111111001101101010001101011001";
        ram[93] = "0b00111110100101001011111100001010";
        ram[94] = "0b00111010100010100100011111101101";
        ram[95] = "0b10111010001010100010000110100111";
        ram[96] = "0b00111111001010000101000000110111";
        ram[97] = "0b10111000100101101111111010110101";
        ram[98] = "0b00111110010100100101101110111000";
        ram[99] = "0b00111010001010111111011101101010";
        ram[100] = "0b00111110100001110011110100111010";
        ram[101] = "0b00111110101011010101001110101100";
        ram[102] = "0b00111010100000101010110111000101";
        ram[103] = "0b00111010001111101101011101000001";
        ram[104] = "0b10111001010001010010000111011110";
        ram[105] = "0b00111110110010111010000010000100";
        ram[106] = "0b00111010010111110101100011000001";
        ram[107] = "0b10111010110111010110000101110000";
        ram[108] = "0b10111010000010101110111110110011";
        ram[109] = "0b10111010100000001001010011100110";
        ram[110] = "0b00111110100011101011100011111010";
        ram[111] = "0b00111110101100111010100000111111";
        ram[112] = "0b00111001111111000010111010111010";
        ram[113] = "0b00111110111010000001100010000011";
        ram[114] = "0b00111110110110011111101100011110";
        ram[115] = "0b00111010000111100101010111000001";
        ram[116] = "0b00111110100101111111010000010011";
        ram[117] = "0b10111001101111000011100000101010";
        ram[118] = "0b00111110001000101111000000010111";
        ram[119] = "0b10111010101001000011101110110100";
        ram[120] = "0b00111001110001100010111001001101";
        ram[121] = "0b00111010001011100101001101100101";
        ram[122] = "0b00111111001111011010110100110010";
        ram[123] = "0b10111010001101101011011011100001";
        ram[124] = "0b00111111000011100110011100110000";
        ram[125] = "0b00111110010100111001000011001001";
        ram[126] = "0b00111010000010010001100111110000";
        ram[127] = "0b00111111000101010101011000001000";
        ram[128] = "0b00111110100111000000110111010100";
        ram[129] = "0b00111110101010101111110101010100";
        ram[130] = "0b00111111000000001000100101111111";
        ram[131] = "0b00111001100110111011011010101010";
        ram[132] = "0b10111000011101110111011011000101";
        ram[133] = "0b00111111010101110100110010110010";
        ram[134] = "0b10111001100110101010101000111011";
        ram[135] = "0b00111001000001010010101101001110";
        ram[136] = "0b00111010001011111010001011110000";
        ram[137] = "0b00111110111001101000001011111001";
        ram[138] = "0b00111111001010000101000110011000";
        ram[139] = "0b00111110100010111101001010110111";
        ram[140] = "0b00111111011110111110111110001101";
        ram[141] = "0b00111111010100010111010100111010";
        ram[142] = "0b10111001101111110101110101111001";
        ram[143] = "0b10111010001110101010010110000011";
        ram[144] = "0b00111001100101010110110000001101";
        ram[145] = "0b00111010010000010111011001010111";
        ram[146] = "0b00111001100011111010011110101000";
        ram[147] = "0b10111001111010010100111011100100";
        ram[148] = "0b10111010001111111010000010010100";
        ram[149] = "0b00111001110111010011111111100010";
        ram[150] = "0b10111001110100010011000011100000";
        ram[151] = "0b00111110101001011101000110000001";
        ram[152] = "0b00111010000010000101000010011100";
        ram[153] = "0b10111001100001010010101101001110";
        ram[154] = "0b00111110101010101000000100110100";
        ram[155] = "0b10111001011011110001001101001001";
        ram[156] = "0b00111110110100010101110110110011";
        ram[157] = "0b00111010001101111000000000110100";
        ram[158] = "0b00111110111111110001100001100101";
        ram[159] = "0b00111110111011110010111101010101";
        ram[160] = "0b00111111000100111100010100010101";
        ram[161] = "0b00111111000001110110011110110010";
        ram[162] = "0b00111010000111100001001010100101";
        ram[163] = "0b00111110111001111011011000110101";
        ram[164] = "0b00111000110110000000000110110100";
        ram[165] = "0b00111111000001101010011010001111";
        ram[166] = "0b00111111001011010001011101000000";
        ram[167] = "0b10111001110110100001101010010011";
        ram[168] = "0b10111001000101011111001001000101";
        ram[169] = "0b00111110111100001001001101110101";
        ram[170] = "0b10111010000100111001011001001010";
        ram[171] = "0b00111111000111000000100011111010";
        ram[172] = "0b00111010011110010100110010001000";
        ram[173] = "0b00111110111101011110101011001101";
        ram[174] = "0b00111110111110001001100000101101";
        ram[175] = "0b00111001101110100001111101001011";
        ram[176] = "0b10111000001000111001001111101110";
        ram[177] = "0b00111111000011110011000011000110";
        ram[178] = "0b00111001010001100010111001001101";
        ram[179] = "0b00111001111011000111010000110010";
        ram[180] = "0b00111111000101011101000101110000";
        ram[181] = "0b10111010000011100101100000011101";
        ram[182] = "0b00111000000101101111111010110101";
        ram[183] = "0b00111111000011010001011101000000";
        ram[184] = "0b00111001100100010011101001010000";
        ram[185] = "0b00111110100111110001001000011011";
        ram[186] = "0b10111001010111010011111111100010";
        ram[187] = "0b10110111100011101001101100111001";
        ram[188] = "0b00111001110010010101001110011100";
        for (unsigned i = 189; i < 195 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(predict_ensemble_bll) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 195;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


predict_ensemble_bll_ram* meminst;


SC_CTOR(predict_ensemble_bll) {
meminst = new predict_ensemble_bll_ram("predict_ensemble_bll_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~predict_ensemble_bll() {
    delete meminst;
}


};//endmodule
#endif
