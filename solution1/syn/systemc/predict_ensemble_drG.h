// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __predict_ensemble_drG_H__
#define __predict_ensemble_drG_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct predict_ensemble_drG_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 195;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(predict_ensemble_drG_ram) {
        ram[0] = "0b00111111010011011111011101100010";
        ram[1] = "0b00111101010011111101101100001010";
        ram[2] = "0b00111110110010110100111110100101";
        ram[3] = "0b10111001100010010101110100001011";
        ram[4] = "0b00111101100001000010011101000010";
        ram[5] = "0b00111001111110011000111110100011";
        ram[6] = "0b00111101110110001001100010110011";
        ram[7] = "0b00111110101110010011100011011110";
        ram[8] = "0b00111101100111011011110100110000";
        ram[9] = "0b00111101110010011000101000100010";
        ram[10] = "0b00111110110000011010110011011110";
        ram[11] = "0b00111000101001111100010110101100";
        ram[12] = "0b00111111000110111101010111011100";
        ram[13] = "0b00111001001000010111101100001111";
        ram[14] = "0b00111101001010101101100100100111";
        ram[15] = "0b00110101100001100011011110111101";
        ram[16] = "0b10111000100110010001011110010100";
        ram[17] = "0b00111000011111111101101001000000";
        ram[18] = "0b10110111011110111010100010000010";
        ram[19] = "0b10111000010101011110100011010101";
        ram[20] = "0b10111001011100010010110000101000";
        ram[21] = "0b00111000100010100110100101111011";
        ram[22] = "0b00111100001110101000100000100111";
        ram[23] = "0b10111000110100111100111111110110";
        ram[24] = "0b00111111011110000111011001111101";
        ram[25] = "0b00111111011011100101000000001101";
        ram[26] = "0b00111000100000100000010111111111";
        ram[27] = "0b00111101110100110000010110010110";
        ram[28] = "0b10111000010101011110100011010101";
        ram[29] = "0b00111101110010011000110101000111";
        ram[30] = "0b00111101111000010011000010011100";
        ram[31] = "0b00111111011011011000101001110110";
        ram[32] = "0b00111000100111110110001000110000";
        ram[33] = "0b10111000010000001111000000100000";
        ram[34] = "0b00111101101000110000010101010011";
        ram[35] = "0b00110111000001100011011110111101";
        ram[36] = "0b10110111001110001000110010100100";
        ram[37] = "0b00111111011100010001100001101110";
        ram[38] = "0b00111110000010110100001110010110";
        ram[39] = "0b10111000001110001000110010100100";
        ram[40] = "0b00110110000001100011011110111101";
        ram[41] = "0b00111101111101011100001000001001";
        ram[42] = "0b00111110010001011001010000101001";
        ram[43] = "0b00111111010011010001011001010101";
        ram[44] = "0b00111000100111110110001000110000";
        ram[45] = "0b10111000001010111111011101101010";
        ram[46] = "0b00111110001110010110011001111011";
        ram[47] = "0b00110111011110111010100010000010";
        ram[48] = "0b00111101110000001011000010101111";
        ram[49] = "0b00111111000101001011000100000011";
        ram[50] = "0b00111110010110100010010010001001";
        ram[51] = "0b00110101100001100011011110111101";
        ram[52] = "0b10110111000001100011011110111101";
        ram[53] = "0b00110111001001111100010110101100";
        ram[54] = "0b00111000100011101001101100111001";
        ram[55] = "0b10111000000100101100110011110111";
        ram[56] = "0b00111110100001001001101010111011";
        ram[57] = "0b00111110111011011000100101101010";
        ram[58] = "0b00111110000101001010010100010110";
        ram[59] = "0b00111000001100000010100100101000";
        ram[60] = "0b00111110100011001101010111011000";
        ram[61] = "0b10110111100001100011011110111101";
        ram[62] = "0b00111110100000100100110111110100";
        ram[63] = "0b10110111000101101111111010110101";
        ram[64] = "0b00111110101000110101110110101011";
        ram[65] = "0b00111110111000110111000110111001";
        ram[66] = "0b00111111010100001011000101000110";
        ram[67] = "0b00110111011010101110000110001011";
        ram[68] = "0b10110110100001100011011110111101";
        ram[69] = "0b00111110110110000011110110011011";
        ram[70] = "0b10111000000010100110100101111011";
        ram[71] = "0b00111110010010110110010101100111";
        ram[72] = "0b00110111111010101110000110001011";
        ram[73] = "0b00110101100001100011011110111101";
        ram[74] = "0b10000000000000000000000000000000";
        ram[75] = "0b00110111011110111010100010000010";
        ram[76] = "0b00111101111110001101111001101110";
        ram[77] = "0b10110111010110100001101010010011";
        ram[78] = "0b00111110000001100100010001010010";
        ram[79] = "0b00111111000101001101011010110010";
        ram[80] = "0b00111111010011101001111011010100";
        ram[81] = "0b00111111010110111001000100111111";
        ram[82] = "0b00110110000001100011011110111101";
        ram[83] = "0b00111111010101101010100001100101";
        ram[84] = "0b00110110111010101110000110001011";
        ram[85] = "0b10110111001110001000110010100100";
        ram[86] = "0b00111110110001001110000010011000";
        ram[87] = "0b00111111010000011111000100000110";
        ram[88] = "0b10110111010110100001101010010011";
        ram[89] = "0b00110101100001100011011110111101";
        ram[90] = "0b10110111001001111100010110101100";
        ram[91] = "0b00111110001011011101101000000110";
        ram[92] = "0b00110111000001100011011110111101";
        ram[93] = "0b00111111001111101000101110100000";
        ram[94] = "0b00111111010000010111010001100000";
        ram[95] = "0b00111111000110100110110111110000";
        ram[96] = "0b00110111010010010101001110011100";
        ram[97] = "0b00111111010001100110001000110101";
        ram[98] = "0b00111110011010010010100011100001";
        ram[99] = "0b00111111001000000110110010101001";
        ram[100] = "0b00110110100001100011011110111101";
        ram[101] = "0b00111111010010000011100111011110";
        ram[102] = "0b00110110101001111100010110101100";
        ram[103] = "0b00111111000011000000110011111010";
        ram[104] = "0b00111110100000000000110001010010";
        ram[105] = "0b00111110111101001101000010011010";
        ram[106] = "0b10110110100001100011011110111101";
        ram[107] = "0b00111110100000010001011000000001";
        ram[108] = "0b00110110110010010101001110011100";
        ram[109] = "0b00111110100100000011111000100001";
        ram[110] = "0b10110110101001111100010110101100";
        ram[111] = "0b10110110010010010101001110011100";
        ram[112] = "0b10110111001001111100010110101100";
        ram[113] = "0b10110110010010010101001110011100";
        ram[114] = "0b00110101100001100011011110111101";
        ram[115] = "0b00110110010010010101001110011100";
        ram[116] = "0b00111110010101001111111000110111";
        ram[117] = "0b00110110101001111100010110101100";
        ram[118] = "0b00110101100001100011011110111101";
        ram[119] = "0b00110110010010010101001110011100";
        ram[120] = "0b00111111001001011001011101001110";
        ram[121] = "0b00111110011010100000001010111000";
        ram[122] = "0b10110110010010010101001110011100";
        ram[123] = "0b10110110100001100011011110111101";
        ram[124] = "0b00111110100101111011010011100101";
        ram[125] = "0b10110110010010010101001110011100";
        ram[126] = "0b00111110101101010011010110000111";
        ram[127] = "0b00111110101001111101011110100001";
        ram[128] = "0b00111111001101100100100011101001";
        ram[129] = "0b00000000000000000000000000000000";
        ram[130] = "0b00110110101001111100010110101100";
        ram[131] = "0b00111111001101011101000101110000";
        ram[132] = "0b00110110000001100011011110111101";
        ram[133] = "0b00111111010101110111000010101100";
        ram[134] = "0b00111111001100101100001101000100";
        ram[135] = "0b00111111001101011111101010000111";
        ram[136] = "0b10110110000001100011011110111101";
        ram[137] = "0b00111110110000101110000010100000";
        ram[138] = "0b10110110100001100011011110111101";
        ram[139] = "0b00111111001011111110001000001101";
        ram[140] = "0b00111111000010100000100000111010";
        ram[141] = "0b10110101100001100011011110111101";
        ram[142] = "0b00000000000000000000000000000000";
        ram[143] = "0b00111110110111010000011001010111";
        ram[144] = "0b00111111001011111001010100101101";
        ram[145] = "0b10000000000000000000000000000000";
        ram[146] = "0b10110110000001100011011110111101";
        ram[147] = "0b00111110101010111100000101101010";
        ram[148] = "0b00111111000111100101110001001111";
        ram[149] = "0b00110110000001100011011110111101";
        ram[150] = "0b00000000000000000000000000000000";
        ram[151] = "0b10000000000000000000000000000000";
        ram[152] = "0b10110110000001100011011110111101";
        ram[153] = "0b00111110101010111011000010100011";
        ram[154] = "0b00111110100100011111110000001001";
        ram[155] = "0b00110110000001100011011110111101";
        ram[156] = "0b00111111001100000000000000000000";
        ram[157] = "0b00111111001000110111010100010000";
        ram[158] = "0b00111110111010011000101100101111";
        ram[159] = "0b00111110111001011101000110000001";
        ram[160] = "0b10110101100001100011011110111101";
        ram[161] = "0b00111110110101110100010111100001";
        ram[162] = "0b10110101100001100011011110111101";
        ram[163] = "0b10110110000001100011011110111101";
        ram[164] = "0b00111110110011111011011100100000";
        ram[165] = "0b00000000000000000000000000000000";
        ram[166] = "0b00110101100001100011011110111101";
        ram[167] = "0b10110101100001100011011110111101";
        ram[168] = "0b00111111001110101100011100110010";
        ram[169] = "0b00111111001001101001111001011110";
        ram[170] = "0b10000000000000000000000000000000";
        ram[171] = "0b00110110000001100011011110111101";
        ram[172] = "0b00111111000110101000111000101110";
        ram[173] = "0b10000000000000000000000000000000";
        ram[174] = "0b00000000000000000000000000000000";
        ram[175] = "0b00111111011000011010001110110001";
        ram[176] = "0b00110101100001100011011110111101";
        ram[177] = "0b00111110100101001100101000101110";
        ram[178] = "0b10110101100001100011011110111101";
        ram[179] = "0b10110101100001100011011110111101";
        ram[180] = "0b00111111010100000010011011011101";
        ram[181] = "0b00000000000000000000000000000000";
        ram[182] = "0b00110101100001100011011110111101";
        for (unsigned i = 183; i < 195 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(predict_ensemble_drG) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 195;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


predict_ensemble_drG_ram* meminst;


SC_CTOR(predict_ensemble_drG) {
meminst = new predict_ensemble_drG_ram("predict_ensemble_drG_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~predict_ensemble_drG() {
    delete meminst;
}


};//endmodule
#endif
