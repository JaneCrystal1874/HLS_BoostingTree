// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __predict_ensemble_bbk_H__
#define __predict_ensemble_bbk_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct predict_ensemble_bbk_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 195;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(predict_ensemble_bbk_ram) {
        ram[0] = "0b00111100111111110110001010110111";
        ram[1] = "0b00111011101000100100110011000111";
        ram[2] = "0b00111101011100001010011011111100";
        ram[3] = "0b10111011100100100010110110010101";
        ram[4] = "0b00111111010110111010001011110000";
        ram[5] = "0b00111111011110010011001100001001";
        ram[6] = "0b00111111010110111001000100111111";
        ram[7] = "0b00111101100011011111111001110110";
        ram[8] = "0b00111011010111001001100000011100";
        ram[9] = "0b00111110100101001100010101010100";
        ram[10] = "0b10111011101111110111011010100011";
        ram[11] = "0b00111111011100101010010000110011";
        ram[12] = "0b00111101110011100011110111100110";
        ram[13] = "0b00111010100000101111000011100001";
        ram[14] = "0b00111111001011111100010100110111";
        ram[15] = "0b00111110101110111100111111010101";
        ram[16] = "0b10111011111101100101000100101011";
        ram[17] = "0b00111111000001111010000011010111";
        ram[18] = "0b00111111011100100100110110110001";
        ram[19] = "0b10111010110011100010110100011111";
        ram[20] = "0b10111010001011001100000010111110";
        ram[21] = "0b00111011011010111101110100110011";
        ram[22] = "0b10111011001101110001101110001011";
        ram[23] = "0b00111110111100110000000101000011";
        ram[24] = "0b10111011001101111101010000010111";
        ram[25] = "0b00111101110011101010100101100001";
        ram[26] = "0b00111011001100001110000110110101";
        ram[27] = "0b00111011000111111111100100101111";
        ram[28] = "0b00111100010001011001101110000000";
        ram[29] = "0b00111111001001000110111011000001";
        ram[30] = "0b00111110010111100011110000010000";
        ram[31] = "0b00111011001011110001110010111001";
        ram[32] = "0b00111110000101011001100000011000";
        ram[33] = "0b00111110111111101100100010010011";
        ram[34] = "0b00111111010111000010011100100000";
        ram[35] = "0b00111010100000000011000000111100";
        ram[36] = "0b10110111100101101111111010110101";
        ram[37] = "0b10111011011010010010110101010110";
        ram[38] = "0b00111001001101111000000000110100";
        ram[39] = "0b00111110101000011100001011000010";
        ram[40] = "0b00111010110011101001000111001001";
        ram[41] = "0b00111111001110010110011001101011";
        ram[42] = "0b00111110001110101011111100110100";
        ram[43] = "0b00111111000110101010011010001111";
        ram[44] = "0b00111011001110101111100101100110";
        ram[45] = "0b10111010111110000100000000011000";
        ram[46] = "0b00111110010100001011111001010001";
        ram[47] = "0b00111011000000111111110101010000";
        ram[48] = "0b00111110010110101001100001100111";
        ram[49] = "0b00111011000010000001111001000111";
        ram[50] = "0b00111111011001001101000101000010";
        ram[51] = "0b10111010100101001010001010111010";
        ram[52] = "0b00111110010111001011100111101101";
        ram[53] = "0b00111111010010000011100111011110";
        ram[54] = "0b00111110101011010010000001001011";
        ram[55] = "0b10111001100011101001101100111001";
        ram[56] = "0b00111010101100011111111011101011";
        ram[57] = "0b00111111011011110101001011001010";
        ram[58] = "0b00111111010010100001011010110101";
        ram[59] = "0b00111010000000001111100110010000";
        ram[60] = "0b10111011100100101000000101110111";
        ram[61] = "0b00111111011010100001011101001100";
        ram[62] = "0b00111010110110111000101110101100";
        ram[63] = "0b10111011010000110111111001101111";
        ram[64] = "0b00111111011010001000010110110010";
        ram[65] = "0b00111111000110111101001111110110";
        ram[66] = "0b10111011000000110001001001101111";
        ram[67] = "0b00111110111111010111101101100011";
        ram[68] = "0b00111111001101110000110010011001";
        ram[69] = "0b00111110101010001000110001100001";
        ram[70] = "0b00111110000101010111001111101011";
        ram[71] = "0b00111010001010010101100001010011";
        ram[72] = "0b00111111011110000101000101100101";
        ram[73] = "0b00111010101111100010111101111011";
        ram[74] = "0b10111001100101001110010111010110";
        ram[75] = "0b00111110101001101110000010110001";
        ram[76] = "0b00111110011101000000010100101101";
        ram[77] = "0b00111011010000010001000110101110";
        ram[78] = "0b00111111010011011101111000000101";
        ram[79] = "0b00111111011010101101000000101101";
        ram[80] = "0b10111011000101010001100000101011";
        ram[81] = "0b00111110011101011000100001011101";
        ram[82] = "0b00111011000110100110011100011111";
        ram[83] = "0b10111011000000010110111100000000";
        ram[84] = "0b00111110101111000110001000011011";
        ram[85] = "0b00111110101110111111111000011001";
        ram[86] = "0b10111010101110001000110010100100";
        ram[87] = "0b00111110110111110111010000100101";
        ram[88] = "0b00111001001010111111011101101010";
        ram[89] = "0b00111110100101010010100101111000";
        ram[90] = "0b00111111001100101110100011000000";
        ram[91] = "0b00111010101100111101010010101110";
        ram[92] = "0b00111110110000000111101110011010";
        ram[93] = "0b00111011000010010011101101111110";
        ram[94] = "0b00111110111011011000101001110110";
        ram[95] = "0b00111111010110110111101000101101";
        ram[96] = "0b10111001100101011111001001000101";
        ram[97] = "0b10111010111010111100110001101100";
        ram[98] = "0b00111001101001100011001100000101";
        ram[99] = "0b00111110101001110101000101001000";
        ram[100] = "0b00111111000000100101111100100000";
        ram[101] = "0b10111010110111011010010010001011";
        ram[102] = "0b00111110100110110001110101010000";
        ram[103] = "0b00111110111111011110111010111011";
        ram[104] = "0b00111111001011111001101011110010";
        ram[105] = "0b10111010111111010111111001000110";
        ram[106] = "0b10111010100001100111101011011001";
        ram[107] = "0b00111110101100011011000010001010";
        ram[108] = "0b10111010110100000010010001110000";
        ram[109] = "0b00111110100010111101111101101110";
        ram[110] = "0b10111001111001100010100110010101";
        ram[111] = "0b00111010100000110011001111111101";
        ram[112] = "0b00111110000001110101100000011001";
        ram[113] = "0b10111010110000010111011001010111";
        ram[114] = "0b00111001100010100110100101111011";
        ram[115] = "0b00111111000110110010110100111100";
        ram[116] = "0b00111111000101100001100111001010";
        ram[117] = "0b00111110010110100101011001011000";
        ram[118] = "0b00111010100101111000010011101100";
        ram[119] = "0b00111010010101011110100011010101";
        ram[120] = "0b00111011000101001111011010011101";
        ram[121] = "0b00111101111101100010100001000110";
        ram[122] = "0b00111110000011010100110001110111";
        ram[123] = "0b00111011000010100011011100100110";
        ram[124] = "0b00111001110111001011100110101010";
        ram[125] = "0b00111110011011110101110111111111";
        ram[126] = "0b10111010100011010110110100111011";
        ram[127] = "0b00111110011111000111110000001111";
        ram[128] = "0b10111010010011010100001000111110";
        ram[129] = "0b00111111000011010110001000000111";
        ram[130] = "0b00111111001101110100010111010000";
        ram[131] = "0b00111010101110111001000001100100";
        ram[132] = "0b00111111001000011011010101100011";
        ram[133] = "0b00111111000100001001000100101010";
        ram[134] = "0b00111111001100111100011100011101";
        ram[135] = "0b10111000011100110100010100000111";
        ram[136] = "0b00111010100011000001110110110000";
        ram[137] = "0b00111011000000100111101101110000";
        ram[138] = "0b10111010001000110101000011010011";
        ram[139] = "0b10111011001101110110111101101101";
        ram[140] = "0b10111010111100011111010101111011";
        ram[141] = "0b00111110111100011100001110101101";
        ram[142] = "0b00111111001010000011100110001010";
        ram[143] = "0b00111010100011001110011100000100";
        ram[144] = "0b00111110110111111010111000110110";
        ram[145] = "0b00111111010000000000010000010000";
        ram[146] = "0b00111111001110011010010000010110";
        ram[147] = "0b00111110101110110110011111000011";
        ram[148] = "0b00111111001100000000000000000000";
        ram[149] = "0b00111010110011101111011001110011";
        ram[150] = "0b00111000110111000011001101110010";
        ram[151] = "0b00111010010100100011110101001111";
        ram[152] = "0b00111110111101111101000010001101";
        ram[153] = "0b10111001011101100110101001010101";
        ram[154] = "0b00111001111001110011011000000101";
        ram[155] = "0b10111010011011101101000000101101";
        ram[156] = "0b10111001011110001000001100110100";
        ram[157] = "0b00111110111000110001100010111001";
        ram[158] = "0b00111110110100010010111111110101";
        ram[159] = "0b00111110110110101001110001111000";
        ram[160] = "0b00111001101010111111011101101010";
        ram[161] = "0b10111000110010110110110001111010";
        ram[162] = "0b00111001111000111000101001111110";
        ram[163] = "0b00111111000000100100100100111101";
        ram[164] = "0b00111111000000000100000110111100";
        ram[165] = "0b00111010110000010011001100111100";
        ram[166] = "0b00111110110111110001000001100110";
        ram[167] = "0b10111010110001001011110100110100";
        ram[168] = "0b00111110111000111000111000101010";
        ram[169] = "0b10111011000011001010001111101000";
        ram[170] = "0b10111010001001000001101000100110";
        ram[171] = "0b00111110111100000010110110111110";
        ram[172] = "0b00111010000100000111000011111100";
        ram[173] = "0b00111110111111010001011101000000";
        ram[174] = "0b00111110111011001101000101000010";
        ram[175] = "0b10111001011110011000111110100011";
        ram[176] = "0b00111111000010100011101101011000";
        ram[177] = "0b00111010000101100011010101100001";
        ram[178] = "0b10111010101010101100100101101101";
        ram[179] = "0b00111010010101011010010110111001";
        ram[180] = "0b00111000111001001001011011101110";
        ram[181] = "0b10111010100001000110000111111010";
        ram[182] = "0b00111110111000001110100100101101";
        ram[183] = "0b10111010101111011100101011010001";
        ram[184] = "0b10111010000010111111110000100010";
        ram[185] = "0b00111001001100100100001000000111";
        ram[186] = "0b00111110110111011110001010001011";
        ram[187] = "0b10110111000101101111111010110101";
        ram[188] = "0b10111010000010001001001110111000";
        for (unsigned i = 189; i < 195 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(predict_ensemble_bbk) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 195;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


predict_ensemble_bbk_ram* meminst;


SC_CTOR(predict_ensemble_bbk) {
meminst = new predict_ensemble_bbk_ram("predict_ensemble_bbk_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~predict_ensemble_bbk() {
    delete meminst;
}


};//endmodule
#endif
