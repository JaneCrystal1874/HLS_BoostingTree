// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __predict_ensemble_1iI_H__
#define __predict_ensemble_1iI_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct predict_ensemble_1iI_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 195;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(predict_ensemble_1iI_ram) {
        ram[0] = "0b00111101010101111111000111111010";
        ram[1] = "0b00111110110011101011100110000000";
        ram[2] = "0b00111101011101100011101100100101";
        ram[3] = "0b00111010010010011001011010110111";
        ram[4] = "0b00111100000110011001110111001011";
        ram[5] = "0b00111110111101100100101110101001";
        ram[6] = "0b00111101100101111010010111110100";
        ram[7] = "0b10111011100001101000001100111100";
        ram[8] = "0b10111100010110110100110011000010";
        ram[9] = "0b00111100000101111100001111010111";
        ram[10] = "0b00111100010110000011100000111011";
        ram[11] = "0b00111110001000001101100101010001";
        ram[12] = "0b00111101101010100100000110100010";
        ram[13] = "0b00111011101000100100110011000111";
        ram[14] = "0b10111100011111110101100000111010";
        ram[15] = "0b00111100000010000110100111000110";
        ram[16] = "0b00111101110010011000110101000111";
        ram[17] = "0b00111111001000000000000000000000";
        ram[18] = "0b00111110000000111010111100110010";
        ram[19] = "0b00111011010010001101111000101011";
        ram[20] = "0b10111011111101101010110101110001";
        ram[21] = "0b10111011011111011111001110110110";
        ram[22] = "0b00111111011000011110010010010011";
        ram[23] = "0b00111110101110111011011100001111";
        ram[24] = "0b00111011011010111001101000010111";
        ram[25] = "0b00111110110100000010110110011101";
        ram[26] = "0b00111110110000100010001010110100";
        ram[27] = "0b00111111010001010011100011001110";
        ram[28] = "0b00111011100111000011010001111111";
        ram[29] = "0b00111110110010011010001010000011";
        ram[30] = "0b00111110110001101011111110000111";
        ram[31] = "0b00111111001100011110010000101110";
        ram[32] = "0b00111110101101001000110111000001";
        ram[33] = "0b10111011110010111110101001001111";
        ram[34] = "0b10111010101100010011010110011000";
        ram[35] = "0b00111011100110000100010111011101";
        ram[36] = "0b00111110000000000110100001010101";
        ram[37] = "0b00111101010111101110011001110101";
        ram[38] = "0b00111111000010000011101101001111";
        ram[39] = "0b00111010100100000111000011111100";
        ram[40] = "0b00111011011100110101010111001110";
        ram[41] = "0b00111101111000011111010110111110";
        ram[42] = "0b00111110000001100100010001010010";
        ram[43] = "0b10111011011100001011011010110111";
        ram[44] = "0b00111110110110000001011101010101";
        ram[45] = "0b00111110100010000100110101110111";
        ram[46] = "0b00111011100100110100101011001011";
        ram[47] = "0b00111101110110001101011110011101";
        ram[48] = "0b10111011111111010110110101111111";
        ram[49] = "0b00111011011000101100000100101011";
        ram[50] = "0b00111111011101001010101110110100";
        ram[51] = "0b00111110010101101111100110111010";
        ram[52] = "0b00111110101100111010111111111011";
        ram[53] = "0b00111011001100011011101111001111";
        ram[54] = "0b10111010010011001011110000000110";
        ram[55] = "0b10111010000010001001001110111000";
        ram[56] = "0b00111011000110101110110101010111";
        ram[57] = "0b00111111011010100111001001110101";
        ram[58] = "0b00111011000010110011001011001111";
        ram[59] = "0b00111011010101111010110111010001";
        ram[60] = "0b00111110011101001011100101000101";
        ram[61] = "0b00111111010001110100010111010000";
        ram[62] = "0b00111010110100000100010111111110";
        ram[63] = "0b00111111011100111001110011101001";
        ram[64] = "0b10111011000001010101110110100010";
        ram[65] = "0b10111010110010001100110101100100";
        ram[66] = "0b00111111000001010111001000110110";
        ram[67] = "0b00111110010001010010110001011010";
        ram[68] = "0b00111111010010100010111010010000";
        ram[69] = "0b00111111001110001011101000110000";
        ram[70] = "0b00111111000111011110111100110001";
        ram[71] = "0b00111111000100010000000010000010";
        ram[72] = "0b10111010001101101111100111111101";
        ram[73] = "0b00111110100001101101001011101101";
        ram[74] = "0b00111110010100010111100001110000";
        ram[75] = "0b10111011100011010101010000010001";
        ram[76] = "0b00111101111101011111100010010000";
        ram[77] = "0b00111110101110010100010001100111";
        ram[78] = "0b10111011000111011110000001010000";
        ram[79] = "0b10111010110101100010101111110001";
        ram[80] = "0b00111011100100110110001111110101";
        ram[81] = "0b00111011001101100011000010101001";
        ram[82] = "0b00111010100110101010101000111011";
        ram[83] = "0b00111010001111111010000010010100";
        ram[84] = "0b00111011000000110000000110101000";
        ram[85] = "0b10111011001101101011011011100001";
        ram[86] = "0b00111110011100100101011100000000";
        ram[87] = "0b10111011000011100110100011100100";
        ram[88] = "0b00111110011000111010011010001011";
        ram[89] = "0b00111111000111110100000101001010";
        ram[90] = "0b00111111011000001100111111110010";
        ram[91] = "0b00111010100001011111010010100001";
        ram[92] = "0b00111110100011110000001000011101";
        ram[93] = "0b00111010100010110011001011001111";
        ram[94] = "0b10111010010111001011100110101010";
        ram[95] = "0b00111110100011010000011101100100";
        ram[96] = "0b10111011001101101111100111111101";
        ram[97] = "0b00111110101010011000100010010000";
        ram[98] = "0b00111011000110101010101000111011";
        ram[99] = "0b00111110001011110010110000110000";
        ram[100] = "0b00111110100011001111011000010110";
        ram[101] = "0b00111001110111001011100110101010";
        ram[102] = "0b00111110100100000101111011100101";
        ram[103] = "0b10111010110110101100001001011001";
        ram[104] = "0b00111111011000100110010010100001";
        ram[105] = "0b10111001110000001111000000100000";
        ram[106] = "0b00111110100010101100110110011111";
        ram[107] = "0b00111110101100011011000010001010";
        ram[108] = "0b00111010001000111001001111101110";
        ram[109] = "0b00111110011011100010101110001100";
        ram[110] = "0b00111000100101101111111010110101";
        ram[111] = "0b00111111010010100110110101001000";
        ram[112] = "0b00111111011011010100101010010000";
        ram[113] = "0b10111010101100010001010000001010";
        ram[114] = "0b10111011000111011010110111111011";
        ram[115] = "0b10111010100000111011101000110100";
        ram[116] = "0b10111001000101101111111010110101";
        ram[117] = "0b10111010000100111001011001001010";
        ram[118] = "0b10111010111111000101000001001000";
        ram[119] = "0b00111110101111011010011001000000";
        ram[120] = "0b00111010110101011000010000101011";
        ram[121] = "0b10111010111101000101000101110110";
        ram[122] = "0b00111000001001111100010110101100";
        ram[123] = "0b00111110111000111101001101011111";
        ram[124] = "0b00111110110010111010000010000100";
        ram[125] = "0b10111001101011101001011010000001";
        ram[126] = "0b00111111000011110111001100111011";
        ram[127] = "0b10111010110101111001110100001010";
        ram[128] = "0b00111110110100101110011111110111";
        ram[129] = "0b00111011001011010101011110111100";
        ram[130] = "0b00111010100010010001100111110000";
        ram[131] = "0b00111010111111100110100100100111";
        ram[132] = "0b00111110110110000010101010111011";
        ram[133] = "0b00111110101000100010000000110110";
        ram[134] = "0b00111111011000011010100100010001";
        ram[135] = "0b10111001100110111011011010101010";
        ram[136] = "0b10111011001010010010010111111111";
        ram[137] = "0b00111111010001011110101010111100";
        ram[138] = "0b00111111001110111010100001100001";
        ram[139] = "0b00111110001010111010010111100011";
        ram[140] = "0b00111111000111001110001110111101";
        ram[141] = "0b00111111011011110111101111100001";
        ram[142] = "0b00111111000101111000110110110101";
        ram[143] = "0b10111010110100011011011100010111";
        ram[144] = "0b00111110011000110011000000001110";
        ram[145] = "0b00111010111111100100011110011001";
        ram[146] = "0b00111110110011010000101110110111";
        ram[147] = "0b00111110111111010010001010000101";
        ram[148] = "0b10111010111110010100110010001000";
        ram[149] = "0b10111001100011010000100010010010";
        ram[150] = "0b00111010000110011110000011100111";
        ram[151] = "0b00111111000100001001001101010011";
        ram[152] = "0b00111111010101100111011110000001";
        ram[153] = "0b00111010110110000010001101000010";
        ram[154] = "0b00111110111010000000111010101110";
        ram[155] = "0b10111010101000100100010001100011";
        ram[156] = "0b10111001011010001100100010101100";
        ram[157] = "0b10111001010011000111100011101010";
        ram[158] = "0b00111010110100001000100100011010";
        ram[159] = "0b00111110100100101000101010000011";
        ram[160] = "0b10111010011111100100011110011001";
        ram[161] = "0b10111010001101001110000100011110";
        ram[162] = "0b00111111000001110101001111010110";
        ram[163] = "0b00111110111101010110011011110001";
        ram[164] = "0b00111110101101001011010000000111";
        ram[165] = "0b00111010011010010000101111001000";
        ram[166] = "0b00111001101001010010011010010110";
        ram[167] = "0b10111001000110000000101100100100";
        ram[168] = "0b00111010011111000111000111010110";
        ram[169] = "0b00111111000011000111001011100010";
        ram[170] = "0b00111111000010111011011111101001";
        ram[171] = "0b00111010010010000100011100101100";
        ram[172] = "0b00111111001001111011001010101011";
        ram[173] = "0b00111111000001100111110000111001";
        ram[174] = "0b00111110110001001001011111111010";
        ram[175] = "0b10111010100111000101111001110000";
        ram[176] = "0b00111001010110010000111000100100";
        ram[177] = "0b00111111000000011011110110000100";
        ram[178] = "0b00111001101101101111100111111101";
        ram[179] = "0b10111001001101111000000000110100";
        ram[180] = "0b10111010111000001010100001001100";
        ram[181] = "0b10111010010111000011001101110010";
        ram[182] = "0b10111001101110101010010110000011";
        for (unsigned i = 183; i < 195 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(predict_ensemble_1iI) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 195;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


predict_ensemble_1iI_ram* meminst;


SC_CTOR(predict_ensemble_1iI) {
meminst = new predict_ensemble_1iI_ram("predict_ensemble_1iI_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~predict_ensemble_1iI() {
    delete meminst;
}


};//endmodule
#endif
