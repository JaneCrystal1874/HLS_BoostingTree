// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __predict_ensemble_dLJ_H__
#define __predict_ensemble_dLJ_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct predict_ensemble_dLJ_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 195;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(predict_ensemble_dLJ_ram) {
        ram[0] = "0b00111101101000111010000110010000";
        ram[1] = "0b00111101100011111100111001110100";
        ram[2] = "0b00111101101111110101101101100000";
        ram[3] = "0b00111101011110011110110011110110";
        ram[4] = "0b00111110110010010111000001010000";
        ram[5] = "0b10111111000000111110010110101000";
        ram[6] = "0b00111111001010100010100001000110";
        ram[7] = "0b00111101010111000100010101000110";
        ram[8] = "0b10111101100000000000110110100010";
        ram[9] = "0b00111111001000111101000100010100";
        ram[10] = "0b00111111000100010001100100010101";
        ram[11] = "0b00111100101111100111101011111010";
        ram[12] = "0b00111110010111101101110000111100";
        ram[13] = "0b00111110001110001001011001010111";
        ram[14] = "0b00111110110010111101000101100111";
        ram[15] = "0b00111110110101010011100110111001";
        ram[16] = "0b00111111001000101101001010111011";
        ram[17] = "0b10111110100110001011001011001000";
        ram[18] = "0b00111110101101010001101001100101";
        ram[19] = "0b10111110110011010101001101101001";
        ram[20] = "0b00111111000000101100101000100101";
        ram[21] = "0b00111110001100101000111011010110";
        ram[22] = "0b00111111001001011101100111100100";
        ram[23] = "0b00111111001001011101000101110000";
        ram[24] = "0b00111110010111010001011101000000";
        ram[25] = "0b00111110011110111001010100011100";
        ram[26] = "0b00111111000100100011011000011010";
        ram[27] = "0b10111101110010101010000110010100";
        ram[28] = "0b00111100010100100011110101001111";
        ram[29] = "0b10111110010101001110001001101101";
        ram[30] = "0b00111111001100101110100011000000";
        ram[31] = "0b00111110001010001011101001000001";
        ram[32] = "0b00111110100001001100111100000111";
        ram[33] = "0b00111111001010101111110110010111";
        ram[34] = "0b00111110100001000100110100100011";
        ram[35] = "0b00111111011001011000011010000111";
        ram[36] = "0b00111111000011010100011101101011";
        ram[37] = "0b10111101101001101110000010001111";
        ram[38] = "0b00111110111101110100101001110111";
        ram[39] = "0b10111011001110001110000010000111";
        ram[40] = "0b00111110100011110101001010111001";
        ram[41] = "0b10111110011011000101110111101010";
        ram[42] = "0b00111111010001111111001011010100";
        ram[43] = "0b00111110001101011000001010011001";
        ram[44] = "0b10111110010100010101000011011011";
        ram[45] = "0b00111110101101111111110101100001";
        ram[46] = "0b00111111010010011010100001001000";
        ram[47] = "0b00111111010111011111111100001101";
        ram[48] = "0b00111111000001011000011111101000";
        ram[49] = "0b10111110111100010010000011000000";
        ram[50] = "0b00111111001100000000000000000000";
        ram[51] = "0b10111101000100000100000011000000";
        ram[52] = "0b00111101010100110110011100011011";
        ram[53] = "0b00111111001011111111010001010110";
        ram[54] = "0b00111110000110100100011100100100";
        ram[55] = "0b00111111001100000000000000000000";
        ram[56] = "0b00111110000001010000101100001111";
        ram[57] = "0b00111110110001000100011110000000";
        ram[58] = "0b00111110010101001101011100101000";
        ram[59] = "0b00111111010010001101110110000011";
        ram[60] = "0b00111111001100101110100011000000";
        ram[61] = "0b00111110110100100110001110010101";
        ram[62] = "0b00111111000101000011110100100101";
        ram[63] = "0b00111111010010000111100001000010";
        ram[64] = "0b10111110010000001001111010011001";
        ram[65] = "0b10111101010101100001001111010011";
        ram[66] = "0b00111110100101001000010111000010";
        ram[67] = "0b10111110000010101011100010100110";
        ram[68] = "0b00111111001000011011010110000101";
        ram[69] = "0b00111110000111000110111100110111";
        ram[70] = "0b00111110011000111100111001100100";
        ram[71] = "0b00111111000101110100010111010000";
        ram[72] = "0b00111111000000100101001100000000";
        ram[73] = "0b00111101101111001000001000010111";
        ram[74] = "0b00111110110011000001011101000100";
        ram[75] = "0b10111100100011001001101110000100";
        ram[76] = "0b00111111000001001001100000101101";
        ram[77] = "0b10111110100000110011010001100001";
        ram[78] = "0b00111100111111111000101010001111";
        ram[79] = "0b00111111001001011111001011001011";
        ram[80] = "0b00111111000100100000110111111110";
        ram[81] = "0b00111101111011111001111010111111";
        ram[82] = "0b00111111001010110111011111000000";
        ram[83] = "0b00111110010011101101001011001100";
        ram[84] = "0b00111110001110000001111110010111";
        ram[85] = "0b00111110011111000101010110000110";
        ram[86] = "0b00111110100110110001110101010000";
        ram[87] = "0b10111110000111000101111001110000";
        ram[88] = "0b00111100101111110001111010001110";
        ram[89] = "0b00111110001110000000010010010110";
        ram[90] = "0b00111111011001110000101101111100";
        ram[91] = "0b00111110110001110011001101000100";
        ram[92] = "0b00111111000100010011000001111011";
        ram[93] = "0b10111101111010100110001100110000";
        ram[94] = "0b10111110101110101000111100011001";
        ram[95] = "0b00111111001000100101100010100011";
        ram[96] = "0b10111110000011111000101110011100";
        ram[97] = "0b00111110010011011011010101010010";
        ram[98] = "0b10111011011010000100001001110100";
        ram[99] = "0b10111101110010001111111000100110";
        ram[100] = "0b00111111001100101001011010010010";
        ram[101] = "0b00111101000111100111011101001111";
        ram[102] = "0b10111110010101000110011110111110";
        ram[103] = "0b00111110000001110011011111011010";
        ram[104] = "0b00111111000101001000110011000101";
        ram[105] = "0b10111101101011011101000011011001";
        ram[106] = "0b00111101110001000000011011000000";
        ram[107] = "0b00111110101101000101101011000100";
        ram[108] = "0b00111101111100010110100101111111";
        ram[109] = "0b00111110000011110101111111010100";
        ram[110] = "0b10111110001011110101101000010000";
        ram[111] = "0b00111110101100011110010100111011";
        ram[112] = "0b00111100010110111110001111000001";
        ram[113] = "0b00111101011101111111100011001011";
        ram[114] = "0b10111101000011100010000010001010";
        ram[115] = "0b00111110000000011100001000011010";
        ram[116] = "0b00111110001000000100100110101010";
        ram[117] = "0b10111101101000010011111011000100";
        ram[118] = "0b10111001000101101111111010110101";
        ram[119] = "0b00111110101100101101000111010000";
        ram[120] = "0b00111111000101100010101101001001";
        ram[121] = "0b00111001000111110110001000110000";
        ram[122] = "0b00111110000000001111010100011011";
        ram[123] = "0b10111101011100010110111000110111";
        ram[124] = "0b00111111000010110001110111100111";
        ram[125] = "0b00111110111111110011110000101110";
        ram[126] = "0b00111110100010110010111110001000";
        ram[127] = "0b00111110101111110001110000110010";
        ram[128] = "0b10111110110010010000101110100110";
        ram[129] = "0b00111101100011111101111010110101";
        ram[130] = "0b00111111000110010101001001001100";
        ram[131] = "0b00111111000110100100001000011000";
        ram[132] = "0b00111110110001011101000110000001";
        ram[133] = "0b10111110010001011011101010110010";
        ram[134] = "0b00111111000000111011101110000100";
        ram[135] = "0b10111100111001111111101100100110";
        ram[136] = "0b00111100101011011100010011001010";
        ram[137] = "0b00111110101100000101010111111100";
        ram[138] = "0b10111110001111001010101111000101";
        ram[139] = "0b00111111010110110111101000101101";
        ram[140] = "0b00111101111101001100011001100001";
        ram[141] = "0b00111110111101011110101011001101";
        ram[142] = "0b00111110111000000001101110101000";
        ram[143] = "0b10111100101100001110111001001010";
        ram[144] = "0b00111100111111100001110110101000";
        ram[145] = "0b10111101010010111011011111111010";
        ram[146] = "0b00111100001001100110000100101000";
        ram[147] = "0b00111110111100110011100010010011";
        ram[148] = "0b00111111000100101110100011000000";
        ram[149] = "0b00111110101110111011011110110111";
        ram[150] = "0b00111110111101000011011010010111";
        ram[151] = "0b00111111001010110111100111101010";
        ram[152] = "0b00111101110010010001100001011101";
        ram[153] = "0b10111110011000010110001000101000";
        ram[154] = "0b10111101100111000110000000000011";
        ram[155] = "0b00111110111011011111101110110101";
        ram[156] = "0b00111110110011110110011111010011";
        ram[157] = "0b00111110101110101110010011010010";
        ram[158] = "0b10111101110010011111100101001000";
        ram[159] = "0b00111110110110111100011110010011";
        ram[160] = "0b00111110111101010010011110000000";
        ram[161] = "0b00111101100111001100111100101001";
        ram[162] = "0b00111110111000011111010011010011";
        ram[163] = "0b00111110000010100110011110100101";
        ram[164] = "0b00111111000100010010111000110000";
        ram[165] = "0b10111110011001110001000001000101";
        ram[166] = "0b10111101100011100001001011101000";
        ram[167] = "0b00111101001101101000011110110001";
        ram[168] = "0b00111110011001001000111001000111";
        ram[169] = "0b00111110011101001101000011011101";
        ram[170] = "0b10111110000100111101011111010100";
        ram[171] = "0b10111100100101010100101010000000";
        ram[172] = "0b00111110101110111111011011000010";
        ram[173] = "0b10111101011111101010011100000101";
        ram[174] = "0b10111110101000011001000011010001";
        ram[175] = "0b00111100111110001011101111010100";
        ram[176] = "0b10111101001101111000100110100100";
        ram[177] = "0b00111101111001101100101000000100";
        ram[178] = "0b00111101001100000110110101010000";
        ram[179] = "0b10111101001011100000101100001011";
        ram[180] = "0b00111101000001100011111000001000";
        ram[181] = "0b00111100101001111111001111001111";
        ram[182] = "0b00111110001100001101110111000110";
        for (unsigned i = 183; i < 195 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(predict_ensemble_dLJ) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 195;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


predict_ensemble_dLJ_ram* meminst;


SC_CTOR(predict_ensemble_dLJ) {
meminst = new predict_ensemble_dLJ_ram("predict_ensemble_dLJ_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~predict_ensemble_dLJ() {
    delete meminst;
}


};//endmodule
#endif
