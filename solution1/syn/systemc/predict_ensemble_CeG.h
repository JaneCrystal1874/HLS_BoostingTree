// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __predict_ensemble_CeG_H__
#define __predict_ensemble_CeG_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct predict_ensemble_CeG_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 195;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(predict_ensemble_CeG_ram) {
        ram[0] = "0b00111111011000011100000110110101";
        ram[1] = "0b00111100010100011010011001010000";
        ram[2] = "0b00111100111111110110001010110111";
        ram[3] = "0b10111100111001101010000100011111";
        ram[4] = "0b00111101100111011011110100110000";
        ram[5] = "0b00111100111001101010000100011111";
        ram[6] = "0b00111111010000100001010001101010";
        ram[7] = "0b00111101011101100011101100100101";
        ram[8] = "0b00111101101001111010010110110001";
        ram[9] = "0b10111011111000100011101011110011";
        ram[10] = "0b00111100010011001101010100110000";
        ram[11] = "0b00111110111101101011011101000101";
        ram[12] = "0b00111110111101101000001101011110";
        ram[13] = "0b10111101010100110111001010100100";
        ram[14] = "0b00111101110011000001011111101100";
        ram[15] = "0b00111101011000001010010000011010";
        ram[16] = "0b10111101010100110100011110100110";
        ram[17] = "0b00111010001101001110000100011110";
        ram[18] = "0b00111101100011100101111111111010";
        ram[19] = "0b00111110111001101100101101010011";
        ram[20] = "0b00111101111101110010111001101010";
        ram[21] = "0b00111110100100111001110011111010";
        ram[22] = "0b00111100111101010111010011110111";
        ram[23] = "0b00111100110110000011111010000101";
        ram[24] = "0b10111011001001010110100110110001";
        ram[25] = "0b00111111000011111101011100001010";
        ram[26] = "0b00111101111111011111010000111100";
        ram[27] = "0b00111100010100110001001100111000";
        ram[28] = "0b10111100100000001111110111000001";
        ram[29] = "0b00111110110110011000011101000000";
        ram[30] = "0b00111100010100011001100110111011";
        ram[31] = "0b00111100010100110100110111110000";
        ram[32] = "0b00111110000000010101111111001100";
        ram[33] = "0b00110111010110100001101010010011";
        ram[34] = "0b10111100110110011100100011001001";
        ram[35] = "0b10111100010100011110110110011110";
        ram[36] = "0b00111111011110100101000101101110";
        ram[37] = "0b00111110001100001111110111000001";
        ram[38] = "0b00111100000100110011111000110110";
        ram[39] = "0b00111101111111100000001101110001";
        ram[40] = "0b00111101111000100111110110001001";
        ram[41] = "0b00111111000100101110100011000000";
        ram[42] = "0b10111100001000101011111000000110";
        ram[43] = "0b00111110000111110100100100000110";
        ram[44] = "0b00111110001100110000000000010101";
        ram[45] = "0b00111101101111001010100101101001";
        ram[46] = "0b00111011011010000010000011100110";
        ram[47] = "0b00111100010100111111000110000100";
        ram[48] = "0b00111011101110011000100001001100";
        ram[49] = "0b00111111000001001100100001000111";
        ram[50] = "0b00111110010011000101001110110001";
        ram[51] = "0b00000000000000000000000000000000";
        ram[52] = "0b10111100000000110000000110101000";
        ram[53] = "0b00111110001001011110001010001011";
        ram[54] = "0b10111100011111010101010001010100";
        ram[55] = "0b00111100010001101101101001000101";
        ram[56] = "0b00111110010110111101111100001001";
        ram[57] = "0b00111110111011000001111010011011";
        ram[58] = "0b10111100000000000110001010010001";
        ram[59] = "0b10111100000111111100011011011010";
        ram[60] = "0b00111110100010001010111010010111";
        ram[61] = "0b00111110000011011111101101010000";
        ram[62] = "0b10111011101010110001010011101100";
        ram[63] = "0b00111110100111100110111001100101";
        ram[64] = "0b00111110110101101011000001010011";
        ram[65] = "0b00111010011011100000011011011001";
        ram[66] = "0b00111011111000101111001110000000";
        ram[67] = "0b00111011110110100001001000110000";
        ram[68] = "0b00111111001100000000000000000000";
        ram[69] = "0b00111110101010011101110101011101";
        ram[70] = "0b00111110111001010011110101000011";
        ram[71] = "0b10111100010101110111111110101110";
        ram[72] = "0b10111011111000101000111011010110";
        ram[73] = "0b00111100110000110010001000101001";
        ram[74] = "0b00111110110110110111100000100101";
        ram[75] = "0b00111110101110011111011000000001";
        ram[76] = "0b00111110111010000011000111001111";
        ram[77] = "0b00111110101101001110110000100000";
        ram[78] = "0b00111100010111111111001111110001";
        ram[79] = "0b10111010110010001000101001001000";
        ram[80] = "0b10111100010001010101100001100100";
        ram[81] = "0b00111100001111010101110111000100";
        ram[82] = "0b00111110110110010000110011010100";
        ram[83] = "0b10111100001001100010101010100010";
        ram[84] = "0b00111110100111100110100011000010";
        ram[85] = "0b00111111001000101100010011010110";
        ram[86] = "0b00111110111001000011110010011111";
        ram[87] = "0b00111110110000010011001011010111";
        ram[88] = "0b00111110111111100100010111100101";
        ram[89] = "0b00111111010110111001011110011010";
        ram[90] = "0b10111100001111010110011000100111";
        ram[91] = "0b00111111000000111010111011101111";
        ram[92] = "0b00111111010111101101010101111100";
        ram[93] = "0b10111001100101010110110000001101";
        ram[94] = "0b00111111000001110101001101110010";
        ram[95] = "0b00111110100000010101101000101001";
        ram[96] = "0b00111110100010110101011111100110";
        ram[97] = "0b00111110111110100010101110111111";
        ram[98] = "0b00111100010000010011001100111100";
        ram[99] = "0b00111011000000001111100110010000";
        ram[100] = "0b00111100100011110001110100111111";
        ram[101] = "0b00111110111010000101111000111110";
        ram[102] = "0b10111100010010000100111110010000";
        ram[103] = "0b00111111001000111011010000111110";
        ram[104] = "0b00111100010000001010100011010010";
        ram[105] = "0b00111110111110110010010001100100";
        ram[106] = "0b10111011111000111111011110001100";
        ram[107] = "0b00111011110110001100101100001000";
        ram[108] = "0b00111010110100111111000110000100";
        ram[109] = "0b00111111000001100111001000110010";
        ram[110] = "0b10111011111110001011110111101100";
        ram[111] = "0b10111100000001011111100011010011";
        ram[112] = "0b00111110111100011100001110101101";
        ram[113] = "0b00111011011101011110010000011101";
        ram[114] = "0b00111011111101010001001001100110";
        ram[115] = "0b10111011011011001011011101001110";
        ram[116] = "0b00111110111000011010001111110100";
        ram[117] = "0b00111011101010001111110000001101";
        ram[118] = "0b10111011010001100000110010111111";
        ram[119] = "0b00111111000001100101101111111011";
        ram[120] = "0b00111110111100111101010100110100";
        ram[121] = "0b10111011000011000011111100111110";
        ram[122] = "0b00111011101011110000101111110010";
        ram[123] = "0b00111010111010110110011111000011";
        ram[124] = "0b00111100010000100111111010010101";
        ram[125] = "0b10111100000111110001011010110001";
        ram[126] = "0b00111110101110010010110010101110";
        ram[127] = "0b10111011111010111111011001011110";
        ram[128] = "0b00111111000111010100011010110010";
        ram[129] = "0b00111110001100000011111010100111";
        ram[130] = "0b00111111010110001100101101001011";
        ram[131] = "0b10111010101001101101101011001011";
        ram[132] = "0b00111110101000000000000000000000";
        ram[133] = "0b00111111010011000011101100111111";
        ram[134] = "0b10111011110000101000001011000111";
        ram[135] = "0b00111100001010010001000100000110";
        ram[136] = "0b00111111000001011101000101110000";
        ram[137] = "0b00111111010010010110100110100001";
        ram[138] = "0b00111100001100100010110100001110";
        ram[139] = "0b00111111000011010110100100111100";
        ram[140] = "0b00111011111110110101110100000011";
        ram[141] = "0b00111111001011011010100110000110";
        ram[142] = "0b00111111000001000100110000100111";
        ram[143] = "0b00111011100001011011100111101001";
        ram[144] = "0b10111011001011001110001001001100";
        ram[145] = "0b00111110101001100110101001110111";
        ram[146] = "0b00111110111000111010000011000111";
        ram[147] = "0b00111111010010001101101001101110";
        ram[148] = "0b00111100001110011101011111111110";
        ram[149] = "0b00111111001100101101010010000000";
        ram[150] = "0b10111100000010001100101000111110";
        ram[151] = "0b00111011101100001111101011011111";
        ram[152] = "0b00111111000110110110101111010011";
        ram[153] = "0b00111110110101000011010100100110";
        ram[154] = "0b10111100000100110111000010001011";
        ram[155] = "0b00111010100100010011101001010000";
        ram[156] = "0b10111011101100111110110111011001";
        ram[157] = "0b00111111010000101010010111000110";
        ram[158] = "0b00111111000111000111000111000101";
        ram[159] = "0b00111011101010100000100001111101";
        ram[160] = "0b00111111000010110100101011111101";
        ram[161] = "0b00111111010000000000000000000000";
        ram[162] = "0b00111111000111100011001111001110";
        ram[163] = "0b10111011111100100111101110110011";
        ram[164] = "0b10111011000111001111010101101111";
        ram[165] = "0b10111011001010110001110101010000";
        ram[166] = "0b00111011100101000001010000011111";
        ram[167] = "0b00111010101001010110100110110001";
        ram[168] = "0b00111011110111100000000011010010";
        ram[169] = "0b00111111000110111011011000000011";
        ram[170] = "0b00111111001100101110001111100111";
        ram[171] = "0b00111111001001001010101010010111";
        ram[172] = "0b00111011011000100011101011110011";
        ram[173] = "0b10111100001100100111100010001110";
        ram[174] = "0b10111010100100110001000000010011";
        ram[175] = "0b00111111011010001000011111111101";
        ram[176] = "0b00111111010001000000000111110111";
        ram[177] = "0b00111111001111011100001100000101";
        ram[178] = "0b10111010101011111010001011110000";
        ram[179] = "0b10111011100000110000101000001011";
        ram[180] = "0b00111011010100011111101000110011";
        ram[181] = "0b10111011001100000001100001100001";
        ram[182] = "0b10111011111110000100000000011000";
        for (unsigned i = 183; i < 195 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(predict_ensemble_CeG) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 195;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


predict_ensemble_CeG_ram* meminst;


SC_CTOR(predict_ensemble_CeG) {
meminst = new predict_ensemble_CeG_ram("predict_ensemble_CeG_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~predict_ensemble_CeG() {
    delete meminst;
}


};//endmodule
#endif
