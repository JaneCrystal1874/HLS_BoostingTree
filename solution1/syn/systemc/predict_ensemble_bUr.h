// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __predict_ensemble_bUr_H__
#define __predict_ensemble_bUr_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct predict_ensemble_bUr_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 195;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(predict_ensemble_bUr_ram) {
        ram[0] = "0b00111110000111010001011101000000";
        ram[1] = "0b00111110111110001011011010110111";
        ram[2] = "0b00111100010110000011100000111011";
        ram[3] = "0b00111110111110001100000000100111";
        ram[4] = "0b00111011010101100100110101111111";
        ram[5] = "0b10111011000010101010110010010111";
        ram[6] = "0b00111101010011011011010010001001";
        ram[7] = "0b00111001100111111110100001101000";
        ram[8] = "0b00111110101100000101010101110101";
        ram[9] = "0b00111010000011001100010101110110";
        ram[10] = "0b00111111011110010011001100001001";
        ram[11] = "0b10111010000011110110010010001100";
        ram[12] = "0b00111110111111100101110011110110";
        ram[13] = "0b00111101100010110001000000110100";
        ram[14] = "0b10111010001101001110000100011110";
        ram[15] = "0b10111000011100110100010100000111";
        ram[16] = "0b00111000101000111001001111101110";
        ram[17] = "0b00111010000011000011111100111110";
        ram[18] = "0b00111111011011000111011011110011";
        ram[19] = "0b00111111011000001011100111101101";
        ram[20] = "0b10111010000011011000111011001001";
        ram[21] = "0b00111111011101100101011000010101";
        ram[22] = "0b00111010001110101110100010011111";
        ram[23] = "0b00111101011000001010010000011010";
        ram[24] = "0b10111001101111101101011101000001";
        ram[25] = "0b10111001110011000111100011101010";
        ram[26] = "0b00111110000111110101010100010101";
        ram[27] = "0b00111001100010111111110000100010";
        ram[28] = "0b00111110000101011010100010011100";
        ram[29] = "0b00111001100111111110100001101000";
        ram[30] = "0b00111111011100110010000010000110";
        ram[31] = "0b00111101110010101110100111101110";
        ram[32] = "0b00111110111111000001101010101100";
        ram[33] = "0b00111110110010010101011101101001";
        ram[34] = "0b00111111010101111010001001011001";
        ram[35] = "0b00111110111001110110000000111001";
        ram[36] = "0b00111110111111111101100111111101";
        ram[37] = "0b10111010001010110111000100110010";
        ram[38] = "0b00111110110111000001001110111010";
        ram[39] = "0b00111111011010000010011111111010";
        ram[40] = "0b10111001100011010000100010010010";
        ram[41] = "0b00111001100001000001111011011110";
        ram[42] = "0b00111010011001111111111101011000";
        ram[43] = "0b10111001110001010010000111011110";
        ram[44] = "0b00111111011101010101000000100010";
        ram[45] = "0b00111001000110010001011110010100";
        ram[46] = "0b10111001001110001000110010100100";
        ram[47] = "0b00111110011001111000110110010011";
        ram[48] = "0b00111001100010000101000010011100";
        ram[49] = "0b00111001010000110000100011111111";
        ram[50] = "0b10111001000111100101010111000001";
        ram[51] = "0b00111111010110111010001011110000";
        ram[52] = "0b00111111010101000101110100010000";
        ram[53] = "0b00111110011000010011010100010001";
        ram[54] = "0b00111001101010011101111010001011";
        ram[55] = "0b00111110100010000010011000000011";
        ram[56] = "0b10111010000111111010010101001100";
        ram[57] = "0b00111110010010110100001011001100";
        ram[58] = "0b00111001100100001011010000011000";
        ram[59] = "0b00111110011011110011111100010000";
        ram[60] = "0b00111111011000100100000010010110";
        ram[61] = "0b00111111001000110011011111011010";
        ram[62] = "0b00111111000100111000111101111010";
        ram[63] = "0b10110110111010101110000110001011";
        ram[64] = "0b00111001010010000100011100101100";
        ram[65] = "0b00111101101000111110111110101110";
        ram[66] = "0b10111001000101001110010111010110";
        ram[67] = "0b00111101111000111101111001100001";
        ram[68] = "0b10111001010001000001010101101110";
        ram[69] = "0b00111110100100111011000110001110";
        ram[70] = "0b10111001000110110011000001110011";
        ram[71] = "0b00111001010010100110000000001011";
        ram[72] = "0b00111111011011011011001100111001";
        ram[73] = "0b00111000100111110110001000110000";
        ram[74] = "0b10110111110010010101001110011100";
        ram[75] = "0b00111111000010111111000100001111";
        ram[76] = "0b10111000110110000000000110110100";
        ram[77] = "0b00111110011000101110100011000000";
        ram[78] = "0b10111001000100101100110011110111";
        ram[79] = "0b00111110100001111010110010000010";
        ram[80] = "0b00111001001100100100001000000111";
        ram[81] = "0b00111110111010000000010110100011";
        ram[82] = "0b00111110101100001100111001001111";
        ram[83] = "0b00111110100010111101010100010011";
        ram[84] = "0b00111110001010110001001101011001";
        ram[85] = "0b10111001001110111011000111110010";
        ram[86] = "0b00110111010010010101001110011100";
        ram[87] = "0b00111000101111001011111001100010";
        ram[88] = "0b00111111010001000111101011000000";
        ram[89] = "0b00111001001001011010110011001101";
        ram[90] = "0b00110111110100011011011100010111";
        ram[91] = "0b10111000011110111010100010000010";
        ram[92] = "0b00111110001101110011000001000000";
        ram[93] = "0b00111111001111110011100110001111";
        ram[94] = "0b10111000110110100001101010010011";
        ram[95] = "0b00111000100011101001101100111001";
        ram[96] = "0b00111110111010100110101101110010";
        ram[97] = "0b00111101111100010000010011010101";
        ram[98] = "0b00111001000010000101000010011100";
        ram[99] = "0b00110111100001100011011110111101";
        ram[100] = "0b10110111111010101110000110001011";
        ram[101] = "0b00111110111100101111010100010010";
        ram[102] = "0b00111111001001010000010011010101";
        ram[103] = "0b10110111101110001000110010100100";
        ram[104] = "0b10111000111101110111011011000101";
        ram[105] = "0b00111111000110100110010111110001";
        ram[106] = "0b00111110110100001100000010101101";
        ram[107] = "0b00111110101110110101101110110100";
        ram[108] = "0b00111110010010110011000101111111";
        ram[109] = "0b00111111001101001011110111011100";
        ram[110] = "0b00111111000101111101101101011110";
        ram[111] = "0b00111110110000100100000000110001";
        ram[112] = "0b00111110001011000101110100100000";
        ram[113] = "0b10111001000001100011011110111101";
        ram[114] = "0b10110111110110100001101010010011";
        ram[115] = "0b00111110111010111100010101011000";
        ram[116] = "0b10111000011110111010100010000010";
        ram[117] = "0b00111110001011010101011011110011";
        ram[118] = "0b00111000110110100001101010010011";
        ram[119] = "0b00111110111100111001011110111011";
        ram[120] = "0b00111001010010000100011100101100";
        ram[121] = "0b00111110000001011111101111111000";
        ram[122] = "0b00111110001100101011010101011111";
        ram[123] = "0b00111000101010011101111010001011";
        ram[124] = "0b10110110111010101110000110001011";
        ram[125] = "0b00111000101000010111101100001111";
        ram[126] = "0b00110111110000001111000000100000";
        ram[127] = "0b00111110100011000011101001100100";
        ram[128] = "0b10111000011010101110000110001011";
        ram[129] = "0b10111001001001001010000001011110";
        ram[130] = "0b00111111000010100010110000100011";
        ram[131] = "0b00111000110100011011011100010111";
        ram[132] = "0b00111111010010111111011011000010";
        ram[133] = "0b10110111100001100011011110111101";
        ram[134] = "0b00111000001100000010100100101000";
        ram[135] = "0b00110111100101101111111010110101";
        ram[136] = "0b10111001000001000001111011011110";
        ram[137] = "0b00111111010001101001101101011010";
        ram[138] = "0b10111000100000100000010111111111";
        ram[139] = "0b00111111001110110100111000010010";
        ram[140] = "0b00111000110001010010000111011110";
        ram[141] = "0b00111111001110000110101100010110";
        ram[142] = "0b10111000100111110110001000110000";
        ram[143] = "0b00111110101110110011110111110011";
        ram[144] = "0b00111000111000000110010100110000";
        ram[145] = "0b00111111000101000100111010000011";
        ram[146] = "0b00111110110001111110111000001011";
        ram[147] = "0b10110111010110100001101010010011";
        ram[148] = "0b10111000101111001011111001100010";
        ram[149] = "0b00111000011110111010100010000010";
        ram[150] = "0b00111110110111101110011001110101";
        ram[151] = "0b00111110111100000000111111111110";
        ram[152] = "0b00111111000001001111001100110100";
        ram[153] = "0b00111111001100110000000101110101";
        ram[154] = "0b10111000100110110011000001110011";
        ram[155] = "0b00111110110100011011011111100001";
        ram[156] = "0b00111110111001101100110101101100";
        ram[157] = "0b00111111000000101100101110100111";
        ram[158] = "0b00110111110100011011011100010111";
        ram[159] = "0b10110111110100011011011100010111";
        ram[160] = "0b00111110111111001100011101101101";
        ram[161] = "0b10111000101100000010100100101000";
        ram[162] = "0b00111111000110000010110011010100";
        ram[163] = "0b10111000011011110001001101001001";
        ram[164] = "0b10110111010010010101001110011100";
        ram[165] = "0b00111110111100111100101100011101";
        ram[166] = "0b00111111011000101001110001100111";
        ram[167] = "0b10111000010111100100110001010001";
        ram[168] = "0b00111111001001100100101110111010";
        ram[169] = "0b00111110111101111110000000100110";
        ram[170] = "0b00111110110110110100110110001100";
        ram[171] = "0b00111000100011101001101100111001";
        ram[172] = "0b00110111101110001000110010100100";
        ram[173] = "0b00111111000001011101000101110000";
        ram[174] = "0b00111111001110111111111000001001";
        ram[175] = "0b00111110111000010101101001101100";
        ram[176] = "0b10110110010010010101001110011100";
        ram[177] = "0b00110111100001100011011110111101";
        ram[178] = "0b10110111101100000010100100101000";
        ram[179] = "0b00110111100111110110001000110000";
        ram[180] = "0b00111000011100110100010100000111";
        ram[181] = "0b00110111011010101110000110001011";
        ram[182] = "0b10111000000001100011011110111101";
        ram[183] = "0b00110111110010010101001110011100";
        ram[184] = "0b00111000010101011110100011010101";
        for (unsigned i = 185; i < 195 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(predict_ensemble_bUr) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 195;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


predict_ensemble_bUr_ram* meminst;


SC_CTOR(predict_ensemble_bUr) {
meminst = new predict_ensemble_bUr_ram("predict_ensemble_bUr_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~predict_ensemble_bUr() {
    delete meminst;
}


};//endmodule
#endif
