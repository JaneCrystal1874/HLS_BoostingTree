// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __predict_ensemble_cXB_H__
#define __predict_ensemble_cXB_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct predict_ensemble_cXB_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 195;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(predict_ensemble_cXB_ram) {
        ram[0] = "0b00111101010010110010010100101101";
        ram[1] = "0b00111001101100001010111101100000";
        ram[2] = "0b00111101100001000010011101000010";
        ram[3] = "0b00111110111110011100110101100000";
        ram[4] = "0b00111111011101110000001101101101";
        ram[5] = "0b00111111000011000100000001111101";
        ram[6] = "0b10111010000111001100001100011010";
        ram[7] = "0b00111100111101011001000000111010";
        ram[8] = "0b00111111001000010111010001100000";
        ram[9] = "0b10111001100010111111110000100010";
        ram[10] = "0b00111000100100001011010000011000";
        ram[11] = "0b10111001001110011001100100010011";
        ram[12] = "0b00111111010111101100110000011101";
        ram[13] = "0b00111001101111110101110101111001";
        ram[14] = "0b10110111111110111010100010000010";
        ram[15] = "0b00111111010110001100101101001011";
        ram[16] = "0b00111111001111000011111111100110";
        ram[17] = "0b00111101100111011011110100110000";
        ram[18] = "0b10111001010110010000111000100100";
        ram[19] = "0b00111001100011100001010100000001";
        ram[20] = "0b00111101110011111110100100110010";
        ram[21] = "0b10111000110111000011001101110010";
        ram[22] = "0b00111111011101100101011000010101";
        ram[23] = "0b10111001010100111100111111110110";
        ram[24] = "0b00111000111101010101110111100110";
        ram[25] = "0b00111111011011100101000000001101";
        ram[26] = "0b10111000101010011101111010001011";
        ram[27] = "0b00111101011110011110110011110110";
        ram[28] = "0b00111001000001000001111011011110";
        ram[29] = "0b00111101010001011001011001000010";
        ram[30] = "0b00111101100101001011110101110111";
        ram[31] = "0b10000000000000000000000000000000";
        ram[32] = "0b10111001000001110100010000101100";
        ram[33] = "0b00111001000011111010011110101000";
        ram[34] = "0b00111111010100111010010101111111";
        ram[35] = "0b00111111010001111101111100011010";
        ram[36] = "0b10111000100001000001111011011110";
        ram[37] = "0b00111110000011110101111111010100";
        ram[38] = "0b00111000001111001011111001100010";
        ram[39] = "0b00111110100101110000011111100001";
        ram[40] = "0b00111110000101010111110100011000";
        ram[41] = "0b00111000111010001100100010101100";
        ram[42] = "0b00111101101011110100000001011111";
        ram[43] = "0b10111000110110100001101010010011";
        ram[44] = "0b00111111011001001101000101000010";
        ram[45] = "0b00110111110010010101001110011100";
        ram[46] = "0b00111110101010111110111101101011";
        ram[47] = "0b00111111011110110110010101000101";
        ram[48] = "0b10111000000101101111111010110101";
        ram[49] = "0b10110111110000001111000000100000";
        ram[50] = "0b00111111000111110011101000000100";
        ram[51] = "0b00111110011101101100101010001010";
        ram[52] = "0b10110111110100011011011100010111";
        ram[53] = "0b00111111000000100001101011100111";
        ram[54] = "0b00110111000001100011011110111101";
        ram[55] = "0b00111111000001001100100010001010";
        ram[56] = "0b00111110010101010110011110011001";
        ram[57] = "0b00111110111111010101010110100100";
        ram[58] = "0b10110111011010101110000110001011";
        ram[59] = "0b00110111001001111100010110101100";
        ram[60] = "0b00110111111010101110000110001011";
        ram[61] = "0b00111111010011010001011101000000";
        ram[62] = "0b00111111010000011011111101111011";
        ram[63] = "0b00111110110010000111111011100001";
        ram[64] = "0b00111110111110000001001010111110";
        ram[65] = "0b10110111000101101111111010110101";
        ram[66] = "0b10111000000011101001101100111001";
        ram[67] = "0b00111111011001100011110110010010";
        ram[68] = "0b10110111110100011011011100010111";
        ram[69] = "0b10110110010010010101001110011100";
        ram[70] = "0b00110111011110111010100010000010";
        ram[71] = "0b00110101100001100011011110111101";
        ram[72] = "0b10110110101001111100010110101100";
        ram[73] = "0b00111111010101110001101011100011";
        ram[74] = "0b00110111110100011011011100010111";
        ram[75] = "0b00111111011000110100000000001100";
        ram[76] = "0b10110111101110001000110010100100";
        ram[77] = "0b00111111010101011111010100111000";
        ram[78] = "0b00111000000001100011011110111101";
        ram[79] = "0b00111110101010110100011111000111";
        ram[80] = "0b10110111100111110110001000110000";
        ram[81] = "0b00111110101000101101010011110110";
        ram[82] = "0b00111110000101001010010100010110";
        ram[83] = "0b00111110011101110100111100101111";
        ram[84] = "0b00111110110000000010001101100100";
        ram[85] = "0b10110111110100011011011100010111";
        ram[86] = "0b00111110100010011110010100011001";
        ram[87] = "0b00111110010100110111111110111111";
        ram[88] = "0b00111000000111110110001000110000";
        ram[89] = "0b00111111000001110101100010001110";
        ram[90] = "0b00110110110010010101001110011100";
        ram[91] = "0b00111111000010110011001010101101";
        ram[92] = "0b00111110101001001100000100100010";
        ram[93] = "0b00110111111100110100010100000111";
        ram[94] = "0b00110110010010010101001110011100";
        ram[95] = "0b10110111010110100001101010010011";
        ram[96] = "0b10110110010010010101001110011100";
        ram[97] = "0b00111110110001110100001111101001";
        ram[98] = "0b00111000010100011011011100010111";
        ram[99] = "0b00111110100101011001001001110101";
        ram[100] = "0b00111111001000000000011010001110";
        ram[101] = "0b00111101101010000110000001010111";
        ram[102] = "0b10110111110110100001101010010011";
        ram[103] = "0b00111110001101010111100111110010";
        ram[104] = "0b10111000000101101111111010110101";
        ram[105] = "0b00111110000000000000000000000000";
        ram[106] = "0b10110111101100000010100100101000";
        ram[107] = "0b10110111010010010101001110011100";
        ram[108] = "0b00111000010110100001101010010011";
        ram[109] = "0b00110111000101101111111010110101";
        ram[110] = "0b00111110100101000111000001000011";
        ram[111] = "0b00110111011110111010100010000010";
        ram[112] = "0b00111110011011011101001001101011";
        ram[113] = "0b10110111011010101110000110001011";
        ram[114] = "0b00111110100001001110101110111100";
        ram[115] = "0b10110111100101101111111010110101";
        ram[116] = "0b00111110100001100000111100111101";
        ram[117] = "0b10110101100001100011011110111101";
        ram[118] = "0b10110111000101101111111010110101";
        ram[119] = "0b00110111100001100011011110111101";
        ram[120] = "0b00111110101101001011010010101111";
        ram[121] = "0b10110111000101101111111010110101";
        ram[122] = "0b00111110101110001100100101010100";
        ram[123] = "0b00110111000101101111111010110101";
        ram[124] = "0b00111110110010111110111110101110";
        ram[125] = "0b00111110110101000001110000111111";
        ram[126] = "0b00111110111101110100010111100001";
        ram[127] = "0b10110111100101101111111010110101";
        ram[128] = "0b00111110101101110100010111100001";
        ram[129] = "0b00111110101111010010101011000111";
        ram[130] = "0b00111110001110000011101110100011";
        ram[131] = "0b10110110100001100011011110111101";
        ram[132] = "0b00111110110011001101011101001001";
        ram[133] = "0b00110111100001100011011110111101";
        ram[134] = "0b00111110111111100101110011110110";
        ram[135] = "0b00111111000001011110111100110001";
        ram[136] = "0b00111110001111110111000110101000";
        ram[137] = "0b00110110100001100011011110111101";
        ram[138] = "0b10110110010010010101001110011100";
        ram[139] = "0b00111110110010011001000011110011";
        ram[140] = "0b00111111000000111001011111101110";
        ram[141] = "0b00110101100001100011011110111101";
        ram[142] = "0b10110110111010101110000110001011";
        ram[143] = "0b00111111000110101100111001010111";
        ram[144] = "0b00111111001110101100001100110011";
        ram[145] = "0b00110110101001111100010110101100";
        ram[146] = "0b00111110111111000101000100010001";
        ram[147] = "0b00111110110010110011010011100111";
        ram[148] = "0b10110110000001100011011110111101";
        ram[149] = "0b00000000000000000000000000000000";
        ram[150] = "0b00110111001110001000110010100100";
        ram[151] = "0b00111111011001101011110101101111";
        ram[152] = "0b10110111000001100011011110111101";
        ram[153] = "0b00111111000110001000000000110000";
        ram[154] = "0b00110110100001100011011110111101";
        ram[155] = "0b10110101100001100011011110111101";
        ram[156] = "0b00110101100001100011011110111101";
        ram[157] = "0b00111110011000100100111000010110";
        ram[158] = "0b00110110110010010101001110011100";
        ram[159] = "0b00111110111101010000010110101111";
        ram[160] = "0b00110110100001100011011110111101";
        ram[161] = "0b00111111001010100010111010010000";
        ram[162] = "0b00111110100010001111110011010110";
        ram[163] = "0b10110110000001100011011110111101";
        ram[164] = "0b00110101100001100011011110111101";
        ram[165] = "0b00111111000011110111001100111011";
        ram[166] = "0b10110111000001100011011110111101";
        ram[167] = "0b00111111000101101001001011110111";
        ram[168] = "0b00111111001111010010001111000100";
        ram[169] = "0b00110110000001100011011110111101";
        ram[170] = "0b10110110000001100011011110111101";
        ram[171] = "0b00110111000101101111111010110101";
        ram[172] = "0b00110101100001100011011110111101";
        ram[173] = "0b00111111001000100000110000000111";
        ram[174] = "0b00111111001011101011001101010111";
        ram[175] = "0b00111111000010101011111001001001";
        ram[176] = "0b10110110100001100011011110111101";
        ram[177] = "0b10110101100001100011011110111101";
        ram[178] = "0b00110110010010010101001110011100";
        ram[179] = "0b00111111000000011111110011010010";
        ram[180] = "0b00111110111000001100100110111000";
        ram[181] = "0b10110101100001100011011110111101";
        ram[182] = "0b10110110010010010101001110011100";
        ram[183] = "0b10110110000001100011011110111101";
        ram[184] = "0b00111111001011000100010111011101";
        ram[185] = "0b00110101100001100011011110111101";
        ram[186] = "0b10110101100001100011011110111101";
        for (unsigned i = 187; i < 195 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(predict_ensemble_cXB) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 195;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


predict_ensemble_cXB_ram* meminst;


SC_CTOR(predict_ensemble_cXB) {
meminst = new predict_ensemble_cXB_ram("predict_ensemble_cXB_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~predict_ensemble_cXB() {
    delete meminst;
}


};//endmodule
#endif
