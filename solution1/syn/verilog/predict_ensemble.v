// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="predict_ensemble,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.762600,HLS_SYN_LAT=19357,HLS_SYN_TPT=none,HLS_SYN_MEM=56,HLS_SYN_DSP=2,HLS_SYN_FF=1158,HLS_SYN_LUT=1160,HLS_VERSION=2019_1}" *)

module predict_ensemble (
        ap_clk,
        ap_rst_n,
        feature_stream_V_TDATA,
        feature_stream_V_TVALID,
        feature_stream_V_TREADY,
        prediction_stream_V_TDATA,
        prediction_stream_V_TVALID,
        prediction_stream_V_TREADY,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_pp0_stage0 = 14'd16;
parameter    ap_ST_fsm_pp0_stage1 = 14'd32;
parameter    ap_ST_fsm_pp0_stage2 = 14'd64;
parameter    ap_ST_fsm_state9 = 14'd128;
parameter    ap_ST_fsm_state10 = 14'd256;
parameter    ap_ST_fsm_state11 = 14'd512;
parameter    ap_ST_fsm_state12 = 14'd1024;
parameter    ap_ST_fsm_state13 = 14'd2048;
parameter    ap_ST_fsm_state14 = 14'd4096;
parameter    ap_ST_fsm_state15 = 14'd8192;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] feature_stream_V_TDATA;
input   feature_stream_V_TVALID;
output   feature_stream_V_TREADY;
output  [31:0] prediction_stream_V_TDATA;
output   prediction_stream_V_TVALID;
input   prediction_stream_V_TREADY;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] feature_stream_V_0_data_out;
wire    feature_stream_V_0_vld_in;
wire    feature_stream_V_0_vld_out;
wire    feature_stream_V_0_ack_in;
reg    feature_stream_V_0_ack_out;
reg   [31:0] feature_stream_V_0_payload_A;
reg   [31:0] feature_stream_V_0_payload_B;
reg    feature_stream_V_0_sel_rd;
reg    feature_stream_V_0_sel_wr;
wire    feature_stream_V_0_sel;
wire    feature_stream_V_0_load_A;
wire    feature_stream_V_0_load_B;
reg   [1:0] feature_stream_V_0_state;
wire    feature_stream_V_0_state_cmp_full;
reg   [31:0] prediction_stream_V_1_data_out;
reg    prediction_stream_V_1_vld_in;
wire    prediction_stream_V_1_vld_out;
wire    prediction_stream_V_1_ack_in;
wire    prediction_stream_V_1_ack_out;
reg   [31:0] prediction_stream_V_1_payload_A;
reg   [31:0] prediction_stream_V_1_payload_B;
reg    prediction_stream_V_1_sel_rd;
reg    prediction_stream_V_1_sel_wr;
wire    prediction_stream_V_1_sel;
wire    prediction_stream_V_1_load_A;
wire    prediction_stream_V_1_load_B;
reg   [1:0] prediction_stream_V_1_state;
wire    prediction_stream_V_1_state_cmp_full;
wire   [11:0] LBoostTree_is_leaf_3_address0;
reg    LBoostTree_is_leaf_3_ce0;
wire   [0:0] LBoostTree_is_leaf_3_q0;
wire   [11:0] LBoostTree_is_leaf_0_address0;
reg    LBoostTree_is_leaf_0_ce0;
wire   [0:0] LBoostTree_is_leaf_0_q0;
wire   [11:0] LBoostTree_is_leaf_1_address0;
reg    LBoostTree_is_leaf_1_ce0;
wire   [0:0] LBoostTree_is_leaf_1_q0;
wire   [11:0] LBoostTree_is_leaf_2_address0;
reg    LBoostTree_is_leaf_2_ce0;
wire   [0:0] LBoostTree_is_leaf_2_q0;
wire   [11:0] LBoostTree_feature_i_address0;
reg    LBoostTree_feature_i_ce0;
wire   [3:0] LBoostTree_feature_i_q0;
wire   [11:0] LBoostTree_feature_i_3_address0;
reg    LBoostTree_feature_i_3_ce0;
wire   [3:0] LBoostTree_feature_i_3_q0;
wire   [11:0] LBoostTree_feature_i_2_address0;
reg    LBoostTree_feature_i_2_ce0;
wire   [3:0] LBoostTree_feature_i_2_q0;
wire   [11:0] LBoostTree_feature_i_1_address0;
reg    LBoostTree_feature_i_1_ce0;
wire   [3:0] LBoostTree_feature_i_1_q0;
wire   [11:0] LBoostTree_value_3_address0;
reg    LBoostTree_value_3_ce0;
wire   [31:0] LBoostTree_value_3_q0;
wire   [11:0] LBoostTree_value_0_address0;
reg    LBoostTree_value_0_ce0;
wire   [31:0] LBoostTree_value_0_q0;
wire   [11:0] LBoostTree_value_1_address0;
reg    LBoostTree_value_1_ce0;
wire   [31:0] LBoostTree_value_1_q0;
wire   [11:0] LBoostTree_value_2_address0;
reg    LBoostTree_value_2_ce0;
wire   [31:0] LBoostTree_value_2_q0;
wire   [11:0] LBoostTree_left_chil_3_address0;
reg    LBoostTree_left_chil_3_ce0;
wire   [7:0] LBoostTree_left_chil_3_q0;
wire   [11:0] LBoostTree_left_chil_2_address0;
reg    LBoostTree_left_chil_2_ce0;
wire   [7:0] LBoostTree_left_chil_2_q0;
wire   [11:0] LBoostTree_left_chil_1_address0;
reg    LBoostTree_left_chil_1_ce0;
wire   [7:0] LBoostTree_left_chil_1_q0;
wire   [11:0] LBoostTree_left_chil_address0;
reg    LBoostTree_left_chil_ce0;
wire   [7:0] LBoostTree_left_chil_q0;
wire   [11:0] LBoostTree_right_chi_3_address0;
reg    LBoostTree_right_chi_3_ce0;
wire   [7:0] LBoostTree_right_chi_3_q0;
wire   [11:0] LBoostTree_right_chi_2_address0;
reg    LBoostTree_right_chi_2_ce0;
wire   [7:0] LBoostTree_right_chi_2_q0;
wire   [11:0] LBoostTree_right_chi_1_address0;
reg    LBoostTree_right_chi_1_ce0;
wire   [7:0] LBoostTree_right_chi_1_q0;
wire   [11:0] LBoostTree_right_chi_address0;
reg    LBoostTree_right_chi_ce0;
wire   [7:0] LBoostTree_right_chi_q0;
reg    feature_stream_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln20_fu_566_p2;
reg    prediction_stream_V_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln27_fu_648_p2;
wire    ap_CS_fsm_state15;
reg   [7:0] curren_0_reg_525;
reg   [7:0] depth_0_reg_536;
reg    ap_block_state4_io;
wire    ap_CS_fsm_state9;
wire   [3:0] i_fu_572_p2;
reg   [3:0] i_reg_1093;
reg    ap_block_state2;
wire   [6:0] i_1_fu_654_p2;
reg   [6:0] i_1_reg_1109;
wire   [31:0] zext_ln5_fu_680_p1;
reg   [31:0] zext_ln5_reg_1114;
wire   [11:0] mul_ln1_fu_692_p2;
reg   [11:0] mul_ln1_reg_1120;
wire   [0:0] icmp_ln13_fu_698_p2;
reg   [0:0] icmp_ln13_reg_1125;
wire   [0:0] icmp_ln13_1_fu_704_p2;
reg   [0:0] icmp_ln13_1_reg_1132;
wire   [0:0] icmp_ln13_2_fu_710_p2;
reg   [0:0] icmp_ln13_2_reg_1137;
wire   [0:0] or_ln13_fu_716_p2;
reg   [0:0] or_ln13_reg_1144;
wire   [0:0] icmp_ln30_fu_722_p2;
reg   [0:0] icmp_ln30_reg_1150;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] depth_fu_728_p2;
reg   [7:0] depth_reg_1154;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln1_2_fu_743_p1;
reg   [63:0] zext_ln1_2_reg_1159;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state6_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] node_feature_index_V_fu_777_p3;
reg   [3:0] node_feature_index_V_reg_1267;
wire   [31:0] node_value_fu_798_p3;
reg   [31:0] node_value_reg_1272;
reg   [7:0] LBoostTree_left_chil_8_reg_1279;
reg   [7:0] LBoostTree_left_chil_9_reg_1284;
reg   [7:0] LBoostTree_left_chil_10_reg_1289;
reg   [7:0] LBoostTree_left_chil_11_reg_1294;
reg   [7:0] LBoostTree_right_chi_8_reg_1299;
reg   [7:0] LBoostTree_right_chi_9_reg_1304;
reg   [7:0] LBoostTree_right_chi_10_reg_1309;
reg   [7:0] LBoostTree_right_chi_11_reg_1314;
wire   [0:0] node_is_leaf_fu_819_p3;
reg   [0:0] node_is_leaf_reg_1319;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state7_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [7:0] node_left_child_V_fu_826_p6;
reg   [7:0] node_left_child_V_reg_1323;
wire   [7:0] node_right_child_V_fu_835_p6;
reg   [7:0] node_right_child_V_reg_1328;
wire   [31:0] fval_fu_888_p15;
wire   [0:0] icmp_ln39_fu_939_p2;
reg   [0:0] icmp_ln39_reg_1338;
wire   [0:0] icmp_ln39_1_fu_945_p2;
reg   [0:0] icmp_ln39_1_reg_1343;
wire   [7:0] select_ln39_fu_1002_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] grp_fu_547_p2;
reg   [31:0] sum_reg_1353;
wire    ap_CS_fsm_state12;
wire    ap_block_pp0_stage2_subdone;
reg    ap_predicate_tran7to9_state7;
reg    ap_condition_pp0_exit_iter0_state7;
wire   [3:0] ap_phi_mux_i_0_phi_fu_507_p4;
reg   [3:0] i_0_reg_503;
wire    ap_CS_fsm_state3;
reg   [6:0] i1_0_reg_514;
wire    ap_CS_fsm_state13;
reg   [7:0] ap_phi_mux_curren_0_phi_fu_529_p4;
wire    ap_block_pp0_stage0;
reg   [7:0] ap_phi_mux_depth_0_phi_fu_540_p4;
wire    ap_block_pp0_stage1;
reg   [31:0] tmp_fu_174;
wire    ap_block_pp0_stage2;
reg   [31:0] tmp_2_fu_178;
reg   [31:0] tmp_3_fu_182;
reg   [31:0] tmp_5_fu_186;
reg   [31:0] tmp_7_fu_190;
reg   [31:0] tmp_8_fu_194;
reg   [31:0] tmp_10_fu_198;
reg   [31:0] tmp_11_fu_202;
reg   [31:0] tmp_12_fu_206;
reg   [31:0] tmp_13_fu_210;
reg   [31:0] tmp_14_fu_214;
reg   [31:0] tmp_15_fu_218;
reg   [31:0] tmp_16_fu_222;
reg   [31:0] tmp_17_fu_226;
wire   [2:0] lshr_ln5_fu_660_p4;
wire   [3:0] trunc_ln1_fu_684_p1;
wire   [3:0] mul_ln1_fu_692_p1;
wire   [1:0] trunc_ln5_1_fu_670_p4;
wire   [11:0] zext_ln1_1_fu_734_p1;
wire   [11:0] add_ln1_fu_738_p2;
wire   [3:0] select_ln13_3_fu_763_p3;
wire   [3:0] select_ln13_4_fu_770_p3;
wire   [31:0] select_ln13_6_fu_784_p3;
wire   [31:0] select_ln13_7_fu_791_p3;
wire   [0:0] select_ln13_fu_805_p3;
wire   [0:0] select_ln13_1_fu_812_p3;
wire   [3:0] fval_fu_888_p14;
wire   [31:0] bitcast_ln39_fu_921_p1;
wire   [7:0] tmp_9_fu_925_p4;
wire   [22:0] trunc_ln39_fu_935_p1;
wire   [31:0] bitcast_ln39_1_fu_951_p1;
wire   [7:0] tmp_s_fu_954_p4;
wire   [22:0] trunc_ln39_1_fu_964_p1;
wire   [0:0] icmp_ln39_3_fu_978_p2;
wire   [0:0] icmp_ln39_2_fu_972_p2;
wire   [0:0] or_ln39_fu_968_p2;
wire   [0:0] or_ln39_1_fu_984_p2;
wire   [0:0] and_ln39_fu_990_p2;
wire   [0:0] grp_fu_551_p2;
wire   [0:0] and_ln39_1_fu_996_p2;
wire    ap_block_pp0_stage2_00001;
reg    ap_block_state15;
reg   [13:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [11:0] mul_ln1_fu_692_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 feature_stream_V_0_sel_rd = 1'b0;
#0 feature_stream_V_0_sel_wr = 1'b0;
#0 feature_stream_V_0_state = 2'd0;
#0 prediction_stream_V_1_sel_rd = 1'b0;
#0 prediction_stream_V_1_sel_wr = 1'b0;
#0 prediction_stream_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

predict_ensemble_bkb #(
    .DataWidth( 1 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_is_leaf_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_is_leaf_3_address0),
    .ce0(LBoostTree_is_leaf_3_ce0),
    .q0(LBoostTree_is_leaf_3_q0)
);

predict_ensemble_cud #(
    .DataWidth( 1 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_is_leaf_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_is_leaf_0_address0),
    .ce0(LBoostTree_is_leaf_0_ce0),
    .q0(LBoostTree_is_leaf_0_q0)
);

predict_ensemble_dEe #(
    .DataWidth( 1 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_is_leaf_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_is_leaf_1_address0),
    .ce0(LBoostTree_is_leaf_1_ce0),
    .q0(LBoostTree_is_leaf_1_q0)
);

predict_ensemble_eOg #(
    .DataWidth( 1 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_is_leaf_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_is_leaf_2_address0),
    .ce0(LBoostTree_is_leaf_2_ce0),
    .q0(LBoostTree_is_leaf_2_q0)
);

predict_ensemble_fYi #(
    .DataWidth( 4 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_feature_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_feature_i_address0),
    .ce0(LBoostTree_feature_i_ce0),
    .q0(LBoostTree_feature_i_q0)
);

predict_ensemble_g8j #(
    .DataWidth( 4 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_feature_i_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_feature_i_3_address0),
    .ce0(LBoostTree_feature_i_3_ce0),
    .q0(LBoostTree_feature_i_3_q0)
);

predict_ensemble_hbi #(
    .DataWidth( 4 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_feature_i_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_feature_i_2_address0),
    .ce0(LBoostTree_feature_i_2_ce0),
    .q0(LBoostTree_feature_i_2_q0)
);

predict_ensemble_ibs #(
    .DataWidth( 4 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_feature_i_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_feature_i_1_address0),
    .ce0(LBoostTree_feature_i_1_ce0),
    .q0(LBoostTree_feature_i_1_q0)
);

predict_ensemble_jbC #(
    .DataWidth( 32 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_value_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_value_3_address0),
    .ce0(LBoostTree_value_3_ce0),
    .q0(LBoostTree_value_3_q0)
);

predict_ensemble_kbM #(
    .DataWidth( 32 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_value_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_value_0_address0),
    .ce0(LBoostTree_value_0_ce0),
    .q0(LBoostTree_value_0_q0)
);

predict_ensemble_lbW #(
    .DataWidth( 32 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_value_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_value_1_address0),
    .ce0(LBoostTree_value_1_ce0),
    .q0(LBoostTree_value_1_q0)
);

predict_ensemble_mb6 #(
    .DataWidth( 32 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_value_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_value_2_address0),
    .ce0(LBoostTree_value_2_ce0),
    .q0(LBoostTree_value_2_q0)
);

predict_ensemble_ncg #(
    .DataWidth( 8 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_left_chil_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_left_chil_3_address0),
    .ce0(LBoostTree_left_chil_3_ce0),
    .q0(LBoostTree_left_chil_3_q0)
);

predict_ensemble_ocq #(
    .DataWidth( 8 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_left_chil_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_left_chil_2_address0),
    .ce0(LBoostTree_left_chil_2_ce0),
    .q0(LBoostTree_left_chil_2_q0)
);

predict_ensemble_pcA #(
    .DataWidth( 8 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_left_chil_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_left_chil_1_address0),
    .ce0(LBoostTree_left_chil_1_ce0),
    .q0(LBoostTree_left_chil_1_q0)
);

predict_ensemble_qcK #(
    .DataWidth( 8 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_left_chil_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_left_chil_address0),
    .ce0(LBoostTree_left_chil_ce0),
    .q0(LBoostTree_left_chil_q0)
);

predict_ensemble_rcU #(
    .DataWidth( 8 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_right_chi_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_right_chi_3_address0),
    .ce0(LBoostTree_right_chi_3_ce0),
    .q0(LBoostTree_right_chi_3_q0)
);

predict_ensemble_sc4 #(
    .DataWidth( 8 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_right_chi_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_right_chi_2_address0),
    .ce0(LBoostTree_right_chi_2_ce0),
    .q0(LBoostTree_right_chi_2_q0)
);

predict_ensemble_tde #(
    .DataWidth( 8 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_right_chi_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_right_chi_1_address0),
    .ce0(LBoostTree_right_chi_1_ce0),
    .q0(LBoostTree_right_chi_1_q0)
);

predict_ensemble_udo #(
    .DataWidth( 8 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_right_chi_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_right_chi_address0),
    .ce0(LBoostTree_right_chi_ce0),
    .q0(LBoostTree_right_chi_q0)
);

predict_ensemble_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
predict_ensemble_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

predict_ensemble_vdy #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
predict_ensemble_vdy_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_17_fu_226),
    .din1(node_value_reg_1272),
    .ce(1'b1),
    .dout(grp_fu_547_p2)
);

predict_ensemble_wdI #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
predict_ensemble_wdI_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(fval_fu_888_p15),
    .din1(node_value_reg_1272),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_551_p2)
);

predict_ensemble_xdS #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
predict_ensemble_xdS_U3(
    .din0(LBoostTree_left_chil_8_reg_1279),
    .din1(LBoostTree_left_chil_9_reg_1284),
    .din2(LBoostTree_left_chil_10_reg_1289),
    .din3(LBoostTree_left_chil_11_reg_1294),
    .din4(zext_ln5_reg_1114),
    .dout(node_left_child_V_fu_826_p6)
);

predict_ensemble_xdS #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
predict_ensemble_xdS_U4(
    .din0(LBoostTree_right_chi_8_reg_1299),
    .din1(LBoostTree_right_chi_9_reg_1304),
    .din2(LBoostTree_right_chi_10_reg_1309),
    .din3(LBoostTree_right_chi_11_reg_1314),
    .din4(zext_ln5_reg_1114),
    .dout(node_right_child_V_fu_835_p6)
);

predict_ensemble_yd2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
predict_ensemble_yd2_U5(
    .din0(tmp_fu_174),
    .din1(tmp_2_fu_178),
    .din2(tmp_3_fu_182),
    .din3(tmp_5_fu_186),
    .din4(tmp_7_fu_190),
    .din5(tmp_8_fu_194),
    .din6(tmp_10_fu_198),
    .din7(tmp_11_fu_202),
    .din8(tmp_12_fu_206),
    .din9(tmp_13_fu_210),
    .din10(tmp_14_fu_214),
    .din11(tmp_15_fu_218),
    .din12(tmp_16_fu_222),
    .din13(fval_fu_888_p14),
    .dout(fval_fu_888_p15)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln27_fu_648_p2 == 1'd0) & (1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state7);
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln27_fu_648_p2 == 1'd0) & (1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        feature_stream_V_0_sel_rd <= 1'b0;
    end else begin
        if (((feature_stream_V_0_ack_out == 1'b1) & (feature_stream_V_0_vld_out == 1'b1))) begin
            feature_stream_V_0_sel_rd <= ~feature_stream_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        feature_stream_V_0_sel_wr <= 1'b0;
    end else begin
        if (((feature_stream_V_0_ack_in == 1'b1) & (feature_stream_V_0_vld_in == 1'b1))) begin
            feature_stream_V_0_sel_wr <= ~feature_stream_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        feature_stream_V_0_state <= 2'd0;
    end else begin
        if ((((feature_stream_V_0_state == 2'd2) & (feature_stream_V_0_vld_in == 1'b0)) | ((feature_stream_V_0_state == 2'd3) & (feature_stream_V_0_vld_in == 1'b0) & (feature_stream_V_0_ack_out == 1'b1)))) begin
            feature_stream_V_0_state <= 2'd2;
        end else if ((((feature_stream_V_0_state == 2'd1) & (feature_stream_V_0_ack_out == 1'b0)) | ((feature_stream_V_0_state == 2'd3) & (feature_stream_V_0_ack_out == 1'b0) & (feature_stream_V_0_vld_in == 1'b1)))) begin
            feature_stream_V_0_state <= 2'd1;
        end else if (((~((feature_stream_V_0_vld_in == 1'b0) & (feature_stream_V_0_ack_out == 1'b1)) & ~((feature_stream_V_0_ack_out == 1'b0) & (feature_stream_V_0_vld_in == 1'b1)) & (feature_stream_V_0_state == 2'd3)) | ((feature_stream_V_0_state == 2'd1) & (feature_stream_V_0_ack_out == 1'b1)) | ((feature_stream_V_0_state == 2'd2) & (feature_stream_V_0_vld_in == 1'b1)))) begin
            feature_stream_V_0_state <= 2'd3;
        end else begin
            feature_stream_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        prediction_stream_V_1_sel_rd <= 1'b0;
    end else begin
        if (((prediction_stream_V_1_ack_out == 1'b1) & (prediction_stream_V_1_vld_out == 1'b1))) begin
            prediction_stream_V_1_sel_rd <= ~prediction_stream_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        prediction_stream_V_1_sel_wr <= 1'b0;
    end else begin
        if (((prediction_stream_V_1_ack_in == 1'b1) & (prediction_stream_V_1_vld_in == 1'b1))) begin
            prediction_stream_V_1_sel_wr <= ~prediction_stream_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        prediction_stream_V_1_state <= 2'd0;
    end else begin
        if ((((prediction_stream_V_1_state == 2'd2) & (prediction_stream_V_1_vld_in == 1'b0)) | ((prediction_stream_V_1_state == 2'd3) & (prediction_stream_V_1_vld_in == 1'b0) & (prediction_stream_V_1_ack_out == 1'b1)))) begin
            prediction_stream_V_1_state <= 2'd2;
        end else if ((((prediction_stream_V_1_state == 2'd1) & (prediction_stream_V_TREADY == 1'b0)) | ((prediction_stream_V_1_state == 2'd3) & (prediction_stream_V_TREADY == 1'b0) & (prediction_stream_V_1_vld_in == 1'b1)))) begin
            prediction_stream_V_1_state <= 2'd1;
        end else if (((~((prediction_stream_V_1_vld_in == 1'b0) & (prediction_stream_V_1_ack_out == 1'b1)) & ~((prediction_stream_V_TREADY == 1'b0) & (prediction_stream_V_1_vld_in == 1'b1)) & (prediction_stream_V_1_state == 2'd3)) | ((prediction_stream_V_1_state == 2'd1) & (prediction_stream_V_1_ack_out == 1'b1)) | ((prediction_stream_V_1_state == 2'd2) & (prediction_stream_V_1_vld_in == 1'b1)))) begin
            prediction_stream_V_1_state <= 2'd3;
        end else begin
            prediction_stream_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((node_is_leaf_reg_1319 == 1'd0) & (icmp_ln30_reg_1150 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        curren_0_reg_525 <= select_ln39_fu_1002_p3;
    end else if (((icmp_ln27_fu_648_p2 == 1'd0) & (1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4))) begin
        curren_0_reg_525 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((node_is_leaf_reg_1319 == 1'd0) & (icmp_ln30_reg_1150 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        depth_0_reg_536 <= depth_reg_1154;
    end else if (((icmp_ln27_fu_648_p2 == 1'd0) & (1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4))) begin
        depth_0_reg_536 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (icmp_ln20_fu_566_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_0_reg_514 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i1_0_reg_514 <= i_1_reg_1109;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_503 <= i_reg_1093;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_503 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_1150 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        tmp_17_fu_226 <= sum_reg_1353;
    end else if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (icmp_ln20_fu_566_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_17_fu_226 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_1150 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        LBoostTree_left_chil_10_reg_1289 <= LBoostTree_left_chil_1_q0;
        LBoostTree_left_chil_11_reg_1294 <= LBoostTree_left_chil_q0;
        LBoostTree_left_chil_8_reg_1279 <= LBoostTree_left_chil_3_q0;
        LBoostTree_left_chil_9_reg_1284 <= LBoostTree_left_chil_2_q0;
        LBoostTree_right_chi_10_reg_1309 <= LBoostTree_right_chi_1_q0;
        LBoostTree_right_chi_11_reg_1314 <= LBoostTree_right_chi_q0;
        LBoostTree_right_chi_8_reg_1299 <= LBoostTree_right_chi_3_q0;
        LBoostTree_right_chi_9_reg_1304 <= LBoostTree_right_chi_2_q0;
        node_feature_index_V_reg_1267 <= node_feature_index_V_fu_777_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        depth_reg_1154 <= depth_fu_728_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((feature_stream_V_0_load_A == 1'b1)) begin
        feature_stream_V_0_payload_A <= feature_stream_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((feature_stream_V_0_load_B == 1'b1)) begin
        feature_stream_V_0_payload_B <= feature_stream_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_1109 <= i_1_fu_654_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_1093 <= i_fu_572_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_648_p2 == 1'd0) & (1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln13_1_reg_1132 <= icmp_ln13_1_fu_704_p2;
        icmp_ln13_2_reg_1137 <= icmp_ln13_2_fu_710_p2;
        icmp_ln13_reg_1125 <= icmp_ln13_fu_698_p2;
        mul_ln1_reg_1120 <= mul_ln1_fu_692_p2;
        or_ln13_reg_1144 <= or_ln13_fu_716_p2;
        zext_ln5_reg_1114[2 : 0] <= zext_ln5_fu_680_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln30_reg_1150 <= icmp_ln30_fu_722_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((node_is_leaf_fu_819_p3 == 1'd0) & (icmp_ln30_reg_1150 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        icmp_ln39_1_reg_1343 <= icmp_ln39_1_fu_945_p2;
        icmp_ln39_reg_1338 <= icmp_ln39_fu_939_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_1150 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        node_is_leaf_reg_1319 <= node_is_leaf_fu_819_p3;
        node_left_child_V_reg_1323 <= node_left_child_V_fu_826_p6;
        node_right_child_V_reg_1328 <= node_right_child_V_fu_835_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_1150 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        node_value_reg_1272 <= node_value_fu_798_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((prediction_stream_V_1_load_A == 1'b1)) begin
        prediction_stream_V_1_payload_A <= tmp_17_fu_226;
    end
end

always @ (posedge ap_clk) begin
    if ((prediction_stream_V_1_load_B == 1'b1)) begin
        prediction_stream_V_1_payload_B <= tmp_17_fu_226;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sum_reg_1353 <= grp_fu_547_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (ap_phi_mux_i_0_phi_fu_507_p4 == 4'd6) & (icmp_ln20_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_10_fu_198 <= feature_stream_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (ap_phi_mux_i_0_phi_fu_507_p4 == 4'd7) & (icmp_ln20_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_11_fu_202 <= feature_stream_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (ap_phi_mux_i_0_phi_fu_507_p4 == 4'd8) & (icmp_ln20_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_12_fu_206 <= feature_stream_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (ap_phi_mux_i_0_phi_fu_507_p4 == 4'd9) & (icmp_ln20_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_13_fu_210 <= feature_stream_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (ap_phi_mux_i_0_phi_fu_507_p4 == 4'd10) & (icmp_ln20_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_14_fu_214 <= feature_stream_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (ap_phi_mux_i_0_phi_fu_507_p4 == 4'd11) & (icmp_ln20_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_15_fu_218 <= feature_stream_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2) & (((((ap_phi_mux_i_0_phi_fu_507_p4 == 4'd14) & (icmp_ln20_fu_566_p2 == 1'd0)) | ((ap_phi_mux_i_0_phi_fu_507_p4 == 4'd15) & (icmp_ln20_fu_566_p2 == 1'd0))) | ((ap_phi_mux_i_0_phi_fu_507_p4 == 4'd13) & (icmp_ln20_fu_566_p2 == 1'd0))) | ((ap_phi_mux_i_0_phi_fu_507_p4 == 4'd12) & (icmp_ln20_fu_566_p2 == 1'd0))))) begin
        tmp_16_fu_222 <= feature_stream_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (ap_phi_mux_i_0_phi_fu_507_p4 == 4'd1) & (icmp_ln20_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_2_fu_178 <= feature_stream_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (ap_phi_mux_i_0_phi_fu_507_p4 == 4'd2) & (icmp_ln20_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_3_fu_182 <= feature_stream_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (ap_phi_mux_i_0_phi_fu_507_p4 == 4'd3) & (icmp_ln20_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_5_fu_186 <= feature_stream_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (ap_phi_mux_i_0_phi_fu_507_p4 == 4'd4) & (icmp_ln20_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_7_fu_190 <= feature_stream_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (ap_phi_mux_i_0_phi_fu_507_p4 == 4'd5) & (icmp_ln20_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_8_fu_194 <= feature_stream_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (ap_phi_mux_i_0_phi_fu_507_p4 == 4'd0) & (icmp_ln20_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_fu_174 <= feature_stream_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_722_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln1_2_reg_1159[11 : 0] <= zext_ln1_2_fu_743_p1[11 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LBoostTree_feature_i_1_ce0 = 1'b1;
    end else begin
        LBoostTree_feature_i_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LBoostTree_feature_i_2_ce0 = 1'b1;
    end else begin
        LBoostTree_feature_i_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LBoostTree_feature_i_3_ce0 = 1'b1;
    end else begin
        LBoostTree_feature_i_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LBoostTree_feature_i_ce0 = 1'b1;
    end else begin
        LBoostTree_feature_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        LBoostTree_is_leaf_0_ce0 = 1'b1;
    end else begin
        LBoostTree_is_leaf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        LBoostTree_is_leaf_1_ce0 = 1'b1;
    end else begin
        LBoostTree_is_leaf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        LBoostTree_is_leaf_2_ce0 = 1'b1;
    end else begin
        LBoostTree_is_leaf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        LBoostTree_is_leaf_3_ce0 = 1'b1;
    end else begin
        LBoostTree_is_leaf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LBoostTree_left_chil_1_ce0 = 1'b1;
    end else begin
        LBoostTree_left_chil_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LBoostTree_left_chil_2_ce0 = 1'b1;
    end else begin
        LBoostTree_left_chil_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LBoostTree_left_chil_3_ce0 = 1'b1;
    end else begin
        LBoostTree_left_chil_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LBoostTree_left_chil_ce0 = 1'b1;
    end else begin
        LBoostTree_left_chil_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LBoostTree_right_chi_1_ce0 = 1'b1;
    end else begin
        LBoostTree_right_chi_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LBoostTree_right_chi_2_ce0 = 1'b1;
    end else begin
        LBoostTree_right_chi_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LBoostTree_right_chi_3_ce0 = 1'b1;
    end else begin
        LBoostTree_right_chi_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LBoostTree_right_chi_ce0 = 1'b1;
    end else begin
        LBoostTree_right_chi_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LBoostTree_value_0_ce0 = 1'b1;
    end else begin
        LBoostTree_value_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LBoostTree_value_1_ce0 = 1'b1;
    end else begin
        LBoostTree_value_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LBoostTree_value_2_ce0 = 1'b1;
    end else begin
        LBoostTree_value_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LBoostTree_value_3_ce0 = 1'b1;
    end else begin
        LBoostTree_value_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_1150 == 1'd1) | (ap_predicate_tran7to9_state7 == 1'b1))) begin
        ap_condition_pp0_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((~((prediction_stream_V_1_state == 2'd1) | (prediction_stream_V_1_ack_in == 1'b0) | ((prediction_stream_V_1_state == 2'd3) & (prediction_stream_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (node_is_leaf_reg_1319 == 1'd0) & (icmp_ln30_reg_1150 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_curren_0_phi_fu_529_p4 = select_ln39_fu_1002_p3;
    end else begin
        ap_phi_mux_curren_0_phi_fu_529_p4 = curren_0_reg_525;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (node_is_leaf_reg_1319 == 1'd0) & (icmp_ln30_reg_1150 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_depth_0_phi_fu_540_p4 = depth_reg_1154;
    end else begin
        ap_phi_mux_depth_0_phi_fu_540_p4 = depth_0_reg_536;
    end
end

always @ (*) begin
    if ((~((prediction_stream_V_1_state == 2'd1) | (prediction_stream_V_1_ack_in == 1'b0) | ((prediction_stream_V_1_state == 2'd3) & (prediction_stream_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (icmp_ln20_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        feature_stream_V_0_ack_out = 1'b1;
    end else begin
        feature_stream_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((feature_stream_V_0_sel == 1'b1)) begin
        feature_stream_V_0_data_out = feature_stream_V_0_payload_B;
    end else begin
        feature_stream_V_0_data_out = feature_stream_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        feature_stream_V_TDATA_blk_n = feature_stream_V_0_state[1'd0];
    end else begin
        feature_stream_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((prediction_stream_V_1_sel == 1'b1)) begin
        prediction_stream_V_1_data_out = prediction_stream_V_1_payload_B;
    end else begin
        prediction_stream_V_1_data_out = prediction_stream_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln27_fu_648_p2 == 1'd1) & (1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4))) begin
        prediction_stream_V_1_vld_in = 1'b1;
    end else begin
        prediction_stream_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((icmp_ln27_fu_648_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        prediction_stream_V_TDATA_blk_n = prediction_stream_V_1_state[1'd1];
    end else begin
        prediction_stream_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (icmp_ln20_fu_566_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0)) & (icmp_ln20_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln27_fu_648_p2 == 1'd0) & (1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln27_fu_648_p2 == 1'd1) & (1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~(((icmp_ln30_reg_1150 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (ap_predicate_tran7to9_state7 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1))) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln30_reg_1150 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_predicate_tran7to9_state7 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state15 : begin
            if ((~((prediction_stream_V_1_state == 2'd1) | (prediction_stream_V_1_ack_in == 1'b0) | ((prediction_stream_V_1_state == 2'd3) & (prediction_stream_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LBoostTree_feature_i_1_address0 = zext_ln1_2_fu_743_p1;

assign LBoostTree_feature_i_2_address0 = zext_ln1_2_fu_743_p1;

assign LBoostTree_feature_i_3_address0 = zext_ln1_2_fu_743_p1;

assign LBoostTree_feature_i_address0 = zext_ln1_2_fu_743_p1;

assign LBoostTree_is_leaf_0_address0 = zext_ln1_2_reg_1159;

assign LBoostTree_is_leaf_1_address0 = zext_ln1_2_reg_1159;

assign LBoostTree_is_leaf_2_address0 = zext_ln1_2_reg_1159;

assign LBoostTree_is_leaf_3_address0 = zext_ln1_2_reg_1159;

assign LBoostTree_left_chil_1_address0 = zext_ln1_2_fu_743_p1;

assign LBoostTree_left_chil_2_address0 = zext_ln1_2_fu_743_p1;

assign LBoostTree_left_chil_3_address0 = zext_ln1_2_fu_743_p1;

assign LBoostTree_left_chil_address0 = zext_ln1_2_fu_743_p1;

assign LBoostTree_right_chi_1_address0 = zext_ln1_2_fu_743_p1;

assign LBoostTree_right_chi_2_address0 = zext_ln1_2_fu_743_p1;

assign LBoostTree_right_chi_3_address0 = zext_ln1_2_fu_743_p1;

assign LBoostTree_right_chi_address0 = zext_ln1_2_fu_743_p1;

assign LBoostTree_value_0_address0 = zext_ln1_2_fu_743_p1;

assign LBoostTree_value_1_address0 = zext_ln1_2_fu_743_p1;

assign LBoostTree_value_2_address0 = zext_ln1_2_fu_743_p1;

assign LBoostTree_value_3_address0 = zext_ln1_2_fu_743_p1;

assign add_ln1_fu_738_p2 = (mul_ln1_reg_1120 + zext_ln1_1_fu_734_p1);

assign and_ln39_1_fu_996_p2 = (grp_fu_551_p2 & and_ln39_fu_990_p2);

assign and_ln39_fu_990_p2 = (or_ln39_fu_968_p2 & or_ln39_1_fu_984_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15 = ((prediction_stream_V_1_state == 2'd1) | ((prediction_stream_V_1_state == 2'd3) & (prediction_stream_V_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln20_fu_566_p2 == 1'd0) & (feature_stream_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((icmp_ln27_fu_648_p2 == 1'd1) & (prediction_stream_V_1_ack_in == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_i_0_phi_fu_507_p4 = i_0_reg_503;

always @ (*) begin
    ap_predicate_tran7to9_state7 = ((node_is_leaf_fu_819_p3 == 1'd1) & (icmp_ln30_reg_1150 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln39_1_fu_951_p1 = node_value_reg_1272;

assign bitcast_ln39_fu_921_p1 = fval_fu_888_p15;

assign depth_fu_728_p2 = (ap_phi_mux_depth_0_phi_fu_540_p4 + 8'd1);

assign feature_stream_V_0_ack_in = feature_stream_V_0_state[1'd1];

assign feature_stream_V_0_load_A = (feature_stream_V_0_state_cmp_full & ~feature_stream_V_0_sel_wr);

assign feature_stream_V_0_load_B = (feature_stream_V_0_state_cmp_full & feature_stream_V_0_sel_wr);

assign feature_stream_V_0_sel = feature_stream_V_0_sel_rd;

assign feature_stream_V_0_state_cmp_full = ((feature_stream_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign feature_stream_V_0_vld_in = feature_stream_V_TVALID;

assign feature_stream_V_0_vld_out = feature_stream_V_0_state[1'd0];

assign feature_stream_V_TREADY = feature_stream_V_0_state[1'd1];

assign fval_fu_888_p14 = (4'd15 + node_feature_index_V_reg_1267);

assign i_1_fu_654_p2 = (i1_0_reg_514 + 7'd1);

assign i_fu_572_p2 = (i_0_reg_503 + 4'd1);

assign icmp_ln13_1_fu_704_p2 = ((trunc_ln5_1_fu_670_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln13_2_fu_710_p2 = ((trunc_ln5_1_fu_670_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_698_p2 = ((trunc_ln5_1_fu_670_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_566_p2 = ((i_0_reg_503 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_648_p2 = ((i1_0_reg_514 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_722_p2 = ((ap_phi_mux_depth_0_phi_fu_540_p4 == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln39_1_fu_945_p2 = ((trunc_ln39_fu_935_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_2_fu_972_p2 = ((tmp_s_fu_954_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_3_fu_978_p2 = ((trunc_ln39_1_fu_964_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_939_p2 = ((tmp_9_fu_925_p4 != 8'd255) ? 1'b1 : 1'b0);

assign lshr_ln5_fu_660_p4 = {{i1_0_reg_514[6:4]}};

assign mul_ln1_fu_692_p1 = mul_ln1_fu_692_p10;

assign mul_ln1_fu_692_p10 = trunc_ln1_fu_684_p1;

assign mul_ln1_fu_692_p2 = (12'd196 * mul_ln1_fu_692_p1);

assign node_feature_index_V_fu_777_p3 = ((or_ln13_reg_1144[0:0] === 1'b1) ? select_ln13_3_fu_763_p3 : select_ln13_4_fu_770_p3);

assign node_is_leaf_fu_819_p3 = ((or_ln13_reg_1144[0:0] === 1'b1) ? select_ln13_fu_805_p3 : select_ln13_1_fu_812_p3);

assign node_value_fu_798_p3 = ((icmp_ln13_2_reg_1137[0:0] === 1'b1) ? LBoostTree_value_2_q0 : select_ln13_7_fu_791_p3);

assign or_ln13_fu_716_p2 = (icmp_ln13_2_fu_710_p2 | icmp_ln13_1_fu_704_p2);

assign or_ln39_1_fu_984_p2 = (icmp_ln39_3_fu_978_p2 | icmp_ln39_2_fu_972_p2);

assign or_ln39_fu_968_p2 = (icmp_ln39_reg_1338 | icmp_ln39_1_reg_1343);

assign prediction_stream_V_1_ack_in = prediction_stream_V_1_state[1'd1];

assign prediction_stream_V_1_ack_out = prediction_stream_V_TREADY;

assign prediction_stream_V_1_load_A = (prediction_stream_V_1_state_cmp_full & ~prediction_stream_V_1_sel_wr);

assign prediction_stream_V_1_load_B = (prediction_stream_V_1_state_cmp_full & prediction_stream_V_1_sel_wr);

assign prediction_stream_V_1_sel = prediction_stream_V_1_sel_rd;

assign prediction_stream_V_1_state_cmp_full = ((prediction_stream_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign prediction_stream_V_1_vld_out = prediction_stream_V_1_state[1'd0];

assign prediction_stream_V_TDATA = prediction_stream_V_1_data_out;

assign prediction_stream_V_TVALID = prediction_stream_V_1_state[1'd0];

assign select_ln13_1_fu_812_p3 = ((icmp_ln13_reg_1125[0:0] === 1'b1) ? LBoostTree_is_leaf_0_q0 : LBoostTree_is_leaf_3_q0);

assign select_ln13_3_fu_763_p3 = ((icmp_ln13_2_reg_1137[0:0] === 1'b1) ? LBoostTree_feature_i_1_q0 : LBoostTree_feature_i_2_q0);

assign select_ln13_4_fu_770_p3 = ((icmp_ln13_reg_1125[0:0] === 1'b1) ? LBoostTree_feature_i_3_q0 : LBoostTree_feature_i_q0);

assign select_ln13_6_fu_784_p3 = ((icmp_ln13_reg_1125[0:0] === 1'b1) ? LBoostTree_value_0_q0 : LBoostTree_value_3_q0);

assign select_ln13_7_fu_791_p3 = ((icmp_ln13_1_reg_1132[0:0] === 1'b1) ? LBoostTree_value_1_q0 : select_ln13_6_fu_784_p3);

assign select_ln13_fu_805_p3 = ((icmp_ln13_2_reg_1137[0:0] === 1'b1) ? LBoostTree_is_leaf_2_q0 : LBoostTree_is_leaf_1_q0);

assign select_ln39_fu_1002_p3 = ((and_ln39_1_fu_996_p2[0:0] === 1'b1) ? node_left_child_V_reg_1323 : node_right_child_V_reg_1328);

assign tmp_9_fu_925_p4 = {{bitcast_ln39_fu_921_p1[30:23]}};

assign tmp_s_fu_954_p4 = {{bitcast_ln39_1_fu_951_p1[30:23]}};

assign trunc_ln1_fu_684_p1 = i1_0_reg_514[3:0];

assign trunc_ln39_1_fu_964_p1 = bitcast_ln39_1_fu_951_p1[22:0];

assign trunc_ln39_fu_935_p1 = bitcast_ln39_fu_921_p1[22:0];

assign trunc_ln5_1_fu_670_p4 = {{i1_0_reg_514[5:4]}};

assign zext_ln1_1_fu_734_p1 = ap_phi_mux_curren_0_phi_fu_529_p4;

assign zext_ln1_2_fu_743_p1 = add_ln1_fu_738_p2;

assign zext_ln5_fu_680_p1 = lshr_ln5_fu_660_p4;

always @ (posedge ap_clk) begin
    zext_ln5_reg_1114[31:3] <= 29'b00000000000000000000000000000;
    zext_ln1_2_reg_1159[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //predict_ensemble
