// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="predict_ensemble,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.588000,HLS_SYN_LAT=3009,HLS_SYN_TPT=none,HLS_SYN_MEM=56,HLS_SYN_DSP=2,HLS_SYN_FF=496,HLS_SYN_LUT=1024,HLS_VERSION=2019_1}" *)

module predict_ensemble (
        ap_clk,
        ap_rst_n,
        features_address0,
        features_ce0,
        features_q0,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [3:0] features_address0;
output   features_ce0;
input  [31:0] features_q0;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

reg features_ce0;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [11:0] LBoostTree_is_leaf_3_address0;
reg    LBoostTree_is_leaf_3_ce0;
wire   [0:0] LBoostTree_is_leaf_3_q0;
wire   [11:0] LBoostTree_is_leaf_0_address0;
reg    LBoostTree_is_leaf_0_ce0;
wire   [0:0] LBoostTree_is_leaf_0_q0;
wire   [11:0] LBoostTree_is_leaf_1_address0;
reg    LBoostTree_is_leaf_1_ce0;
wire   [0:0] LBoostTree_is_leaf_1_q0;
wire   [11:0] LBoostTree_is_leaf_2_address0;
reg    LBoostTree_is_leaf_2_ce0;
wire   [0:0] LBoostTree_is_leaf_2_q0;
wire   [11:0] LBoostTree_feature_i_address0;
reg    LBoostTree_feature_i_ce0;
wire   [3:0] LBoostTree_feature_i_q0;
wire   [11:0] LBoostTree_feature_i_3_address0;
reg    LBoostTree_feature_i_3_ce0;
wire   [3:0] LBoostTree_feature_i_3_q0;
wire   [11:0] LBoostTree_feature_i_2_address0;
reg    LBoostTree_feature_i_2_ce0;
wire   [3:0] LBoostTree_feature_i_2_q0;
wire   [11:0] LBoostTree_feature_i_1_address0;
reg    LBoostTree_feature_i_1_ce0;
wire   [3:0] LBoostTree_feature_i_1_q0;
wire   [11:0] LBoostTree_value_3_address0;
reg    LBoostTree_value_3_ce0;
wire   [31:0] LBoostTree_value_3_q0;
wire   [11:0] LBoostTree_value_0_address0;
reg    LBoostTree_value_0_ce0;
wire   [31:0] LBoostTree_value_0_q0;
wire   [11:0] LBoostTree_value_1_address0;
reg    LBoostTree_value_1_ce0;
wire   [31:0] LBoostTree_value_1_q0;
wire   [11:0] LBoostTree_value_2_address0;
reg    LBoostTree_value_2_ce0;
wire   [31:0] LBoostTree_value_2_q0;
wire   [11:0] LBoostTree_left_chil_3_address0;
reg    LBoostTree_left_chil_3_ce0;
wire   [7:0] LBoostTree_left_chil_3_q0;
wire   [11:0] LBoostTree_left_chil_2_address0;
reg    LBoostTree_left_chil_2_ce0;
wire   [7:0] LBoostTree_left_chil_2_q0;
wire   [11:0] LBoostTree_left_chil_1_address0;
reg    LBoostTree_left_chil_1_ce0;
wire   [7:0] LBoostTree_left_chil_1_q0;
wire   [11:0] LBoostTree_left_chil_address0;
reg    LBoostTree_left_chil_ce0;
wire   [7:0] LBoostTree_left_chil_q0;
wire   [11:0] LBoostTree_right_chi_3_address0;
reg    LBoostTree_right_chi_3_ce0;
wire   [7:0] LBoostTree_right_chi_3_q0;
wire   [11:0] LBoostTree_right_chi_2_address0;
reg    LBoostTree_right_chi_2_ce0;
wire   [7:0] LBoostTree_right_chi_2_q0;
wire   [11:0] LBoostTree_right_chi_1_address0;
reg    LBoostTree_right_chi_1_ce0;
wire   [7:0] LBoostTree_right_chi_1_q0;
wire   [11:0] LBoostTree_right_chi_address0;
reg    LBoostTree_right_chi_ce0;
wire   [7:0] LBoostTree_right_chi_q0;
wire   [6:0] i_fu_445_p2;
reg   [6:0] i_reg_738;
wire    ap_CS_fsm_state2;
wire   [31:0] zext_ln5_fu_471_p1;
reg   [31:0] zext_ln5_reg_743;
wire   [0:0] icmp_ln16_fu_439_p2;
wire   [11:0] mul_ln1_fu_483_p2;
reg   [11:0] mul_ln1_reg_749;
wire   [0:0] icmp_ln13_fu_489_p2;
reg   [0:0] icmp_ln13_reg_754;
wire   [0:0] icmp_ln13_1_fu_495_p2;
reg   [0:0] icmp_ln13_1_reg_761;
wire   [0:0] icmp_ln13_2_fu_501_p2;
reg   [0:0] icmp_ln13_2_reg_768;
wire   [0:0] or_ln13_fu_507_p2;
reg   [0:0] or_ln13_reg_773;
wire    ap_CS_fsm_state3;
wire   [31:0] node_value_fu_602_p3;
reg   [31:0] node_value_reg_882;
wire    ap_CS_fsm_state4;
wire   [7:0] node_left_child_V_fu_609_p6;
reg   [7:0] node_left_child_V_reg_889;
wire   [7:0] node_right_child_V_fu_622_p6;
reg   [7:0] node_right_child_V_reg_894;
wire   [0:0] node_is_leaf_fu_560_p3;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln31_fu_685_p2;
reg   [0:0] icmp_ln31_reg_909;
wire   [0:0] icmp_ln31_1_fu_691_p2;
reg   [0:0] icmp_ln31_1_reg_914;
wire   [0:0] icmp_ln31_2_fu_697_p2;
reg   [0:0] icmp_ln31_2_reg_919;
wire   [0:0] icmp_ln31_3_fu_703_p2;
reg   [0:0] icmp_ln31_3_reg_924;
wire   [7:0] select_ln31_fu_729_p3;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_429_p2;
wire    ap_CS_fsm_state10;
reg   [31:0] sum_0_reg_395;
reg   [6:0] i_0_reg_407;
reg   [7:0] curren_0_reg_418;
wire   [63:0] zext_ln1_2_fu_522_p1;
wire  signed [63:0] sext_ln544_fu_645_p1;
wire    ap_CS_fsm_state7;
wire   [2:0] lshr_ln5_fu_451_p4;
wire   [3:0] trunc_ln1_fu_475_p1;
wire   [3:0] mul_ln1_fu_483_p1;
wire   [1:0] trunc_ln5_1_fu_461_p4;
wire   [11:0] zext_ln1_1_fu_513_p1;
wire   [11:0] add_ln1_fu_517_p2;
wire   [0:0] select_ln13_fu_546_p3;
wire   [0:0] select_ln13_1_fu_553_p3;
wire   [3:0] select_ln13_3_fu_567_p3;
wire   [3:0] select_ln13_4_fu_574_p3;
wire   [31:0] select_ln13_6_fu_588_p3;
wire   [31:0] select_ln13_7_fu_595_p3;
wire   [3:0] node_feature_index_V_fu_581_p3;
wire   [4:0] zext_ln215_fu_635_p1;
wire   [4:0] ret_V_fu_639_p2;
wire   [31:0] bitcast_ln31_fu_650_p1;
wire   [31:0] bitcast_ln31_1_fu_668_p1;
wire   [7:0] tmp_fu_654_p4;
wire   [22:0] trunc_ln31_fu_664_p1;
wire   [7:0] tmp_3_fu_671_p4;
wire   [22:0] trunc_ln31_1_fu_681_p1;
wire   [0:0] or_ln31_fu_709_p2;
wire   [0:0] or_ln31_1_fu_713_p2;
wire   [0:0] and_ln31_fu_717_p2;
wire   [0:0] grp_fu_434_p2;
wire   [0:0] and_ln31_1_fu_723_p2;
reg   [9:0] ap_NS_fsm;
wire   [11:0] mul_ln1_fu_483_p10;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

predict_ensemble_bkb #(
    .DataWidth( 1 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_is_leaf_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_is_leaf_3_address0),
    .ce0(LBoostTree_is_leaf_3_ce0),
    .q0(LBoostTree_is_leaf_3_q0)
);

predict_ensemble_cud #(
    .DataWidth( 1 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_is_leaf_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_is_leaf_0_address0),
    .ce0(LBoostTree_is_leaf_0_ce0),
    .q0(LBoostTree_is_leaf_0_q0)
);

predict_ensemble_dEe #(
    .DataWidth( 1 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_is_leaf_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_is_leaf_1_address0),
    .ce0(LBoostTree_is_leaf_1_ce0),
    .q0(LBoostTree_is_leaf_1_q0)
);

predict_ensemble_eOg #(
    .DataWidth( 1 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_is_leaf_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_is_leaf_2_address0),
    .ce0(LBoostTree_is_leaf_2_ce0),
    .q0(LBoostTree_is_leaf_2_q0)
);

predict_ensemble_fYi #(
    .DataWidth( 4 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_feature_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_feature_i_address0),
    .ce0(LBoostTree_feature_i_ce0),
    .q0(LBoostTree_feature_i_q0)
);

predict_ensemble_g8j #(
    .DataWidth( 4 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_feature_i_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_feature_i_3_address0),
    .ce0(LBoostTree_feature_i_3_ce0),
    .q0(LBoostTree_feature_i_3_q0)
);

predict_ensemble_hbi #(
    .DataWidth( 4 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_feature_i_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_feature_i_2_address0),
    .ce0(LBoostTree_feature_i_2_ce0),
    .q0(LBoostTree_feature_i_2_q0)
);

predict_ensemble_ibs #(
    .DataWidth( 4 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_feature_i_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_feature_i_1_address0),
    .ce0(LBoostTree_feature_i_1_ce0),
    .q0(LBoostTree_feature_i_1_q0)
);

predict_ensemble_jbC #(
    .DataWidth( 32 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_value_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_value_3_address0),
    .ce0(LBoostTree_value_3_ce0),
    .q0(LBoostTree_value_3_q0)
);

predict_ensemble_kbM #(
    .DataWidth( 32 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_value_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_value_0_address0),
    .ce0(LBoostTree_value_0_ce0),
    .q0(LBoostTree_value_0_q0)
);

predict_ensemble_lbW #(
    .DataWidth( 32 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_value_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_value_1_address0),
    .ce0(LBoostTree_value_1_ce0),
    .q0(LBoostTree_value_1_q0)
);

predict_ensemble_mb6 #(
    .DataWidth( 32 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_value_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_value_2_address0),
    .ce0(LBoostTree_value_2_ce0),
    .q0(LBoostTree_value_2_q0)
);

predict_ensemble_ncg #(
    .DataWidth( 8 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_left_chil_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_left_chil_3_address0),
    .ce0(LBoostTree_left_chil_3_ce0),
    .q0(LBoostTree_left_chil_3_q0)
);

predict_ensemble_ocq #(
    .DataWidth( 8 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_left_chil_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_left_chil_2_address0),
    .ce0(LBoostTree_left_chil_2_ce0),
    .q0(LBoostTree_left_chil_2_q0)
);

predict_ensemble_pcA #(
    .DataWidth( 8 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_left_chil_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_left_chil_1_address0),
    .ce0(LBoostTree_left_chil_1_ce0),
    .q0(LBoostTree_left_chil_1_q0)
);

predict_ensemble_qcK #(
    .DataWidth( 8 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_left_chil_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_left_chil_address0),
    .ce0(LBoostTree_left_chil_ce0),
    .q0(LBoostTree_left_chil_q0)
);

predict_ensemble_rcU #(
    .DataWidth( 8 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_right_chi_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_right_chi_3_address0),
    .ce0(LBoostTree_right_chi_3_ce0),
    .q0(LBoostTree_right_chi_3_q0)
);

predict_ensemble_sc4 #(
    .DataWidth( 8 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_right_chi_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_right_chi_2_address0),
    .ce0(LBoostTree_right_chi_2_ce0),
    .q0(LBoostTree_right_chi_2_q0)
);

predict_ensemble_tde #(
    .DataWidth( 8 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_right_chi_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_right_chi_1_address0),
    .ce0(LBoostTree_right_chi_1_ce0),
    .q0(LBoostTree_right_chi_1_q0)
);

predict_ensemble_udo #(
    .DataWidth( 8 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
LBoostTree_right_chi_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LBoostTree_right_chi_address0),
    .ce0(LBoostTree_right_chi_ce0),
    .q0(LBoostTree_right_chi_q0)
);

predict_ensemble_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
predict_ensemble_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(sum_0_reg_395)
);

predict_ensemble_vdy #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
predict_ensemble_vdy_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_0_reg_395),
    .din1(node_value_reg_882),
    .ce(1'b1),
    .dout(grp_fu_429_p2)
);

predict_ensemble_wdI #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
predict_ensemble_wdI_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(features_q0),
    .din1(node_value_reg_882),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_434_p2)
);

predict_ensemble_xdS #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
predict_ensemble_xdS_U3(
    .din0(LBoostTree_left_chil_3_q0),
    .din1(LBoostTree_left_chil_2_q0),
    .din2(LBoostTree_left_chil_1_q0),
    .din3(LBoostTree_left_chil_q0),
    .din4(zext_ln5_reg_743),
    .dout(node_left_child_V_fu_609_p6)
);

predict_ensemble_xdS #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
predict_ensemble_xdS_U4(
    .din0(LBoostTree_right_chi_3_q0),
    .din1(LBoostTree_right_chi_2_q0),
    .din2(LBoostTree_right_chi_1_q0),
    .din3(LBoostTree_right_chi_q0),
    .din4(zext_ln5_reg_743),
    .dout(node_right_child_V_fu_622_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        curren_0_reg_418 <= select_ln31_fu_729_p3;
    end else if (((icmp_ln16_fu_439_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        curren_0_reg_418 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_0_reg_407 <= i_reg_738;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_407 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sum_0_reg_395 <= grp_fu_429_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_0_reg_395 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_738 <= i_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_439_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln13_1_reg_761 <= icmp_ln13_1_fu_495_p2;
        icmp_ln13_2_reg_768 <= icmp_ln13_2_fu_501_p2;
        icmp_ln13_reg_754 <= icmp_ln13_fu_489_p2;
        mul_ln1_reg_749 <= mul_ln1_fu_483_p2;
        or_ln13_reg_773 <= or_ln13_fu_507_p2;
        zext_ln5_reg_743[2 : 0] <= zext_ln5_fu_471_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln31_1_reg_914 <= icmp_ln31_1_fu_691_p2;
        icmp_ln31_2_reg_919 <= icmp_ln31_2_fu_697_p2;
        icmp_ln31_3_reg_924 <= icmp_ln31_3_fu_703_p2;
        icmp_ln31_reg_909 <= icmp_ln31_fu_685_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        node_left_child_V_reg_889 <= node_left_child_V_fu_609_p6;
        node_right_child_V_reg_894 <= node_right_child_V_fu_622_p6;
        node_value_reg_882 <= node_value_fu_602_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_feature_i_1_ce0 = 1'b1;
    end else begin
        LBoostTree_feature_i_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_feature_i_2_ce0 = 1'b1;
    end else begin
        LBoostTree_feature_i_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_feature_i_3_ce0 = 1'b1;
    end else begin
        LBoostTree_feature_i_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_feature_i_ce0 = 1'b1;
    end else begin
        LBoostTree_feature_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_is_leaf_0_ce0 = 1'b1;
    end else begin
        LBoostTree_is_leaf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_is_leaf_1_ce0 = 1'b1;
    end else begin
        LBoostTree_is_leaf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_is_leaf_2_ce0 = 1'b1;
    end else begin
        LBoostTree_is_leaf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_is_leaf_3_ce0 = 1'b1;
    end else begin
        LBoostTree_is_leaf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_left_chil_1_ce0 = 1'b1;
    end else begin
        LBoostTree_left_chil_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_left_chil_2_ce0 = 1'b1;
    end else begin
        LBoostTree_left_chil_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_left_chil_3_ce0 = 1'b1;
    end else begin
        LBoostTree_left_chil_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_left_chil_ce0 = 1'b1;
    end else begin
        LBoostTree_left_chil_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_right_chi_1_ce0 = 1'b1;
    end else begin
        LBoostTree_right_chi_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_right_chi_2_ce0 = 1'b1;
    end else begin
        LBoostTree_right_chi_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_right_chi_3_ce0 = 1'b1;
    end else begin
        LBoostTree_right_chi_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_right_chi_ce0 = 1'b1;
    end else begin
        LBoostTree_right_chi_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_value_0_ce0 = 1'b1;
    end else begin
        LBoostTree_value_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_value_1_ce0 = 1'b1;
    end else begin
        LBoostTree_value_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_value_2_ce0 = 1'b1;
    end else begin
        LBoostTree_value_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LBoostTree_value_3_ce0 = 1'b1;
    end else begin
        LBoostTree_value_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        features_ce0 = 1'b1;
    end else begin
        features_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln16_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((node_is_leaf_fu_560_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LBoostTree_feature_i_1_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_feature_i_2_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_feature_i_3_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_feature_i_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_is_leaf_0_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_is_leaf_1_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_is_leaf_2_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_is_leaf_3_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_left_chil_1_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_left_chil_2_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_left_chil_3_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_left_chil_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_right_chi_1_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_right_chi_2_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_right_chi_3_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_right_chi_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_value_0_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_value_1_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_value_2_address0 = zext_ln1_2_fu_522_p1;

assign LBoostTree_value_3_address0 = zext_ln1_2_fu_522_p1;

assign add_ln1_fu_517_p2 = (mul_ln1_reg_749 + zext_ln1_1_fu_513_p1);

assign and_ln31_1_fu_723_p2 = (grp_fu_434_p2 & and_ln31_fu_717_p2);

assign and_ln31_fu_717_p2 = (or_ln31_fu_709_p2 & or_ln31_1_fu_713_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln31_1_fu_668_p1 = node_value_reg_882;

assign bitcast_ln31_fu_650_p1 = features_q0;

assign features_address0 = sext_ln544_fu_645_p1;

assign i_fu_445_p2 = (i_0_reg_407 + 7'd1);

assign icmp_ln13_1_fu_495_p2 = ((trunc_ln5_1_fu_461_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln13_2_fu_501_p2 = ((trunc_ln5_1_fu_461_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_489_p2 = ((trunc_ln5_1_fu_461_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_439_p2 = ((i_0_reg_407 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln31_1_fu_691_p2 = ((trunc_ln31_fu_664_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln31_2_fu_697_p2 = ((tmp_3_fu_671_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln31_3_fu_703_p2 = ((trunc_ln31_1_fu_681_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_685_p2 = ((tmp_fu_654_p4 != 8'd255) ? 1'b1 : 1'b0);

assign lshr_ln5_fu_451_p4 = {{i_0_reg_407[6:4]}};

assign mul_ln1_fu_483_p1 = mul_ln1_fu_483_p10;

assign mul_ln1_fu_483_p10 = trunc_ln1_fu_475_p1;

assign mul_ln1_fu_483_p2 = (12'd196 * mul_ln1_fu_483_p1);

assign node_feature_index_V_fu_581_p3 = ((or_ln13_reg_773[0:0] === 1'b1) ? select_ln13_3_fu_567_p3 : select_ln13_4_fu_574_p3);

assign node_is_leaf_fu_560_p3 = ((or_ln13_reg_773[0:0] === 1'b1) ? select_ln13_fu_546_p3 : select_ln13_1_fu_553_p3);

assign node_value_fu_602_p3 = ((icmp_ln13_reg_754[0:0] === 1'b1) ? LBoostTree_value_2_q0 : select_ln13_7_fu_595_p3);

assign or_ln13_fu_507_p2 = (icmp_ln13_fu_489_p2 | icmp_ln13_2_fu_501_p2);

assign or_ln31_1_fu_713_p2 = (icmp_ln31_3_reg_924 | icmp_ln31_2_reg_919);

assign or_ln31_fu_709_p2 = (icmp_ln31_reg_909 | icmp_ln31_1_reg_914);

assign ret_V_fu_639_p2 = ($signed(5'd31) + $signed(zext_ln215_fu_635_p1));

assign select_ln13_1_fu_553_p3 = ((icmp_ln13_1_reg_761[0:0] === 1'b1) ? LBoostTree_is_leaf_0_q0 : LBoostTree_is_leaf_3_q0);

assign select_ln13_3_fu_567_p3 = ((icmp_ln13_reg_754[0:0] === 1'b1) ? LBoostTree_feature_i_1_q0 : LBoostTree_feature_i_2_q0);

assign select_ln13_4_fu_574_p3 = ((icmp_ln13_1_reg_761[0:0] === 1'b1) ? LBoostTree_feature_i_3_q0 : LBoostTree_feature_i_q0);

assign select_ln13_6_fu_588_p3 = ((icmp_ln13_1_reg_761[0:0] === 1'b1) ? LBoostTree_value_0_q0 : LBoostTree_value_3_q0);

assign select_ln13_7_fu_595_p3 = ((icmp_ln13_2_reg_768[0:0] === 1'b1) ? LBoostTree_value_1_q0 : select_ln13_6_fu_588_p3);

assign select_ln13_fu_546_p3 = ((icmp_ln13_reg_754[0:0] === 1'b1) ? LBoostTree_is_leaf_2_q0 : LBoostTree_is_leaf_1_q0);

assign select_ln31_fu_729_p3 = ((and_ln31_1_fu_723_p2[0:0] === 1'b1) ? node_left_child_V_reg_889 : node_right_child_V_reg_894);

assign sext_ln544_fu_645_p1 = $signed(ret_V_fu_639_p2);

assign tmp_3_fu_671_p4 = {{bitcast_ln31_1_fu_668_p1[30:23]}};

assign tmp_fu_654_p4 = {{bitcast_ln31_fu_650_p1[30:23]}};

assign trunc_ln1_fu_475_p1 = i_0_reg_407[3:0];

assign trunc_ln31_1_fu_681_p1 = bitcast_ln31_1_fu_668_p1[22:0];

assign trunc_ln31_fu_664_p1 = bitcast_ln31_fu_650_p1[22:0];

assign trunc_ln5_1_fu_461_p4 = {{i_0_reg_407[5:4]}};

assign zext_ln1_1_fu_513_p1 = curren_0_reg_418;

assign zext_ln1_2_fu_522_p1 = add_ln1_fu_517_p2;

assign zext_ln215_fu_635_p1 = node_feature_index_V_fu_581_p3;

assign zext_ln5_fu_471_p1 = lshr_ln5_fu_451_p4;

always @ (posedge ap_clk) begin
    zext_ln5_reg_743[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //predict_ensemble
