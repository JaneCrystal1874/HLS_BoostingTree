-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_bFp_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_bFp_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100000100011011001111110010", 
    1 => "00111011000100100000001110100011", 
    2 => "00111100011001110100101011111101", 
    3 => "10111010110100001010101010101000", 
    4 => "00111111011110010011001100001001", 
    5 => "00111101100110101011010010110111", 
    6 => "10111010100100001111011100110100", 
    7 => "00111010100011001100010101110110", 
    8 => "00111101111101110011001000010110", 
    9 => "10111010100110110111001110001110", 
    10 => "00111101100111011011110100110000", 
    11 => "00111101011100101001100000000011", 
    12 => "00111101101100100010000011111111", 
    13 => "00111110101101000101001001100001", 
    14 => "00111010110010001110111011110010", 
    15 => "10111010001111110101110101111001", 
    16 => "00111101110010011000110101000111", 
    17 => "00111010100110001001000101011100", 
    18 => "00111110111010110100011010111011", 
    19 => "00111010001011101001011010000001", 
    20 => "00111110010110001000000101011110", 
    21 => "10111010101001100001000101110111", 
    22 => "10110111100011101001101100111001", 
    23 => "00111110000110010111001100010001", 
    24 => "00111111010111101100110000011101", 
    25 => "10111000100010000101000010011100", 
    26 => "00111010001111100000110111101101", 
    27 => "00111101110101100111010011010001", 
    28 => "10111010000101001110010111010110", 
    29 => "10111010000000000011000000111100", 
    30 => "00111101101001001010011110110101", 
    31 => "10111001101110100001111101001011", 
    32 => "00111101110100100010111100100111", 
    33 => "00111001110111110101100011000001", 
    34 => "00111101111011110100111110010100", 
    35 => "10111010001100101000010100100011", 
    36 => "00111101111000010011000010011100", 
    37 => "00111001111010010100111011100100", 
    38 => "00111110010110110010011101000110", 
    39 => "00111001110001101011010010000101", 
    40 => "00111110010010000100000001011011", 
    41 => "00111111000011100001000001011010", 
    42 => "00111111011100010101000010101001", 
    43 => "00111110101001100111010010001110", 
    44 => "10111010010101000001001100010010", 
    45 => "00111111001100110010111000100111", 
    46 => "00111010100010110001000101000001", 
    47 => "10111001000110010001011110010100", 
    48 => "00111000110101011110100011010101", 
    49 => "00111111011001100110111111000110", 
    50 => "00111111011000100101011111111011", 
    51 => "00111111011000111100111001000010", 
    52 => "00111111000110001111011101100110", 
    53 => "00111111011010110101101011011001", 
    54 => "00111010000001000001111011011110", 
    55 => "00111110000111011001100000111001", 
    56 => "00111001110110010000111000100100", 
    57 => "10111010010011101001000111001001", 
    58 => "00110110100001100011011110111101", 
    59 => "00111110111010101101000110101111", 
    60 => "00111111001010000010101110010101", 
    61 => "00111110000100110100111000110011", 
    62 => "00111111011001000100010000111001", 
    63 => "00111111011001111111010001010110", 
    64 => "10111001010000011111110010001111", 
    65 => "00111111010010000000000000100010", 
    66 => "00111001111000100111111000001111", 
    67 => "00111110101110110100001010101011", 
    68 => "10111010000000000111001101011000", 
    69 => "00111111001001110011010001100001", 
    70 => "10111001001101100111001111000101", 
    71 => "00111111001101010110111001111010", 
    72 => "10111001000111000011110011100010", 
    73 => "10110110110010010101001110011100", 
    74 => "00111001010100101100001110000111", 
    75 => "00111001011110001000001100110100", 
    76 => "00111110101111110000010111001001", 
    77 => "00111110110110111111101111011111", 
    78 => "00111110111101010111110100011000", 
    79 => "00111111000111101000101110100000", 
    80 => "00111001000110010001011110010100", 
    81 => "10111001111000111000101001111110", 
    82 => "00111101111101110010111001101010", 
    83 => "00111111010000010001011111000110", 
    84 => "00111110101111010001011101000000", 
    85 => "00111001111000111000101001111110", 
    86 => "00111110100100010111010001100000", 
    87 => "10111000101010011101111010001011", 
    88 => "00111000010110100001101010010011", 
    89 => "10111001100111011100111110001001", 
    90 => "00111110000010000101101001001111", 
    91 => "00111110100011011000110001101101", 
    92 => "00111001100110101010101000111011", 
    93 => "00111110100110100010111001111111", 
    94 => "00111110111100110011100010010011", 
    95 => "00111111000000010101010010000110", 
    96 => "00111111001100011100000100101111", 
    97 => "00111111000100101110100011000000", 
    98 => "10111001001101100111001111000101", 
    99 => "00111110111100010100101010110010", 
    100 => "00111110001101101001011000011100", 
    101 => "10110111000101101111111010110101", 
    102 => "00111110100001100011110000110010", 
    103 => "00111111010001001111101010101101", 
    104 => "00111111000011000010110000101100", 
    105 => "10111001011100100011100010010111", 
    106 => "00110111100111110110001000110000", 
    107 => "00111000100110110011000001110011", 
    108 => "00111001011101010101110111100110", 
    109 => "10111000101001011010110011001101", 
    110 => "00111110110001011001010001001011", 
    111 => "10111000010110100001101010010011", 
    112 => "10111001100000001111100110010000", 
    113 => "00111001100100010011101001010000", 
    114 => "00111110111100110001000101100010", 
    115 => "10111000110100011011011100010111", 
    116 => "10111001011110001000001100110100", 
    117 => "00111111010100101111000111111110", 
    118 => "00111001000111100101010111000001", 
    119 => "00111110111000010111001110010111", 
    120 => "00111111001110000011100110001010", 
    121 => "00111001101110011001100100010011", 
    122 => "00111000101101100111001111000101", 
    123 => "00111110110001001101110000100011", 
    124 => "00111110111111100011001110001011", 
    125 => "00111111000011010110110100001001", 
    126 => "00111001001010001101001000011100", 
    127 => "10111001000011101001101100111001", 
    128 => "10111001100101011111001001000101", 
    129 => "00111111000011010001101110100100", 
    130 => "10111001000110100010010000000011", 
    131 => "00111110101000011000001001100110", 
    132 => "00111110111000100011110101001111", 
    133 => "00111110011101010100001110101111", 
    134 => "00111111000010101100111110100111", 
    135 => "00111110111011001010011111010110", 
    136 => "00111111000101101001110010111011", 
    137 => "00111000111001101010111111001101", 
    138 => "00111110010110100000110100110101", 
    139 => "00111110011000100001011001000000", 
    140 => "00111110100001010111011101110101", 
    141 => "00111001001000000110111010100000", 
    142 => "10110111011010101110000110001011", 
    143 => "00111000101100100100001000000111", 
    144 => "00111001111001001001011011101110", 
    145 => "00111110110110001001100100011000", 
    146 => "00111111010101000010010110011110", 
    147 => "00111110111001101100001110011000", 
    148 => "00111000111110111010100010000010", 
    149 => "00111110101011001101001010110011", 
    150 => "10111001010110010000111000100100", 
    151 => "00111000100001000001111011011110", 
    152 => "10111000101110101010010110000011", 
    153 => "00111000111110011000111110100011", 
    154 => "00111110010000101110010101011000", 
    155 => "10111001100000111001100010100110", 
    156 => "00111110100011111100111001010011", 
    157 => "10111001001010011101111010001011", 
    158 => "00111000101100100100001000000111", 
    159 => "00111111000100011011111000001010", 
    160 => "10110110000001100011011110111101", 
    161 => "00111110111100000011110011010001", 
    162 => "10111001010011101001000111001001", 
    163 => "10111000111001001001011011101110", 
    164 => "00110111000101101111111010110101", 
    165 => "10111000111111111101101001000000", 
    166 => "00110111110110100001101010010011", 
    167 => "00111000001000111001001111101110", 
    168 => "10111001000101101111111010110101", 
    169 => "00111000100111110110001000110000", 
    170 => "00111001001111101101011101000001", 
    171 => "00111110010010010101001111011111", 
    172 => "00111001000011111010011110101000", 
    173 => "10111001000011111010011110101000", 
    174 => "00111110111100011110000101001100", 
    175 => "10111000110110000000000110110100", 
    176 => "00111110110000111101111011000110", 
    177 => "00111001001001011010110011001101", 
    178 => "00111110101101110111101101011011", 
    179 => "10111000101010111111011101101010", 
    180 => "00111110101011010100110011011011", 
    181 => "00111000110110100001101010010011", 
    182 => "00111110111101110101010111011110", 
    183 => "10111000110001110011101010111101", 
    184 => "00111111000110000011111110100011", 
    185 => "00110111010010010101001110011100", 
    186 => "00111000111001001001011011101110", 
    187 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_bFp is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_bFp is
    component predict_ensemble_bFp_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_bFp_rom_U :  component predict_ensemble_bFp_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


