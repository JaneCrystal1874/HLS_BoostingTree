-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_eJT_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_eJT_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111011101100101011000010101", 
    1 => "00111101001011000010100010110011", 
    2 => "10111000100101001110010111010110", 
    3 => "10111000010001010010000111011110", 
    4 => "00111101010011111101101100001010", 
    5 => "00111000101101100111001111000101", 
    6 => "00111101011000001010010000011010", 
    7 => "10111000010011011000010101011001", 
    8 => "00111111011011100101000000001101", 
    9 => "00111111010111101000101110100000", 
    10 => "00111000000111110110001000110000", 
    11 => "00111101100010100001101101011100", 
    12 => "00111101111000111011100010100010", 
    13 => "00111111011100110101111010110111", 
    14 => "00111101000101111101110100000001", 
    15 => "10110101100001100011011110111101", 
    16 => "00111000000101101111111010110101", 
    17 => "10111000000100101100110011110111", 
    18 => "00110110111010101110000110001011", 
    19 => "10110111100111110110001000110000", 
    20 => "00111110100111111100011110000010", 
    21 => "00111110100110001001011110000101", 
    22 => "00111101111101101110111001110100", 
    23 => "00111110000100011111110110011100", 
    24 => "00111000100111010100100101010010", 
    25 => "00110111011110111010100010000010", 
    26 => "00111100010110000011100000111011", 
    27 => "10110111100101101111111010110101", 
    28 => "00111111010001111110010011001101", 
    29 => "00111111000000011000101111100111", 
    30 => "00111101011100111011101110000100", 
    31 => "00111101110000101101101111101000", 
    32 => "00110110111010101110000110001011", 
    33 => "00110111100001100011011110111101", 
    34 => "10111000000000100000010111111111", 
    35 => "00110111100011101001101100111001", 
    36 => "00111101100111011011110100110000", 
    37 => "10110110100001100011011110111101", 
    38 => "00111101111010100000010001001011", 
    39 => "00110111000101101111111010110101", 
    40 => "00111101110100110000010110010110", 
    41 => "00110110100001100011011110111101", 
    42 => "00111111001011111001101011110010", 
    43 => "00111111001011010001011101000000", 
    44 => "00111111011101001001010110011110", 
    45 => "00111101101000100100011110001000", 
    46 => "10110110010010010101001110011100", 
    47 => "00111101101100100010000011111111", 
    48 => "10110111100011101001101100111001", 
    49 => "00111101111101010001010100000101", 
    50 => "00111111001010010010000101010111", 
    51 => "10110101100001100011011110111101", 
    52 => "00111110100101001011101010010101", 
    53 => "00110111000001100011011110111101", 
    54 to 55=> "10110111000001100011011110111101", 
    56 => "00111101111111110110001010110111", 
    57 => "00110111100111110110001000110000", 
    58 => "00110110000001100011011110111101", 
    59 => "00111111000011011000110010110000", 
    60 => "00000000000000000000000000000000", 
    61 => "00110110101001111100010110101100", 
    62 => "00111111011000010011001101101110", 
    63 => "00110110010010010101001110011100", 
    64 => "00110101100001100011011110111101", 
    65 => "00111111001001110001010111101000", 
    66 => "10110110101001111100010110101100", 
    67 => "00111111000111011111101010101001", 
    68 => "00110110010010010101001110011100", 
    69 => "00111111011100000100010101000110", 
    70 => "10110110110010010101001110011100", 
    71 => "00111111011110001100011011100111", 
    72 => "00111111000111111010001110011000", 
    73 => "00111101101011101000101101111110", 
    74 => "10110110010010010101001110011100", 
    75 => "00110110000001100011011110111101", 
    76 => "00110101100001100011011110111101", 
    77 => "10110110000001100011011110111101", 
    78 => "00111110110011100110010011110101", 
    79 => "00111111001100000001110001110001", 
    80 => "00111111010111000101000110111001", 
    81 => "00111110100001001001101010111011", 
    82 => "10110110100001100011011110111101", 
    83 => "00111101101000110000010101010011", 
    84 => "00110110010010010101001110011100", 
    85 => "10110110100001100011011110111101", 
    86 => "00111110110010111011111010101001", 
    87 => "00110110000001100011011110111101", 
    88 => "00111110100110101110010010001111", 
    89 => "00111110100010001000111101000011", 
    90 => "10110110000001100011011110111101", 
    91 => "00111110010111100110010001101111", 
    92 => "00111110100010010101011110001010", 
    93 => "00111110011110010101111000011000", 
    94 => "00111110100100101110111111110110", 
    95 => "10110101100001100011011110111101", 
    96 => "00111110010110001010011111100111", 
    97 => "10110101100001100011011110111101", 
    98 => "00111110101010010011110000000100", 
    99 => "00111110011011010111010110011111", 
    100 => "00111110100001000001100111100011", 
    101 => "00111110100011101001000101100100", 
    102 => "00111111011001100010101001101111", 
    103 => "00111110011100000011111000100001", 
    104 => "00110110010010010101001110011100", 
    105 => "00110101100001100011011110111101", 
    106 => "00111111001000011100101100110110", 
    107 => "00000000000000000000000000000000", 
    108 => "10110101100001100011011110111101", 
    109 => "00110110010010010101001110011100", 
    110 => "00110101100001100011011110111101", 
    111 => "00111110100101111111001001011110", 
    112 => "10110110010010010101001110011100", 
    113 => "00111111010100001001010110101111", 
    114 => "00111111010000110001010110110101", 
    115 => "00110110000001100011011110111101", 
    116 => "00110101100001100011011110111101", 
    117 => "00111111010110001011000000101001", 
    118 => "00111111010001011000101001000100", 
    119 => "10110101100001100011011110111101", 
    120 => "00110101100001100011011110111101", 
    121 => "00111110101100101101101000110100", 
    122 => "00110101100001100011011110111101", 
    123 => "00000000000000000000000000000000", 
    124 => "10110110000001100011011110111101", 
    125 => "00111111010010110111110111011000", 
    126 to 127=> "10000000000000000000000000000000", 
    128 => "00000000000000000000000000000000", 
    129 => "10110101100001100011011110111101", 
    130 => "00111111001111000000000010101000", 
    131 => "00111111000000010010000000011001", 
    132 => "00000000000000000000000000000000", 
    133 => "00111111001101001001000011100110", 
    134 => "00110101100001100011011110111101", 
    135 => "00111110111011001001000110110000", 
    136 => "00000000000000000000000000000000", 
    137 => "00111111011001011000011010000111", 
    138 => "00111110110110100101100011010110", 
    139 => "00111110110011011111011101000000", 
    140 => "00000000000000000000000000000000", 
    141 => "00111111011001001000110111010010", 
    142 => "00111111000010100110111110110101", 
    143 => "10000000000000000000000000000000", 
    144 => "10110101100001100011011110111101", 
    145 => "00000000000000000000000000000000", 
    146 => "10000000000000000000000000000000", 
    147 => "00111110001100000011111010100111", 
    148 => "10000000000000000000000000000000", 
    149 => "00000000000000000000000000000000", 
    150 => "00110101100001100011011110111101", 
    151 => "00111110110011100001110111001001", 
    152 => "00111110101100010111010001100000", 
    153 => "10000000000000000000000000000000", 
    154 => "00110101100001100011011110111101", 
    155 => "10000000000000000000000000000000", 
    156 => "00111110110101000010111011011100", 
    157 => "00111110110111101010001001001101", 
    158 => "00111111000000100100001011110010", 
    159 => "10000000000000000000000000000000", 
    160 => "00111110101100011011000010001010", 
    161 => "00000000000000000000000000000000", 
    162 => "00111110011010100101011001011000", 
    163 => "00000000000000000000000000000000", 
    164 to 165=> "10000000000000000000000000000000", 
    166 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_eJT is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_eJT is
    component predict_ensemble_eJT_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_eJT_rom_U :  component predict_ensemble_eJT_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


