-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_bPq_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_bPq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100010101010110001010011110", 
    1 => "00111111000000011000101111100111", 
    2 => "00111101011100001010011011111100", 
    3 => "10111010100000001111100110010000", 
    4 => "00111011010111110100011111111010", 
    5 => "10111011000101100100011000101000", 
    6 => "00111111011110000011101001000011", 
    7 => "00111101010100110010010100001011", 
    8 => "00111010010101000001001100010010", 
    9 => "10111010001011100001000001001001", 
    10 => "00111111010110001011101000110000", 
    11 => "00111101110010101110100111101110", 
    12 => "00111111000011100011010111111000", 
    13 => "00111110101101100110001101000001", 
    14 => "00111110010110001000000101011110", 
    15 => "00111110110010100101010101101101", 
    16 => "10111010000110100110011100011111", 
    17 => "00111001101011000111110110100010", 
    18 => "00111110111100001110100011101010", 
    19 => "00111111001010100100001100000011", 
    20 => "00111110010000000000100100101101", 
    21 => "00111110011101100000111100011011", 
    22 => "00111010100111110100000010100011", 
    23 => "10111010100000111101101111000010", 
    24 => "00111110111010111100100011000001", 
    25 => "00111111001001000110111011000001", 
    26 => "00111010000010101110111110110011", 
    27 => "00111110101000101011101001011010", 
    28 => "00111111011100010101000010101001", 
    29 => "00111010001010011101111010001011", 
    30 => "00000000000000000000000000000000", 
    31 => "00111001100100001011010000011000", 
    32 => "10111010001000100100010001100011", 
    33 => "00111001110001011010100000010101", 
    34 => "10111001101110101010010110000011", 
    35 => "00111110100100010000011010001010", 
    36 => "10111010010000101100010111100011", 
    37 => "00111111010100111010010101111111", 
    38 => "00111010000110111011011010101010", 
    39 => "00111110100011111010011110101000", 
    40 => "00111110100111010000000100011001", 
    41 => "00111110010110110010011101000110", 
    42 => "00111111010001100110111110110101", 
    43 => "00111110111011001110010111110111", 
    44 => "10111010000000111001100010100110", 
    45 => "00111001110111111101111011111000", 
    46 => "10111000001000111001001111101110", 
    47 => "00111001100010101110111110110011", 
    48 => "00111101110111111101011100011011", 
    49 => "00111000000111110110001000110000", 
    50 => "10111010010001100010111001001101", 
    51 => "00111000011110111010100010000010", 
    52 => "10111001011111111101101001000000", 
    53 => "00111001010110010000111000100100", 
    54 => "00111110000000101011001001111101", 
    55 => "00111110110111101000111010100100", 
    56 => "00111101100100010101110101110000", 
    57 => "00111111000110000101010000000100", 
    58 => "00111101111101111111011010110010", 
    59 => "00111001010110100001101010010011", 
    60 => "00111110011000000111100111100110", 
    61 => "10111001100101101111111010110101", 
    62 => "10110111111000100111111000001111", 
    63 => "00111000011001101010111111001101", 
    64 => "10111000110101011110100011010101", 
    65 => "00111111000000101110011011111011", 
    66 => "00111110011100110011011110101000", 
    67 => "00111000001000111001001111101110", 
    68 => "00111001001101111000000000110100", 
    69 => "00111110011000110010110000011111", 
    70 => "00111111010000001100010111101011", 
    71 => "00110110010010010101001110011100", 
    72 => "10111001011101010101110111100110", 
    73 => "00111111001111101010110111010110", 
    74 => "00111111011000110000100111011001", 
    75 => "00111111011011110001001010010000", 
    76 => "10111000110100011011011100010111", 
    77 => "00111001011001001001011011101110", 
    78 => "10110111110010010101001110011100", 
    79 => "00111110110100111000011100111000", 
    80 => "00111111001000100000000011010010", 
    81 => "00111111011000111010111001000111", 
    82 => "00111111010001111110111001001110", 
    83 => "10111000010001010010000111011110", 
    84 => "00111001010001100010111001001101", 
    85 => "00111111010110110111100110110111", 
    86 => "00111001011011110001001101001001", 
    87 => "00111111011000111100111001000010", 
    88 => "10111001000011111010011110101000", 
    89 => "00111110100110100001111101101101", 
    90 => "10111000110101011110100011010101", 
    91 => "00111111011010001110110010010110", 
    92 => "00111110111111111100010101101001", 
    93 => "00111110101010001011101000011111", 
    94 => "00111110101011101010101101111010", 
    95 => "00111111010101010100010001111000", 
    96 => "00111001000010110111010111101010", 
    97 => "00110111011110111010100010000010", 
    98 => "10111001000110000000101100100100", 
    99 => "10111000101000010111101100001111", 
    100 => "00111110111010000111111111101101", 
    101 => "00111001000101001110010111010110", 
    102 => "00111110101111000001011000010110", 
    103 => "00111111011010110101101011011001", 
    104 => "10111001000000110001001001101111", 
    105 => "00111110110001110011001101000100", 
    106 => "00111000011000100111111000001111", 
    107 => "00111110100101111010100000101111", 
    108 => "00111110111111111000001110011101", 
    109 => "00111110101010111010001011100000", 
    110 => "00111000100110010001011110010100", 
    111 => "00110111111000100111111000001111", 
    112 => "10111000101111001011111001100010", 
    113 => "10111000001100000010100100101000", 
    114 => "10110110010010010101001110011100", 
    115 => "00111110100110101000101010000011", 
    116 => "00111000111010101110000110001011", 
    117 => "00111110101000000000000000000000", 
    118 => "00111111001010101110111011001000", 
    119 => "10111000000110110011000001110011", 
    120 => "00111110111100010100100000010011", 
    121 => "00111111000010100100111001111011", 
    122 => "00111000110001010010000111011110", 
    123 => "00111110101101101110110111101110", 
    124 => "00111111010010101101000101011011", 
    125 => "00111001000000100000010111111111", 
    126 => "00110110101001111100010110101100", 
    127 => "10110111100111110110001000110000", 
    128 => "00111111001001110010000011111011", 
    129 => "00111110101100000011000110001100", 
    130 => "00111110110000010011111100000111", 
    131 => "00111111001010111111110001110110", 
    132 => "00110111100101101111111010110101", 
    133 => "00111000101010011101111010001011", 
    134 => "10110111000101101111111010110101", 
    135 => "00111110101101011110101111111011", 
    136 => "00111110110100110110100111111101", 
    137 => "00111110111111101100101111011010", 
    138 => "00111111001000011101100110010000", 
    139 => "10111001001001101011100100111101", 
    140 => "00111111001101111001101100000010", 
    141 => "00111111001001110100010111010000", 
    142 => "00111110111000101100111001000110", 
    143 => "10111001001110011001100100010011", 
    144 => "10111000001111001011111001100010", 
    145 => "00111111001110100000110010011110", 
    146 => "00111001001000101000011101111111", 
    147 => "00111111000010110110001110100010", 
    148 => "00111111001010111111101011100011", 
    149 => "00110110110010010101001110011100", 
    150 => "10111000101011100001000001001001", 
    151 => "00111000110010110110110001111010", 
    152 => "00111110100001001001101111101001", 
    153 => "10110111110010010101001110011100", 
    154 => "10111000111000000110010100110000", 
    155 => "00111110111001101000101010010011", 
    156 => "10110111101100000010100100101000", 
    157 => "00111110111000001000101101110110", 
    158 => "00111111010110111101011010110110", 
    159 => "00111000101000111001001111101110", 
    160 => "00111110101000011011111011010011", 
    161 => "10111000001110001000110010100100", 
    162 => "00110111110100011011011100010111", 
    163 => "00111000001110001000110010100100", 
    164 => "00111000101111101101011101000001", 
    165 => "00111110111010101011010000001111", 
    166 => "00111111000001000101110100010000", 
    167 => "00111111011000001010101011111100", 
    168 => "00110111001001111100010110101100", 
    169 => "00111000011111111101101001000000", 
    170 => "00111111000110001011101000110000", 
    171 => "00111110100010111011101001010110", 
    172 => "00110111101110001000110010100100", 
    173 => "00111110110101000101110100100000", 
    174 => "00111111001010001011101000110000", 
    175 => "00111110111111001110000110100100", 
    176 => "10111000111110011000111110100011", 
    177 => "00110111011110111010100010000010", 
    178 => "10111000000011101001101100111001", 
    179 => "10111000101111101101011101000001", 
    180 => "10111000001110001000110010100100", 
    181 => "00111000010101011110100011010101", 
    182 => "10111000010010010101001110011100", 
    183 => "00111000111010001100100010101100", 
    184 => "00110111110110100001101010010011", 
    185 => "10111000100001000001111011011110", 
    186 => "00110111001001111100010110101100", 
    187 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_bPq is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_bPq is
    component predict_ensemble_bPq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_bPq_rom_U :  component predict_ensemble_bPq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


