-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_pcA_rom is 
    generic(
             DWIDTH     : integer := 5; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_pcA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00001", 1 => "00011", 2 => "00101", 3 => "00111", 4 => "01001", 
    5 => "01011", 6 => "00000", 7 => "01101", 8 to 9=> "00000", 10 => "01111", 
    11 => "10001", 12 to 13=> "00000", 14 => "10011", 15 => "10101", 16 => "10111", 
    17 => "11001", 18 => "11011", 19 to 23=> "00000", 24 => "11101", 25 to 31=> "00000", 
    32 => "00001", 33 => "00011", 34 => "00101", 35 => "00111", 36 => "01001", 
    37 => "01011", 38 => "01101", 39 => "01111", 40 to 42=> "00000", 43 => "10001", 
    44 => "10011", 45 => "10101", 46 => "10111", 47 to 48=> "00000", 49 => "11001", 
    50 => "11011", 51 to 52=> "00000", 53 => "11101", 54 to 63=> "00000", 64 => "00001", 
    65 => "00011", 66 => "00101", 67 => "00111", 68 => "00000", 69 => "01001", 
    70 => "01011", 71 => "00000", 72 => "01101", 73 => "01111", 74 => "10001", 
    75 => "00000", 76 => "10011", 77 => "10101", 78 => "00000", 79 => "10111", 
    80 => "00000", 81 => "11001", 82 => "11011", 83 => "11101", 84 to 95=> "00000", 
    96 => "00001", 97 => "00011", 98 => "00101", 99 => "00111", 100 => "01001", 
    101 => "01011", 102 => "01101", 103 => "01111", 104 => "00000", 105 => "10001", 
    106 => "10011", 107 to 108=> "00000", 109 => "10101", 110 => "10111", 111 to 112=> "00000", 
    113 => "11001", 114 => "11011", 115 to 119=> "00000", 120 => "11101", 121 to 127=> "00000", 
    128 => "00001", 129 => "00011", 130 => "00101", 131 => "00111", 132 => "01001", 
    133 => "01011", 134 => "01101", 135 => "01111", 136 => "10001", 137 => "10011", 
    138 => "10101", 139 to 141=> "00000", 142 => "10111", 143 => "11001", 144 => "11011", 
    145 to 151=> "00000", 152 => "11101", 153 to 159=> "00000", 160 => "00001", 161 => "00011", 
    162 => "00101", 163 => "00111", 164 => "01001", 165 => "01011", 166 => "01101", 
    167 => "01111", 168 => "00000", 169 => "10001", 170 => "00000", 171 => "10011", 
    172 to 173=> "00000", 174 => "10101", 175 => "10111", 176 to 181=> "00000", 182 => "11001", 
    183 => "00000", 184 => "11011", 185 => "11101", 186 to 191=> "00000", 192 => "00001", 
    193 => "00011", 194 => "00101", 195 => "00111", 196 => "01001", 197 => "01011", 
    198 => "01101", 199 => "01111", 200 => "00000", 201 => "10001", 202 => "10011", 
    203 => "10101", 204 => "10111", 205 => "11001", 206 => "11011", 207 to 213=> "00000", 
    214 => "11101", 215 to 223=> "00000", 224 => "00001", 225 => "00000", 226 => "00011", 
    227 => "00101", 228 => "00111", 229 => "01001", 230 => "01011", 231 => "00000", 
    232 => "01101", 233 => "01111", 234 to 236=> "00000", 237 => "10001", 238 => "10011", 
    239 => "10101", 240 => "10111", 241 => "11001", 242 => "11011", 243 => "00000", 
    244 => "11101", 245 to 255=> "00000", 256 => "00001", 257 => "00011", 258 => "00101", 
    259 => "00111", 260 => "01001", 261 => "01011", 262 => "01101", 263 => "01111", 
    264 => "10001", 265 => "10011", 266 => "10101", 267 to 268=> "00000", 269 => "10111", 
    270 => "11001", 271 => "11011", 272 to 277=> "00000", 278 => "11101", 279 to 287=> "00000", 
    288 => "00001", 289 => "00011", 290 => "00101", 291 => "00111", 292 => "00000", 
    293 => "01001", 294 => "01011", 295 => "01101", 296 to 299=> "00000", 300 => "01111", 
    301 => "10001", 302 => "10011", 303 => "00000", 304 => "10101", 305 to 308=> "00000", 
    309 => "10111", 310 => "11001", 311 => "11011", 312 to 313=> "00000", 314 => "11101", 
    315 to 319=> "00000", 320 => "00001", 321 => "00011", 322 => "00101", 323 => "00111", 
    324 to 325=> "00000", 326 => "01001", 327 => "01011", 328 => "01101", 329 => "01111", 
    330 => "10001", 331 => "10011", 332 => "10101", 333 => "00000", 334 => "10111", 
    335 => "11001", 336 => "11011", 337 => "00000", 338 => "11101", 339 to 351=> "00000", 
    352 => "00001", 353 => "00011", 354 => "00101", 355 => "00111", 356 to 357=> "00000", 
    358 => "01001", 359 => "01011", 360 => "00000", 361 => "01101", 362 => "01111", 
    363 => "10001", 364 to 365=> "00000", 366 => "10011", 367 => "00000", 368 => "10101", 
    369 => "10111", 370 => "11001", 371 => "11011", 372 => "11101", 373 to 383=> "00000", 
    384 => "00001", 385 => "00000", 386 => "00011", 387 => "00101", 388 => "00111", 
    389 => "01001", 390 to 391=> "00000", 392 => "01011", 393 => "01101", 394 => "01111", 
    395 => "10001", 396 => "10011", 397 => "10101", 398 => "10111", 399 => "00000", 
    400 => "11001", 401 => "00000", 402 => "11011", 403 => "11101", 404 to 415=> "00000", 
    416 => "00001", 417 => "00011", 418 => "00101", 419 => "00111", 420 => "01001", 
    421 => "00000", 422 => "01011", 423 => "01101", 424 to 426=> "00000", 427 => "01111", 
    428 => "10001", 429 => "10011", 430 => "10101", 431 => "00000", 432 => "10111", 
    433 => "11001", 434 => "11011", 435 to 439=> "00000", 440 => "11101", 441 to 447=> "00000", 
    448 => "00001", 449 => "00011", 450 => "00101", 451 => "00111", 452 => "01001", 
    453 => "01011", 454 => "01101", 455 => "01111", 456 to 458=> "00000", 459 => "10001", 
    460 => "10011", 461 => "00000", 462 => "10101", 463 to 464=> "00000", 465 => "10111", 
    466 => "11001", 467 => "00000", 468 => "11011", 469 => "11101", 470 to 479=> "00000", 
    480 => "00001", 481 => "00011", 482 => "00101", 483 to 485=> "00000", 486 => "00111", 
    487 => "00000", 488 => "01001", 489 => "01011", 490 => "01101", 491 to 493=> "00000", 
    494 => "01111", 495 => "00000", 496 => "10001", 497 => "10011", 498 => "10101", 
    499 => "10111", 500 => "00000", 501 => "11001", 502 => "11011", 503 to 506=> "00000", 
    507 => "11101", 508 to 511=> "00000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_pcA is
    generic (
        DataWidth : INTEGER := 5;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_pcA is
    component predict_ensemble_pcA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_pcA_rom_U :  component predict_ensemble_pcA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


