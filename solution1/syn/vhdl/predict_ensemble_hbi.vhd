-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_hbi_rom is 
    generic(
             DWIDTH     : integer := 3; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_hbi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 1=> "001", 2 => "011", 3 to 4=> "001", 5 => "010", 6 => "000", 7 => "011", 
    8 to 9=> "000", 10 => "100", 11 => "010", 12 to 13=> "000", 14 to 16=> "100", 17 => "010", 
    18 => "100", 19 to 23=> "000", 24 => "100", 25 to 31=> "000", 32 => "010", 33 => "011", 
    34 => "001", 35 => "100", 36 => "010", 37 => "001", 38 => "100", 39 => "011", 
    40 to 42=> "000", 43 to 44=> "001", 45 => "011", 46 => "100", 47 to 48=> "000", 49 to 50=> "001", 
    51 to 52=> "000", 53 => "001", 54 to 63=> "000", 64 to 65=> "010", 66 to 67=> "011", 68 => "000", 
    69 => "001", 70 => "010", 71 => "000", 72 to 73=> "100", 74 => "001", 75 => "000", 
    76 => "010", 77 => "001", 78 => "000", 79 => "011", 80 => "000", 81 to 82=> "001", 
    83 => "010", 84 to 95=> "000", 96 => "011", 97 to 98=> "100", 99 => "001", 100 => "100", 
    101 => "010", 102 to 103=> "001", 104 => "000", 105 => "100", 106 => "001", 107 to 108=> "000", 
    109 => "001", 110 => "010", 111 to 112=> "000", 113 to 114=> "100", 115 to 119=> "000", 120 => "010", 
    121 to 127=> "000", 128 => "001", 129 => "100", 130 => "001", 131 to 133=> "100", 134 => "001", 
    135 to 136=> "010", 137 => "011", 138 => "100", 139 to 141=> "000", 142 => "010", 143 to 144=> "001", 
    145 to 151=> "000", 152 => "001", 153 to 159=> "000", 160 to 162=> "010", 163 => "011", 164 => "100", 
    165 to 166=> "010", 167 => "011", 168 => "000", 169 => "100", 170 => "000", 171 => "011", 
    172 to 173=> "000", 174 => "010", 175 => "100", 176 to 181=> "000", 182 => "010", 183 => "000", 
    184 to 185=> "001", 186 to 191=> "000", 192 to 193=> "011", 194 => "001", 195 => "011", 196 to 197=> "100", 
    198 to 199=> "001", 200 => "000", 201 => "010", 202 to 203=> "100", 204 to 206=> "001", 207 to 213=> "000", 
    214 => "001", 215 to 223=> "000", 224 => "100", 225 => "000", 226 to 229=> "100", 230 => "001", 
    231 => "000", 232 => "010", 233 => "001", 234 to 236=> "000", 237 => "010", 238 to 239=> "001", 
    240 => "011", 241 => "010", 242 => "001", 243 => "000", 244 => "100", 245 to 255=> "000", 
    256 => "100", 257 => "010", 258 => "100", 259 => "001", 260 => "010", 261 => "011", 
    262 => "010", 263 => "100", 264 to 265=> "001", 266 => "010", 267 to 268=> "000", 269 to 270=> "010", 
    271 => "100", 272 to 277=> "000", 278 => "010", 279 to 287=> "000", 288 to 290=> "010", 291 => "001", 
    292 => "000", 293 => "011", 294 => "010", 295 => "100", 296 to 299=> "000", 300 => "010", 
    301 => "001", 302 => "010", 303 => "000", 304 => "100", 305 to 308=> "000", 309 => "001", 
    310 to 311=> "100", 312 to 313=> "000", 314 => "100", 315 to 319=> "000", 320 to 321=> "100", 322 to 323=> "001", 
    324 to 325=> "000", 326 => "100", 327 to 329=> "001", 330 => "100", 331 => "001", 332 => "010", 
    333 => "000", 334 to 336=> "001", 337 => "000", 338 => "001", 339 to 351=> "000", 352 to 353=> "010", 
    354 => "011", 355 => "010", 356 to 357=> "000", 358 => "001", 359 => "010", 360 => "000", 
    361 => "010", 362 => "001", 363 => "010", 364 to 365=> "000", 366 => "100", 367 => "000", 
    368 => "100", 369 to 370=> "010", 371 => "100", 372 => "001", 373 to 383=> "000", 384 => "010", 
    385 => "000", 386 to 388=> "100", 389 => "001", 390 to 391=> "000", 392 => "011", 393 => "010", 
    394 => "100", 395 => "011", 396 => "010", 397 => "011", 398 => "010", 399 => "000", 
    400 => "011", 401 => "000", 402 to 403=> "100", 404 to 415=> "000", 416 to 419=> "001", 420 => "010", 
    421 => "000", 422 => "011", 423 => "001", 424 to 426=> "000", 427 to 428=> "001", 429 => "010", 
    430 => "001", 431 => "000", 432 to 434=> "001", 435 to 439=> "000", 440 => "001", 441 to 447=> "000", 
    448 => "011", 449 => "010", 450 to 454=> "001", 455 => "100", 456 to 458=> "000", 459 => "100", 
    460 => "010", 461 => "000", 462 => "100", 463 to 464=> "000", 465 to 466=> "100", 467 => "000", 
    468 => "010", 469 => "001", 470 to 479=> "000", 480 to 482=> "100", 483 to 485=> "000", 486 => "100", 
    487 => "000", 488 => "001", 489 => "100", 490 => "001", 491 to 493=> "000", 494 => "100", 
    495 => "000", 496 => "001", 497 => "011", 498 => "001", 499 => "011", 500 => "000", 
    501 to 502=> "001", 503 to 506=> "000", 507 => "010", 508 to 511=> "000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_hbi is
    generic (
        DataWidth : INTEGER := 3;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_hbi is
    component predict_ensemble_hbi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_hbi_rom_U :  component predict_ensemble_hbi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


