-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_Lf8_rom is 
    generic(
             DWIDTH     : integer := 5; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_Lf8_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00010", 1 => "00100", 2 => "00110", 3 => "01000", 4 => "01010", 
    5 => "01100", 6 => "01110", 7 => "10000", 8 => "10010", 9 => "10100", 
    10 => "00000", 11 => "10110", 12 => "11000", 13 => "11010", 14 => "11100", 
    15 to 16=> "00000", 17 => "11110", 18 to 31=> "00000", 32 => "00010", 33 => "00100", 
    34 => "00000", 35 => "00110", 36 => "01000", 37 => "01010", 38 => "01100", 
    39 => "00000", 40 => "01110", 41 => "10000", 42 => "10010", 43 => "10100", 
    44 => "10110", 45 to 46=> "00000", 47 => "11000", 48 to 49=> "00000", 50 => "11010", 
    51 to 52=> "00000", 53 => "11100", 54 => "11110", 55 to 63=> "00000", 64 => "00010", 
    65 => "00100", 66 => "00110", 67 => "01000", 68 => "00000", 69 => "01010", 
    70 => "01100", 71 => "01110", 72 => "10000", 73 => "10010", 74 => "10100", 
    75 => "10110", 76 => "11000", 77 => "11010", 78 to 79=> "00000", 80 => "11100", 
    81 => "11110", 82 to 95=> "00000", 96 => "00010", 97 => "00100", 98 => "00110", 
    99 => "01000", 100 => "00000", 101 => "01010", 102 => "01100", 103 => "01110", 
    104 => "00000", 105 => "10000", 106 => "00000", 107 => "10010", 108 => "10100", 
    109 to 110=> "00000", 111 => "10110", 112 => "11000", 113 => "11010", 114 => "00000", 
    115 => "11100", 116 => "11110", 117 to 127=> "00000", 128 => "00010", 129 => "00100", 
    130 => "00110", 131 => "01000", 132 => "01010", 133 => "01100", 134 => "01110", 
    135 => "10000", 136 => "10010", 137 to 138=> "00000", 139 => "10100", 140 to 141=> "00000", 
    142 => "10110", 143 => "11000", 144 => "11010", 145 => "11100", 146 to 149=> "00000", 
    150 => "11110", 151 to 159=> "00000", 160 => "00010", 161 => "00100", 162 => "00110", 
    163 => "01000", 164 => "01010", 165 => "01100", 166 => "01110", 167 => "10000", 
    168 => "10010", 169 => "00000", 170 => "10100", 171 => "00000", 172 => "10110", 
    173 => "11000", 174 => "11010", 175 => "00000", 176 => "11100", 177 to 184=> "00000", 
    185 => "11110", 186 to 191=> "00000", 192 => "00010", 193 => "00100", 194 => "00110", 
    195 => "01000", 196 => "01010", 197 => "01100", 198 => "01110", 199 => "10000", 
    200 => "10010", 201 => "10100", 202 => "10110", 203 => "00000", 204 => "11000", 
    205 => "00000", 206 => "11010", 207 => "00000", 208 => "11100", 209 to 216=> "00000", 
    217 => "11110", 218 to 223=> "00000", 224 => "00010", 225 => "00100", 226 => "00110", 
    227 => "01000", 228 => "00000", 229 => "01010", 230 => "01100", 231 => "01110", 
    232 => "10000", 233 to 234=> "00000", 235 => "10010", 236 => "10100", 237 => "10110", 
    238 to 244=> "00000", 245 => "11000", 246 => "00000", 247 => "11010", 248 => "00000", 
    249 => "11100", 250 => "11110", 251 to 255=> "00000", 256 => "00010", 257 => "00100", 
    258 => "00110", 259 => "01000", 260 => "01010", 261 => "01100", 262 => "01110", 
    263 => "10000", 264 => "10010", 265 => "00000", 266 => "10100", 267 => "10110", 
    268 => "11000", 269 => "11010", 270 => "11100", 271 => "11110", 272 to 287=> "00000", 
    288 => "00010", 289 => "00100", 290 => "00110", 291 => "01000", 292 => "01010", 
    293 => "01100", 294 => "00000", 295 => "01110", 296 => "10000", 297 => "00000", 
    298 => "10010", 299 => "10100", 300 => "10110", 301 => "11000", 302 => "11010", 
    303 to 304=> "00000", 305 => "11100", 306 => "11110", 307 to 319=> "00000", 320 => "00010", 
    321 => "00100", 322 => "00110", 323 => "00000", 324 => "01000", 325 => "01010", 
    326 => "01100", 327 => "01110", 328 => "10000", 329 => "00000", 330 => "10010", 
    331 => "10100", 332 => "10110", 333 => "11000", 334 to 335=> "00000", 336 => "11010", 
    337 => "11100", 338 to 341=> "00000", 342 => "11110", 343 to 351=> "00000", 352 => "00010", 
    353 => "00100", 354 => "00110", 355 => "01000", 356 => "01010", 357 => "01100", 
    358 => "01110", 359 => "10000", 360 => "10010", 361 to 362=> "00000", 363 => "10100", 
    364 => "10110", 365 => "11000", 366 to 370=> "00000", 371 => "11010", 372 => "00000", 
    373 => "11100", 374 => "11110", 375 to 383=> "00000", 384 => "00010", 385 => "00100", 
    386 => "00110", 387 to 388=> "00000", 389 => "01000", 390 => "01010", 391 => "00000", 
    392 => "01100", 393 => "00000", 394 => "01110", 395 to 396=> "00000", 397 => "10000", 
    398 => "10010", 399 => "00000", 400 => "10100", 401 => "10110", 402 => "11000", 
    403 to 404=> "00000", 405 => "11010", 406 => "11100", 407 => "00000", 408 => "11110", 
    409 to 415=> "00000", 416 => "00010", 417 => "00100", 418 => "00110", 419 => "01000", 
    420 => "01010", 421 => "01100", 422 => "01110", 423 => "10000", 424 => "10010", 
    425 => "00000", 426 => "10100", 427 to 429=> "00000", 430 => "10110", 431 => "11000", 
    432 => "11010", 433 to 434=> "00000", 435 => "11100", 436 to 437=> "00000", 438 => "11110", 
    439 to 447=> "00000", 448 => "00010", 449 => "00100", 450 => "00000", 451 => "00110", 
    452 => "01000", 453 => "01010", 454 to 455=> "00000", 456 => "01100", 457 => "01110", 
    458 => "00000", 459 => "10000", 460 => "10010", 461 => "10100", 462 => "10110", 
    463 => "11000", 464 => "11010", 465 => "00000", 466 => "11100", 467 to 468=> "00000", 
    469 => "11110", 470 to 479=> "00000", 480 => "00010", 481 => "00100", 482 => "00110", 
    483 to 484=> "00000", 485 => "01000", 486 => "01010", 487 => "01100", 488 => "01110", 
    489 => "10000", 490 => "10010", 491 => "10100", 492 => "10110", 493 to 494=> "00000", 
    495 => "11000", 496 => "11010", 497 => "11100", 498 => "11110", 499 to 511=> "00000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_Lf8 is
    generic (
        DataWidth : INTEGER := 5;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_Lf8 is
    component predict_ensemble_Lf8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_Lf8_rom_U :  component predict_ensemble_Lf8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


