-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_zec_rom is 
    generic(
             DWIDTH     : integer := 3; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_zec_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "001", 1 => "010", 2 to 5=> "100", 6 => "011", 7 to 9=> "001", 10 => "000", 
    11 to 13=> "100", 14 => "001", 15 to 16=> "000", 17 => "001", 18 to 31=> "000", 32 => "100", 
    33 => "001", 34 => "000", 35 => "001", 36 => "011", 37 to 38=> "100", 39 => "000", 
    40 to 42=> "100", 43 to 44=> "010", 45 to 46=> "000", 47 => "100", 48 to 49=> "000", 50 => "010", 
    51 to 52=> "000", 53 => "100", 54 => "011", 55 to 63=> "000", 64 to 65=> "001", 66 => "011", 
    67 => "100", 68 => "000", 69 => "001", 70 => "100", 71 to 73=> "001", 74 to 75=> "010", 
    76 => "001", 77 => "100", 78 to 79=> "000", 80 => "011", 81 => "100", 82 to 95=> "000", 
    96 => "011", 97 => "001", 98 to 99=> "010", 100 => "000", 101 to 102=> "010", 103 => "001", 
    104 => "000", 105 => "011", 106 => "000", 107 => "001", 108 => "010", 109 to 110=> "000", 
    111 => "001", 112 => "100", 113 => "001", 114 => "000", 115 => "011", 116 => "001", 
    117 to 127=> "000", 128 to 130=> "010", 131 => "100", 132 to 135=> "010", 136 => "011", 137 to 138=> "000", 
    139 => "011", 140 to 141=> "000", 142 => "100", 143 => "010", 144 => "001", 145 => "010", 
    146 to 149=> "000", 150 => "001", 151 to 159=> "000", 160 to 162=> "100", 163 => "011", 164 => "100", 
    165 => "011", 166 => "001", 167 to 168=> "010", 169 => "000", 170 => "100", 171 => "000", 
    172 to 173=> "001", 174 => "100", 175 => "000", 176 => "001", 177 to 184=> "000", 185 => "100", 
    186 to 191=> "000", 192 to 195=> "001", 196 => "011", 197 => "100", 198 => "001", 199 => "100", 
    200 => "010", 201 => "001", 202 => "011", 203 => "000", 204 => "011", 205 => "000", 
    206 => "010", 207 => "000", 208 => "100", 209 to 216=> "000", 217 => "100", 218 to 223=> "000", 
    224 => "001", 225 => "100", 226 => "010", 227 => "100", 228 => "000", 229 => "100", 
    230 => "001", 231 to 232=> "100", 233 to 234=> "000", 235 => "010", 236 => "001", 237 => "100", 
    238 to 244=> "000", 245 => "100", 246 => "000", 247 => "001", 248 => "000", 249 => "001", 
    250 => "011", 251 to 255=> "000", 256 to 258=> "100", 259 to 260=> "010", 261 => "011", 262 => "010", 
    263 => "100", 264 => "010", 265 => "000", 266 to 267=> "010", 268 => "100", 269 => "010", 
    270 to 271=> "001", 272 to 287=> "000", 288 => "010", 289 to 293=> "100", 294 => "000", 295 => "001", 
    296 => "100", 297 => "000", 298 => "001", 299 => "010", 300 => "100", 301 => "001", 
    302 => "100", 303 to 304=> "000", 305 => "100", 306 => "001", 307 to 319=> "000", 320 => "011", 
    321 to 322=> "001", 323 => "000", 324 => "100", 325 => "001", 326 => "100", 327 => "001", 
    328 => "100", 329 => "000", 330 => "100", 331 to 332=> "001", 333 => "100", 334 to 335=> "000", 
    336 => "100", 337 => "001", 338 to 341=> "000", 342 => "001", 343 to 351=> "000", 352 => "011", 
    353 to 355=> "010", 356 to 358=> "001", 359 => "100", 360 => "011", 361 to 362=> "000", 363 to 364=> "100", 
    365 => "010", 366 to 370=> "000", 371 => "100", 372 => "000", 373 => "100", 374 => "001", 
    375 to 383=> "000", 384 to 386=> "001", 387 to 388=> "000", 389 => "011", 390 => "001", 391 => "000", 
    392 => "001", 393 => "000", 394 => "001", 395 to 396=> "000", 397 => "100", 398 => "001", 
    399 => "000", 400 => "100", 401 => "010", 402 => "001", 403 to 404=> "000", 405 to 406=> "010", 
    407 => "000", 408 => "100", 409 to 415=> "000", 416 => "001", 417 => "100", 418 => "001", 
    419 to 420=> "100", 421 => "010", 422 to 424=> "001", 425 => "000", 426 => "010", 427 to 429=> "000", 
    430 => "001", 431 => "100", 432 => "011", 433 to 434=> "000", 435 => "001", 436 to 437=> "000", 
    438 => "001", 439 to 447=> "000", 448 => "011", 449 => "100", 450 => "000", 451 to 453=> "100", 
    454 to 455=> "000", 456 to 457=> "010", 458 => "000", 459 to 462=> "010", 463 => "100", 464 => "001", 
    465 => "000", 466 => "010", 467 to 468=> "000", 469 => "011", 470 to 479=> "000", 480 => "011", 
    481 to 482=> "010", 483 to 484=> "000", 485 to 486=> "010", 487 to 488=> "001", 489 to 490=> "010", 491 to 492=> "100", 
    493 to 494=> "000", 495 => "010", 496 to 497=> "001", 498 => "100", 499 to 511=> "000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_zec is
    generic (
        DataWidth : INTEGER := 3;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_zec is
    component predict_ensemble_zec_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_zec_rom_U :  component predict_ensemble_zec_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


