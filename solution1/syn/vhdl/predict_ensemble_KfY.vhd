-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_KfY_rom is 
    generic(
             DWIDTH     : integer := 5; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_KfY_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00001", 1 => "00011", 2 => "00101", 3 => "00111", 4 => "01001", 
    5 => "00000", 6 => "01011", 7 => "01101", 8 => "00000", 9 => "01111", 
    10 => "10001", 11 => "10011", 12 to 13=> "00000", 14 => "10101", 15 to 16=> "00000", 
    17 => "10111", 18 => "00000", 19 => "11001", 20 => "00000", 21 => "11011", 
    22 => "11101", 23 to 31=> "00000", 32 => "00001", 33 => "00011", 34 => "00000", 
    35 => "00101", 36 => "00111", 37 => "01001", 38 to 39=> "00000", 40 => "01011", 
    41 => "01101", 42 to 43=> "00000", 44 => "01111", 45 => "10001", 46 => "00000", 
    47 => "10011", 48 => "10101", 49 to 50=> "00000", 51 => "10111", 52 => "11001", 
    53 => "11011", 54 => "11101", 55 to 63=> "00000", 64 => "00001", 65 => "00011", 
    66 => "00101", 67 => "00111", 68 => "01001", 69 => "01011", 70 => "01101", 
    71 => "01111", 72 => "10001", 73 => "00000", 74 => "10011", 75 => "10101", 
    76 => "10111", 77 => "00000", 78 => "11001", 79 to 84=> "00000", 85 => "11011", 
    86 to 87=> "00000", 88 => "11101", 89 to 95=> "00000", 96 => "00001", 97 => "00011", 
    98 => "00101", 99 => "00111", 100 => "00000", 101 => "01001", 102 => "01011", 
    103 => "01101", 104 => "01111", 105 => "10001", 106 to 107=> "00000", 108 => "10011", 
    109 => "10101", 110 => "10111", 111 => "00000", 112 => "11001", 113 to 115=> "00000", 
    116 => "11011", 117 to 119=> "00000", 120 => "11101", 121 to 127=> "00000", 128 => "00001", 
    129 => "00011", 130 => "00101", 131 => "00111", 132 => "01001", 133 => "01011", 
    134 => "01101", 135 => "01111", 136 => "10001", 137 => "10011", 138 to 141=> "00000", 
    142 => "10101", 143 => "10111", 144 => "11001", 145 => "11011", 146 to 149=> "00000", 
    150 => "11101", 151 to 159=> "00000", 160 => "00001", 161 => "00011", 162 => "00000", 
    163 => "00101", 164 => "00111", 165 => "01001", 166 => "01011", 167 => "01101", 
    168 => "01111", 169 => "10001", 170 to 172=> "00000", 173 => "10011", 174 => "10101", 
    175 => "00000", 176 => "10111", 177 to 178=> "00000", 179 => "11001", 180 => "11011", 
    181 to 183=> "00000", 184 => "11101", 185 to 191=> "00000", 192 => "00001", 193 => "00011", 
    194 => "00101", 195 => "00111", 196 to 197=> "00000", 198 => "01001", 199 => "01011", 
    200 => "01101", 201 => "01111", 202 => "10001", 203 to 204=> "00000", 205 => "10011", 
    206 => "10101", 207 => "10111", 208 => "11001", 209 to 214=> "00000", 215 => "11011", 
    216 => "11101", 217 to 223=> "00000", 224 => "00001", 225 => "00011", 226 => "00101", 
    227 => "00111", 228 => "01001", 229 => "00000", 230 => "01011", 231 => "01101", 
    232 => "01111", 233 => "10001", 234 => "10011", 235 => "10101", 236 => "10111", 
    237 => "11001", 238 to 239=> "00000", 240 => "11011", 241 to 247=> "00000", 248 => "11101", 
    249 to 255=> "00000", 256 => "00001", 257 => "00011", 258 => "00101", 259 => "00111", 
    260 to 261=> "00000", 262 => "01001", 263 => "01011", 264 => "00000", 265 => "01101", 
    266 => "00000", 267 => "01111", 268 => "10001", 269 => "10011", 270 => "00000", 
    271 => "10101", 272 => "10111", 273 => "00000", 274 => "11001", 275 to 276=> "00000", 
    277 => "11011", 278 => "11101", 279 to 287=> "00000", 288 => "00001", 289 => "00011", 
    290 => "00101", 291 => "00111", 292 => "01001", 293 => "00000", 294 => "01011", 
    295 => "01101", 296 to 298=> "00000", 299 => "01111", 300 => "10001", 301 => "10011", 
    302 => "00000", 303 => "10101", 304 => "10111", 305 => "11001", 306 => "11011", 
    307 to 314=> "00000", 315 => "11101", 316 to 319=> "00000", 320 => "00001", 321 => "00011", 
    322 => "00101", 323 => "00111", 324 => "00000", 325 => "01001", 326 => "01011", 
    327 => "00000", 328 => "01101", 329 to 330=> "00000", 331 => "01111", 332 => "10001", 
    333 => "10011", 334 => "10101", 335 => "10111", 336 => "00000", 337 => "11001", 
    338 => "11011", 339 to 347=> "00000", 348 => "11101", 349 to 351=> "00000", 352 => "00001", 
    353 => "00011", 354 => "00101", 355 => "00111", 356 to 357=> "00000", 358 => "01001", 
    359 => "01011", 360 => "01101", 361 => "01111", 362 => "10001", 363 => "10011", 
    364 => "10101", 365 => "00000", 366 => "10111", 367 => "00000", 368 => "11001", 
    369 => "00000", 370 => "11011", 371 => "11101", 372 to 383=> "00000", 384 => "00001", 
    385 => "00011", 386 => "00101", 387 => "00111", 388 => "01001", 389 => "01011", 
    390 => "01101", 391 => "01111", 392 => "00000", 393 => "10001", 394 => "00000", 
    395 => "10011", 396 => "10101", 397 => "00000", 398 => "10111", 399 to 401=> "00000", 
    402 => "11001", 403 to 405=> "00000", 406 => "11011", 407 => "00000", 408 => "11101", 
    409 to 415=> "00000", 416 => "00001", 417 => "00011", 418 => "00101", 419 => "00000", 
    420 => "00111", 421 => "00000", 422 => "01001", 423 => "01011", 424 => "00000", 
    425 => "01101", 426 => "01111", 427 => "00000", 428 => "10001", 429 => "10011", 
    430 => "10101", 431 => "10111", 432 => "11001", 433 to 437=> "00000", 438 => "11011", 
    439 to 440=> "00000", 441 => "11101", 442 to 447=> "00000", 448 => "00001", 449 => "00011", 
    450 => "00101", 451 => "00111", 452 to 453=> "00000", 454 => "01001", 455 => "01011", 
    456 => "01101", 457 => "01111", 458 => "10001", 459 => "10011", 460 => "10101", 
    461 => "10111", 462 => "11001", 463 => "11011", 464 to 465=> "00000", 466 => "11101", 
    467 to 479=> "00000", 480 => "00001", 481 => "00011", 482 => "00101", 483 to 484=> "00000", 
    485 => "00111", 486 => "01001", 487 => "01011", 488 to 489=> "00000", 490 => "01101", 
    491 to 493=> "00000", 494 => "01111", 495 => "10001", 496 => "10011", 497 to 499=> "00000", 
    500 => "10101", 501 => "00000", 502 => "10111", 503 => "11001", 504 => "11011", 
    505 to 507=> "00000", 508 => "11101", 509 to 511=> "00000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_KfY is
    generic (
        DataWidth : INTEGER := 5;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_KfY is
    component predict_ensemble_KfY_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_KfY_rom_U :  component predict_ensemble_KfY_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


