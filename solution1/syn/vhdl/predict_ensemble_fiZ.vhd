-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_fiZ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_fiZ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100110001001110101101011", 
    1 => "00111111000101011101000000110001", 
    2 => "00111111011100111000001100000110", 
    3 => "00111101011011010111010000001100", 
    4 => "10111101110010111001101010011110", 
    5 => "00111110000001101011011101100111", 
    6 => "00111101111111000100010000111001", 
    7 => "00111010100000100010011110001101", 
    8 => "00111110100100101011001110001001", 
    9 => "00111110101100111010000111010011", 
    10 => "00111110010100101111001010110110", 
    11 => "10111101101011011010101000001101", 
    12 => "10111101001010011001111010010101", 
    13 => "10111100101010101100101110000110", 
    14 => "00111110010110001110101000111010", 
    15 => "00111110110000111011100111110001", 
    16 => "00111101011101100011101100100101", 
    17 => "00111110001100111101010011110001", 
    18 => "00111101111110001010010000111100", 
    19 => "10111100010001000000100011011001", 
    20 => "10111101101101100000110001111100", 
    21 => "00111110110101000011010100100110", 
    22 => "00111101100011000111110110100010", 
    23 => "10111100100111100110011010001000", 
    24 => "00111111000100010011111010100011", 
    25 => "10111101000010000100110001101010", 
    26 => "00111101001011000010100010110011", 
    27 => "10111110000101100011100100001101", 
    28 => "00111101101001100111001110000010", 
    29 => "00111101011010000011100100000100", 
    30 => "00111100010110101101001100100000", 
    31 => "10111100010010010001110100010101", 
    32 => "00111110101101010000100011010101", 
    33 => "00111110000111110010100011001000", 
    34 => "00111101110010101110100111101110", 
    35 => "00111110000111111010101100010001", 
    36 => "00111101100010011101110101111111", 
    37 => "00111111000101100001010111111101", 
    38 => "00111101111011000010101111011000", 
    39 => "10111101110011010101011010110000", 
    40 => "10111010011001100010100110010101", 
    41 => "00111101111000000100000001111101", 
    42 => "00111101111110001001101001000110", 
    43 => "10111100010000010001101000010001", 
    44 => "00111101111101100001000100110100", 
    45 => "10111101100011111010110111110011", 
    46 => "00111111011110000111011001111101", 
    47 => "00111110101111000001011000010110", 
    48 => "00111101011110101001010010111100", 
    49 => "00111111010011110110110001011001", 
    50 => "00111110101100100100011011100001", 
    51 => "00111111011010100101011010111101", 
    52 => "10111101101100000111011011000000", 
    53 => "00111111010011001110101111011101", 
    54 => "00111110000000011011100110110110", 
    55 => "00111111001100011010111100111010", 
    56 => "10111101101100101011000010100111", 
    57 => "00111111001101000010110001011110", 
    58 => "00111111000000101101111011101100", 
    59 => "00111101100001010111100001100000", 
    60 => "00111110000001100100010001010010", 
    61 => "00111111000010101100101000100101", 
    62 => "10111101011111111001110001100011", 
    63 => "00111101010000000100101001110011", 
    64 => "00111101101111010101000000100010", 
    65 => "10111011111000011100010110000010", 
    66 => "00111101000000000010100011100101", 
    67 => "10111101011110110101110100000011", 
    68 => "00111110101110101000100011110000", 
    69 => "00111110101110011101011111011100", 
    70 => "00111101001110010001011000000001", 
    71 => "00111110010111100100001110101010", 
    72 => "00111110110011001000001000111000", 
    73 => "10111101011101001110000100011110", 
    74 => "00111110110010101110011000100001", 
    75 => "10111100001101001010011001100101", 
    76 => "10111101100110011100111110011010", 
    77 => "00111101010110100110110001011101", 
    78 => "00111111000111010000111011101101", 
    79 => "00111110111111100110100010100001", 
    80 => "00111111011010100011010100101111", 
    81 => "00111110111000000111010000000000", 
    82 => "00111111000101000000110100011011", 
    83 => "00111110100111100110001100100000", 
    84 => "10111101011100111110110011001100", 
    85 => "00111111010110111001011110011010", 
    86 => "00111110110111000001101110010111", 
    87 => "00111111000000101001100011011101", 
    88 => "00111111000000101000111011110111", 
    89 => "00111101100001100111100011000000", 
    90 => "00111011111011001001010111000000", 
    91 => "00111101011001100000100000000111", 
    92 => "00111101000111101110011001110101", 
    93 => "00111101100110110000101000101101", 
    94 => "00111100110100010011100101000011", 
    95 => "10111100111100000001100101101110", 
    96 => "00111011101000010101100110000001", 
    97 => "00111110101111111111111101111010", 
    98 => "00111111000011110111110001000110", 
    99 => "00111110111111011110000111100011", 
    100 => "00111110100010001011101000011111", 
    101 => "00111100111010101011011110011001", 
    102 => "00111110011111101010100101100001", 
    103 => "00111110011101010111000010000010", 
    104 => "00111111000000111010111011101111", 
    105 => "10111101001000011101011001001001", 
    106 => "00111100101010000101101010010010", 
    107 => "00111110110000011100101000011001", 
    108 => "10111101101111011110101001000110", 
    109 => "10111101000000000101110001000110", 
    110 => "00111111001011101010010000110011", 
    111 => "00111110001011011011110100110000", 
    112 => "00111110010111100100110101011110", 
    113 => "00111101000100110100101011001011", 
    114 => "00111111001100000000000000000000", 
    115 => "00111100110001011111111000010001", 
    116 => "00111101001111100101001000010101", 
    117 => "00111110011110101010011111011111", 
    118 => "00111110111011011111110111110000", 
    119 => "00111110110110100010111001111111", 
    120 => "00111110000110101011010010110111", 
    121 => "10111011011101001000001111001011", 
    122 => "00111110111100110111110110000101", 
    123 => "00111110100010110100000101111101", 
    124 => "00111100000010010101010010101000", 
    125 => "00111110101000101010011111011111", 
    126 => "00111100101010001011011011011000", 
    127 => "00111110100001011100000000010010", 
    128 => "10111101100110011100001110001011", 
    129 => "00111110101110001001110011100101", 
    130 => "10111100010110111100101010010111", 
    131 => "00111110110000010100001101111100", 
    132 => "00111110111001111001001010001110", 
    133 => "00111101000100000001010111000010", 
    134 => "00111111011101100001100010001011", 
    135 => "10111101011101001110001000101010", 
    136 => "10111100110111000011110111101110", 
    137 => "00111011001111011111110100100110", 
    138 => "10111100111011100110011101010001", 
    139 => "10111100100001110100110010010000", 
    140 => "00111100001100000100111011101000", 
    141 => "00111011111011011010001000101111", 
    142 => "00111110100100010110000110000000", 
    143 => "00111101001111111000011101101010", 
    144 => "00111100001101110011000010000011", 
    145 => "00111111000010011001101011101001", 
    146 => "00111110100010010101011110001010", 
    147 => "00111100011001111101000100110101", 
    148 => "00111101010010001100110001010111", 
    149 => "00111111001100110011011001001000", 
    150 => "00111101000100010010110010101110", 
    151 => "10111101010100001110001101000111", 
    152 => "10111011011011101011111101100110", 
    153 => "10111101000000111111001111100000", 
    154 => "00111011110101001110110100101101", 
    155 => "10111100100000000100001100011100", 
    156 => "00111110101000111010110100011001", 
    157 => "00111111000001110000111101011010", 
    158 => "00111111010000010000001001111001", 
    159 => "00111101011000010010000011100010", 
    160 => "00111110111000101110000000111011", 
    161 => "00111110010011011110001100110010", 
    162 => "00111111000011000001001011001111", 
    163 => "00111111001110010100101000101100", 
    164 => "00111111010000010001010010110001", 
    165 => "00111101000101010000110110101110", 
    166 => "10111010111001101111001011101001", 
    167 => "00111010111110111110101110011110", 
    168 => "00111110100110111011111011001011", 
    169 => "00111100111011011111111001110110", 
    170 => "00111111010000011011010010001001", 
    171 => "00111011101101001011011100101100", 
    172 => "00111101011000001000111000010101", 
    173 => "10111100110111000101010100000000", 
    174 => "00111110111001101010110000000000", 
    175 => "10111100011000010010111010000100", 
    176 => "00111111000001100111010011010001", 
    177 => "00111111000111001001110100010111", 
    178 => "10111101000010100110010000111101", 
    179 => "00111110001010010101110001000010", 
    180 => "00111111011010010110100101101110", 
    181 => "10111101100001010111011101010011", 
    182 => "00111111000110110011011110101000", 
    183 => "10111100001101111001000011111011", 
    184 => "00111100011001101011100000110000", 
    185 => "10111100111010101110100111101110", 
    186 => "00111111011011000010100010100010", 
    187 => "00111100111010011100111011010001", 
    188 => "00111011111101011010000100000001", 
    189 => "10111100100000101110001000110011", 
    190 => "10111101000000111110010000100110", 
    191 => "00111011111001110011011000000101", 
    192 => "10111011011100110110011010010101", 
    193 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_fiZ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_fiZ is
    component predict_ensemble_fiZ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_fiZ_rom_U :  component predict_ensemble_fiZ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


