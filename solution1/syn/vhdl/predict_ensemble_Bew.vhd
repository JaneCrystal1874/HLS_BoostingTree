-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_Bew_rom is 
    generic(
             DWIDTH     : integer := 3; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_Bew_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "011", 1 => "010", 2 => "011", 3 to 4=> "000", 5 => "010", 6 => "000", 
    7 to 8=> "010", 9 to 10=> "100", 11 => "000", 12 => "100", 13 => "010", 14 => "100", 
    15 => "001", 16 => "000", 17 to 18=> "001", 19 to 27=> "000", 28 => "001", 29 to 31=> "000", 
    32 to 35=> "010", 36 to 37=> "001", 38 => "010", 39 => "011", 40 => "000", 41 => "001", 
    42 => "010", 43 => "001", 44 => "000", 45 => "001", 46 => "100", 47 => "000", 
    48 => "011", 49 to 55=> "000", 56 => "011", 57 to 63=> "000", 64 to 65=> "010", 66 => "011", 
    67 => "010", 68 => "000", 69 => "010", 70 => "001", 71 to 72=> "010", 73 => "000", 
    74 => "100", 75 to 76=> "000", 77 => "001", 78 to 79=> "000", 80 => "010", 81 to 82=> "000", 
    83 => "001", 84 => "010", 85 => "000", 86 => "010", 87 => "100", 88 to 95=> "000", 
    96 to 97=> "010", 98 => "100", 99 => "010", 100 => "100", 101 to 102=> "000", 103 to 104=> "001", 
    105 => "100", 106 => "000", 107 => "100", 108 => "010", 109 to 110=> "000", 111 => "100", 
    112 => "000", 113 => "100", 114 => "010", 115 => "100", 116 to 118=> "000", 119 => "001", 
    120 to 127=> "000", 128 to 131=> "100", 132 to 133=> "001", 134 => "011", 135 => "100", 136 => "011", 
    137 => "000", 138 => "010", 139 => "100", 140 => "000", 141 => "100", 142 to 146=> "000", 
    147 to 148=> "001", 149 to 151=> "000", 152 => "100", 153 to 159=> "000", 160 => "011", 161 to 164=> "100", 
    165 => "000", 166 => "001", 167 => "100", 168 => "010", 169 => "011", 170 => "001", 
    171 => "000", 172 => "100", 173 => "000", 174 to 175=> "010", 176 => "011", 177 to 178=> "000", 
    179 => "011", 180 to 191=> "000", 192 => "100", 193 => "011", 194 => "001", 195 to 196=> "100", 
    197 => "011", 198 to 199=> "001", 200 to 201=> "000", 202 => "100", 203 => "010", 204 to 205=> "000", 
    206 => "001", 207 => "000", 208 => "100", 209 to 210=> "000", 211 => "001", 212 => "000", 
    213 to 214=> "001", 215 to 223=> "000", 224 to 227=> "010", 228 => "001", 229 => "000", 230 => "001", 
    231 => "010", 232 => "100", 233 => "001", 234 => "000", 235 => "100", 236 => "001", 
    237 to 239=> "000", 240 => "011", 241 => "001", 242 => "000", 243 => "001", 244 => "010", 
    245 to 255=> "000", 256 to 257=> "011", 258 => "000", 259 to 260=> "100", 261 => "010", 262 => "100", 
    263 => "001", 264 => "000", 265 => "001", 266 to 267=> "000", 268 => "001", 269 => "010", 
    270 to 272=> "000", 273 => "100", 274 => "011", 275 to 276=> "010", 277 to 279=> "000", 280 => "100", 
    281 to 287=> "000", 288 to 290=> "010", 291 => "100", 292 => "011", 293 to 294=> "010", 295 => "001", 
    296 to 298=> "000", 299 => "100", 300 => "001", 301 => "011", 302 => "010", 303 to 304=> "000", 
    305 => "011", 306 => "100", 307 to 310=> "000", 311 => "010", 312 to 319=> "000", 320 to 321=> "100", 
    322 => "000", 323 to 325=> "100", 326 => "010", 327 => "000", 328 to 329=> "100", 330 => "001", 
    331 => "000", 332 => "010", 333 => "001", 334 => "011", 335 => "100", 336 to 337=> "000", 
    338 => "001", 339 to 344=> "000", 345 => "100", 346 to 351=> "000", 352 to 354=> "001", 355 => "100", 
    356 => "000", 357 => "010", 358 => "001", 359 => "100", 360 => "000", 361 => "001", 
    362 => "010", 363 => "000", 364 => "010", 365 => "100", 366 => "000", 367 => "100", 
    368 => "000", 369 => "100", 370 => "000", 371 to 372=> "010", 373 to 383=> "000", 384 to 386=> "100", 
    387 => "011", 388 => "001", 389 => "000", 390 to 391=> "010", 392 => "100", 393 => "000", 
    394 => "001", 395 => "000", 396 => "001", 397 => "000", 398 => "001", 399 => "010", 
    400 => "100", 401 => "010", 402 => "000", 403 => "010", 404 to 415=> "000", 416 to 419=> "100", 
    420 to 421=> "010", 422 to 423=> "100", 424 to 425=> "010", 426 => "000", 427 to 428=> "001", 429 => "000", 
    430 => "010", 431 to 432=> "000", 433 => "010", 434 to 441=> "000", 442 => "010", 443 to 447=> "000", 
    448 => "010", 449 => "001", 450 to 451=> "010", 452 => "000", 453 => "100", 454 => "011", 
    455 => "001", 456 => "011", 457 to 458=> "000", 459 => "010", 460 to 461=> "001", 462 => "000", 
    463 => "011", 464 to 465=> "000", 466 => "001", 467 => "100", 468 => "010", 469 to 479=> "000", 
    480 => "011", 481 => "001", 482 => "100", 483 => "000", 484 => "100", 485 => "001", 
    486 => "100", 487 => "010", 488 => "000", 489 => "100", 490 => "011", 491 => "001", 
    492 => "100", 493 to 494=> "000", 495 to 496=> "100", 497 => "010", 498 => "000", 499 => "001", 
    500 to 511=> "000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_Bew is
    generic (
        DataWidth : INTEGER := 3;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_Bew is
    component predict_ensemble_Bew_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_Bew_rom_U :  component predict_ensemble_Bew_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


