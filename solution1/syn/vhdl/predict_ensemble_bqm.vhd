-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_bqm_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_bqm_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100001110101000100000100111", 
    1 => "10111011100001001001110010110010", 
    2 => "00111101100110101011010010110111", 
    3 => "00111110010000011100010111000101", 
    4 => "00111101001110110100110000111100", 
    5 => "00111000101100100100001000000111", 
    6 => "00111011110010100000110000101000", 
    7 => "00111011001011001001111100110000", 
    8 => "00111111011110000011101001000011", 
    9 => "00111111011000000001100011100111", 
    10 => "10111010111001011110011001111001", 
    11 => "00111111001111000111101000101001", 
    12 => "00111111001110100001100001001000", 
    13 => "00111101110001101100100101111110", 
    14 => "00111110000110111110011011100110", 
    15 => "00111010000011110010000101110001", 
    16 => "10111011001100011000100101111010", 
    17 => "00111111000111101000101110100000", 
    18 => "00111110101111100011010100011110", 
    19 => "00111011000011101100110110001110", 
    20 => "00111111010110100100101010011101", 
    21 => "10111011100010011101001001111100", 
    22 => "00111110110001111011100110011101", 
    23 => "00111110110111110110011101101111", 
    24 => "00111110000000110001001010110010", 
    25 => "00111111010000000011001111000110", 
    26 => "00111010011110010000100101101100", 
    27 => "10111011010000001000101101110110", 
    28 => "00111111000001101111100111011011", 
    29 => "00111110110110110011010110001111", 
    30 => "00111110110010010110011110101001", 
    31 => "00111110110110110101101100001100", 
    32 => "00111101101000111011101010111010", 
    33 => "00111110110111101101011111101001", 
    34 => "10111001111111001011010011110010", 
    35 => "00111111000000010101011000011001", 
    36 => "10111010110111000111011010001110", 
    37 => "00111110001101001110110000100000", 
    38 => "10111010011000111100110110011010", 
    39 => "00111011001000101011100111010100", 
    40 => "00111111000011000101011001110001", 
    41 => "10111010101100111101010010101110", 
    42 => "10111010000001000001111011011110", 
    43 => "00111010000001000001111011011110", 
    44 => "00111111011001000100100101110111", 
    45 => "00111000011111111101101001000000", 
    46 => "00111001110011101001000111001001", 
    47 => "00111101011001100000111001010010", 
    48 => "00111011100100111010011100010001", 
    49 => "00111110001101101110010111001101", 
    50 => "00111111011011101101000111010000", 
    51 => "00111111000010011010111001100000", 
    52 => "00111010001010001101001000011100", 
    53 => "00111111001010010110111111111100", 
    54 => "10111010001010000100101111100100", 
    55 => "00111010010011000111100011101010", 
    56 => "00111001000110100010010000000011", 
    57 => "00111101101101000111110110000000", 
    58 => "10111010100100111101100101100110", 
    59 => "00111110010110110010011101000110", 
    60 => "00111010101011100001000001001001", 
    61 => "10111000110110000000000110110100", 
    62 => "00111001010101001101110001100110", 
    63 => "00111110100110100010111001111111", 
    64 => "00111111001101011101000101110000", 
    65 => "00111010001001101111110001011001", 
    66 => "00111110010011110000011111000000", 
    67 => "00111010100101101011101110011001", 
    68 => "00111110000000011101010111000011", 
    69 => "00111111010100011111110111011111", 
    70 => "00111110111001011101000110000001", 
    71 => "00111111011011000111000110100100", 
    72 => "10111010010101001101110001100110", 
    73 => "10111010011001110011011000000101", 
    74 => "00111110010110011111010010010000", 
    75 => "00111010000101010010100011110010", 
    76 => "00111110110011101111101101001100", 
    77 => "00111010011110011000111110100011", 
    78 => "00111110110010110000110100001111", 
    79 => "00111111001001000000010001010011", 
    80 => "00111110000010100101001100110011", 
    81 => "00111111011000100100000010010110", 
    82 => "00111010000001000110000111111010", 
    83 => "00111010001100100100001000000111", 
    84 => "00111111010110111010001011110000", 
    85 => "00111110101110010101010101110001", 
    86 => "10111001110100100011110101001111", 
    87 => "00111010000100001111011100110100", 
    88 => "10111000010010010101001110011100", 
    89 => "00111110110111100101001100100010", 
    90 => "00111001101110111011000111110010", 
    91 => "00111010000011110110010010001100", 
    92 => "00111110110011110011111010101011", 
    93 => "00111111010110110100001010111011", 
    94 => "00111001100111001100001100011010", 
    95 => "00111110100001100001110111101011", 
    96 => "10111001111000010111000110011111", 
    97 => "00111111000100001001001101010011", 
    98 => "00111110111011100011101011100010", 
    99 => "10111000000111110110001000110000", 
    100 => "00111111000111000001001110001000", 
    101 => "10111001110001001001101110100110", 
    102 => "00111111000100010111000000101110", 
    103 => "00111110001110100111100101111001", 
    104 => "00111111011000000110011011010011", 
    105 => "00111001101001000001101000100110", 
    106 => "00111110001101100000001001000011", 
    107 => "00111110111000101101101010011000", 
    108 => "00111001110101000101011000101110", 
    109 => "00111010001110000000011001101100", 
    110 => "00111000100001100011011110111101", 
    111 => "10111010000011110110010010001100", 
    112 => "00111110110101111100001011101100", 
    113 => "00111111001001001100000010101101", 
    114 => "00111001111100000001111110111000", 
    115 => "00111111011011000001010101011101", 
    116 => "00111111010100110011111010001010", 
    117 => "10111010100011010100101110101101", 
    118 => "00111000100110110011000001110011", 
    119 => "10111001110010001100110101100100", 
    120 => "00111000101101000101101011100110", 
    121 => "00111110010101001100011011100111", 
    122 => "00111110010100101000110111001010", 
    123 => "10111000001110001000110010100100", 
    124 => "10111010000011111010011110101000", 
    125 => "00111110110001110100001111101001", 
    126 => "10111010000001110000000100010001", 
    127 => "10111010100010001001001110111000", 
    128 => "00111000100010000101000010011100", 
    129 => "00111110011111010100000100110001", 
    130 => "00111001011010011101010100011011", 
    131 => "00111010010000011011100101110011", 
    132 => "00111110011110101101110011010011", 
    133 => "10111001110101110111101101111100", 
    134 => "00111110110101100111010011110011", 
    135 => "00111111000000110010100001010010", 
    136 => "00111110110011001101111011000010", 
    137 => "00111110111111101100010110110000", 
    138 => "00111111010010000111000101110001", 
    139 => "00111001100110000000101100100100", 
    140 => "10111010000001011111010010100001", 
    141 => "00111110100010100100110001100010", 
    142 => "00111110100110111010111011101111", 
    143 => "00111000111110011000111110100011", 
    144 => "00111010000101011010111100101001", 
    145 => "10111010000010101010110010010111", 
    146 => "00111110110011100000011100011100", 
    147 => "00111111001010100010111010010000", 
    148 => "00111001001101111000000000110100", 
    149 => "00111111001101101110101011101010", 
    150 => "00111111010011101111010100010010", 
    151 => "10111010000000000011000000111100", 
    152 => "00111110100001100000111100111101", 
    153 => "00111111001101000101110100010000", 
    154 => "00111110110111101001111100100111", 
    155 => "00111110101100110110010101100111", 
    156 => "00111111000111010000111011101101", 
    157 => "10111000110010110110110001111010", 
    158 => "00111000100011001000001001011010", 
    159 => "10111000110101011110100011010101", 
    160 => "00111111001010001000111010111101", 
    161 => "00111001001010001101001000011100", 
    162 => "10111001100100111101100101100110", 
    163 => "00111000111110011000111110100011", 
    164 => "10111001101011101001011010000001", 
    165 => "10110110100001100011011110111101", 
    166 => "10111001110101110111101101111100", 
    167 => "00111001110001110011101010111101", 
    168 => "00111110111010111111100100011110", 
    169 => "00111001010100111100111111110110", 
    170 => "00111010001111111010000010010100", 
    171 => "00111111000001100111001000110010", 
    172 => "10111001000111010100100101010010", 
    173 => "10111001011011001111101001101010", 
    174 => "10111001111111101100110111010001", 
    175 => "10111001101001011010110011001101", 
    176 => "00111000101011100001000001001001", 
    177 => "00110110010010010101001110011100", 
    178 => "00111001011110111010100010000010", 
    179 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_bqm is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_bqm is
    component predict_ensemble_bqm_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_bqm_rom_U :  component predict_ensemble_bqm_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


