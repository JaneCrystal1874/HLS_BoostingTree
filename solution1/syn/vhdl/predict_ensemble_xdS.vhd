-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_xdS_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_xdS_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111011101110111111110111111", 
    1 => "00111100111101011001000000111010", 
    2 => "00111100101101100011110100111110", 
    3 => "10111100110110011011001111010000", 
    4 => "00111100010100011010011001010000", 
    5 => "00111101000100101011101000010111", 
    6 => "00111101101000111110111110101110", 
    7 => "00111110110001001110001111011110", 
    8 => "00111101101111010101110000110001", 
    9 => "00111101011011001111110110001111", 
    10 => "00111111000000101101110101101010", 
    11 => "00111100110010010100101100111000", 
    12 => "00111101110100110000010110010110", 
    13 => "00111110101001111010100000001101", 
    14 => "00111100101110000110000010011010", 
    15 => "10111101100001001100000001011001", 
    16 => "10111011100110010100100111101001", 
    17 => "10111100101111010001000000101100", 
    18 => "00111101111111011111010000111100", 
    19 => "00111100011110010001101000110011", 
    20 => "10111100100010010000001011011110", 
    21 => "00111111000001011010110110100111", 
    22 => "00111111011100111000001100000110", 
    23 => "00111110011111100011010011111100", 
    24 => "10111011011101010001101011001010", 
    25 => "00111111011000100001111001110001", 
    26 => "00111100101000000001111011101111", 
    27 => "00111100010000100100110001000000", 
    28 => "00111100111011100010010000110101", 
    29 => "00111111010101011101000101110000", 
    30 => "10111100110100000110011110001100", 
    31 => "00111110001100010001000000011011", 
    32 => "00111101111001001100010010001011", 
    33 => "00111110000101100101100010000010", 
    34 => "00111110000001011001000000111010", 
    35 => "10111011110010000101011111110011", 
    36 => "00111110001101011001111001100010", 
    37 => "00111111010100000000000000000000", 
    38 => "10111101000000100000111001100011", 
    39 => "00111110110000010010010000101001", 
    40 => "00111110101010010100010110110111", 
    41 => "00111100001111110111111100000110", 
    42 => "00111100111011101011010011101010", 
    43 => "00111010111011011000000010100001", 
    44 => "10111100001001111110011100111010", 
    45 => "10111011101000010010011100101101", 
    46 => "10111100101101000110010101100010", 
    47 => "00111110100011100011001011000010", 
    48 => "00111111010111010000110010110011", 
    49 => "00111100110100011110101110000101", 
    50 => "00111111000110011011101100101000", 
    51 => "00111111011000010100111010100000", 
    52 => "10111100001110011010100111011010", 
    53 => "00111111000101011110111110000101", 
    54 => "00111110110101110101010111011110", 
    55 => "00111110001011011101101000000110", 
    56 => "10111100000111111010010101001100", 
    57 => "00111110110000110111011101111101", 
    58 => "10111100011011010011010100100010", 
    59 => "00111100101111111101000011010000", 
    60 => "00111010011000010111000110011111", 
    61 => "00111110101110100011011101101001", 
    62 => "00111111011101011111011001110111", 
    63 => "10111011111111110001000011101101", 
    64 => "00111101111011110000110110000100", 
    65 => "00111111010011111110100010101011", 
    66 => "00111110001010101010010001110110", 
    67 => "00111110100000111001010010111000", 
    68 => "10111100010101010101101000111010", 
    69 => "00111101101111001010100101101001", 
    70 => "00111111011101100010110101110011", 
    71 => "00111011001010101000011001010001", 
    72 => "00111100101101000110111111011111", 
    73 => "00111110000101010111001111101011", 
    74 => "00111100010011101000000100000010", 
    75 => "00111101110000100011100111100111", 
    76 => "00111111000111010000111011101101", 
    77 => "00111011101010100100001100110101", 
    78 => "00111100100001010101110110100010", 
    79 => "00111110010010111010001100000001", 
    80 => "10111100000011111101010111001011", 
    81 => "00111110111111101010101000001000", 
    82 => "00111110000111110100000110101111", 
    83 => "00111010010100100011110101001111", 
    84 => "00111110100000110000101001001110", 
    85 => "00111111001111101000101110100000", 
    86 => "00111100010100000110011110001100", 
    87 => "10111010111101100010011100111001", 
    88 => "00111100001110110110011001110011", 
    89 => "10111011101001101110101110010010", 
    90 => "00111011111000010101000000010010", 
    91 => "10111100000110001110010100111111", 
    92 => "10111010010001010010000111011110", 
    93 => "10111100100111000110001010100010", 
    94 => "00111111000000000011110011010001", 
    95 => "00111110111001000100111000101111", 
    96 => "00111110010100110010110101101111", 
    97 => "10111010101011010100011011110110", 
    98 => "10111100010010111110000111101011", 
    99 => "00111110110110110100100010110010", 
    100 => "00111110110011101100010100101010", 
    101 => "10111010111100010110111101000100", 
    102 => "00111110010111110100001010111011", 
    103 => "00111110110101110111010001000111", 
    104 => "00111111000011011001010101000110", 
    105 => "00111100100110110111101111110010", 
    106 => "00111111010011011111110001001100", 
    107 => "00111100100000010100110101110010", 
    108 => "00111110101000101011001101101000", 
    109 => "00111110011011110111010001000111", 
    110 => "00111100100100110001001000101011", 
    111 => "00111110110100010101101110111100", 
    112 => "10111100110100011011001011100110", 
    113 => "00111111000100110000101010010001", 
    114 => "00111100000100011110001000010101", 
    115 => "10111010100110101010101000111011", 
    116 => "00111100001010010110000010110111", 
    117 => "00111100000001111100011000110010", 
    118 => "00111110110101111000001111100000", 
    119 => "10111011001011000000100000110001", 
    120 => "10111100001011100111000011000001", 
    121 => "00111111000011111100111011111011", 
    122 => "00111111001001011100101110101011", 
    123 => "00111110101110101010010000010010", 
    124 => "10111100000110010000101011111110", 
    125 => "00111110101001000101001010100100", 
    126 => "00111100001110111100111101001111", 
    127 => "00111111001010010000100000001011", 
    128 => "00111011010100000110011110001100", 
    129 => "00111110100101001100000110101001", 
    130 => "00111110010101011110100111100010", 
    131 => "00111111010101111010001001011001", 
    132 => "00111111010110001101100101010001", 
    133 => "10111100011111100011011011010010", 
    134 => "00111111000111001010000010100001", 
    135 => "10111011000100000000110001010010", 
    136 => "10111100010001011110111101100011", 
    137 => "10111011111001101001011010100010", 
    138 => "00111111001111010011010011110000", 
    139 => "00111100100100110111010010111100", 
    140 => "10111011110011111001010111010101", 
    141 => "00111111010011100111001010010111", 
    142 => "00111110111001100011011100110111", 
    143 => "10111100001100101011101110101010", 
    144 => "10111011011101111100101010100111", 
    145 => "00111110111111001000010101011110", 
    146 => "00111011111001101001111100000110", 
    147 => "00111111011000100010000000010100", 
    148 => "10111100010010100111110101100111", 
    149 => "00111111010010000010101100001111", 
    150 => "00111110111111110100100101001001", 
    151 => "00111110100111011010011101001100", 
    152 => "10111011110101110001111100110110", 
    153 => "00111111000001110100010010100010", 
    154 => "00111100001011001011110010001100", 
    155 => "00111111011000101000000100000010", 
    156 => "00111010111100100111101110110011", 
    157 => "10111011100001100011011110111101", 
    158 => "00111111010100010010100100110101", 
    159 => "00111110100011011110110000011100", 
    160 => "00111011101110001111000101001110", 
    161 => "00111110110101110001001010100001", 
    162 => "00111111010010110111110111011000", 
    163 => "00111011010111110001010110100101", 
    164 => "00111100010111001100101001110001", 
    165 => "00111011101011010101011110111100", 
    166 => "10111010100010110001000101000001", 
    167 => "00111011000000101010110111000101", 
    168 => "00111111000001111100010110111101", 
    169 => "00111110111011000010100011110110", 
    170 => "00111111000011010001011101000000", 
    171 => "00111110101100010100110100101111", 
    172 => "10111011001101100111001111000101", 
    173 => "00111001110110001000011111101100", 
    174 => "10111011100000110010001100110110", 
    175 => "00111010010100111100111111110110", 
    176 => "00111111001010011000100001111111", 
    177 => "00111110111100001110111000000111", 
    178 => "00111110111101111010110010000010", 
    179 => "00111100010111000011101111010110", 
    180 => "00111011110101010011000001001001", 
    181 => "00111110111110111011011010001001", 
    182 => "10111011101000110000010101010011", 
    183 => "10111100001101110100100110101110", 
    184 => "10111010110010101000000110011001", 
    185 => "00111100001101010010100001101011", 
    186 => "00111111000000011101110101101110", 
    187 => "10111100001001101100010111010010", 
    188 => "10111100100100110000011110101111", 
    189 => "00111010111100100011100010010111", 
    190 => "10111011011011000100000111011101", 
    191 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_xdS is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_xdS is
    component predict_ensemble_xdS_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_xdS_rom_U :  component predict_ensemble_xdS_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


