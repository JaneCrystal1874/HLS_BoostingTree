-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_qcK_rom is 
    generic(
             DWIDTH     : integer := 5; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_qcK_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00001", 1 => "00011", 2 => "00101", 3 => "00111", 4 to 5=> "00000", 
    6 => "01001", 7 => "01011", 8 => "00000", 9 => "01101", 10 => "01111", 
    11 => "10001", 12 => "10011", 13 => "10101", 14 => "10111", 15 => "00000", 
    16 => "11001", 17 => "00000", 18 => "11011", 19 to 23=> "00000", 24 => "11101", 
    25 to 31=> "00000", 32 => "00001", 33 => "00011", 34 => "00101", 35 => "00111", 
    36 to 37=> "00000", 38 => "01001", 39 => "01011", 40 => "01101", 41 => "01111", 
    42 => "10001", 43 => "10011", 44 => "10101", 45 to 46=> "00000", 47 => "10111", 
    48 => "11001", 49 => "11011", 50 => "11101", 51 to 63=> "00000", 64 => "00001", 
    65 => "00011", 66 => "00000", 67 => "00101", 68 => "00111", 69 => "01001", 
    70 => "01011", 71 => "00000", 72 => "01101", 73 => "01111", 74 to 75=> "00000", 
    76 => "10001", 77 to 78=> "00000", 79 => "10011", 80 => "10101", 81 => "00000", 
    82 => "10111", 83 => "11001", 84 to 86=> "00000", 87 => "11011", 88 => "11101", 
    89 to 95=> "00000", 96 => "00001", 97 => "00011", 98 => "00101", 99 => "00111", 
    100 => "00000", 101 => "01001", 102 => "01011", 103 => "01101", 104 => "00000", 
    105 => "01111", 106 to 107=> "00000", 108 => "10001", 109 => "10011", 110 => "00000", 
    111 => "10101", 112 => "10111", 113 => "11001", 114 => "11011", 115 to 121=> "00000", 
    122 => "11101", 123 to 127=> "00000", 128 => "00001", 129 => "00011", 130 => "00101", 
    131 => "00111", 132 => "01001", 133 => "00000", 134 => "01011", 135 => "01101", 
    136 to 138=> "00000", 139 => "01111", 140 => "10001", 141 => "10011", 142 => "10101", 
    143 => "00000", 144 => "10111", 145 => "11001", 146 => "11011", 147 => "11101", 
    148 to 159=> "00000", 160 => "00001", 161 => "00011", 162 => "00101", 163 to 165=> "00000", 
    166 => "00111", 167 => "00000", 168 => "01001", 169 => "01011", 170 => "01101", 
    171 to 172=> "00000", 173 => "01111", 174 => "10001", 175 => "10011", 176 => "10101", 
    177 => "10111", 178 => "11001", 179 => "11011", 180 => "11101", 181 to 191=> "00000", 
    192 => "00001", 193 => "00011", 194 => "00101", 195 => "00111", 196 => "01001", 
    197 => "00000", 198 => "01011", 199 => "01101", 200 to 201=> "00000", 202 => "01111", 
    203 to 204=> "00000", 205 => "10001", 206 => "00000", 207 => "10011", 208 => "10101", 
    209 => "10111", 210 to 211=> "00000", 212 => "11001", 213 => "11011", 214 => "11101", 
    215 to 223=> "00000", 224 => "00001", 225 => "00011", 226 => "00101", 227 => "00111", 
    228 => "01001", 229 => "00000", 230 => "01011", 231 => "01101", 232 to 234=> "00000", 
    235 => "01111", 236 => "10001", 237 => "10011", 238 => "10101", 239 => "10111", 
    240 => "11001", 241 => "11011", 242 => "11101", 243 to 255=> "00000", 256 => "00001", 
    257 => "00011", 258 => "00101", 259 => "00111", 260 => "01001", 261 => "01011", 
    262 => "01101", 263 => "01111", 264 => "10001", 265 => "00000", 266 => "10011", 
    267 => "10101", 268 => "00000", 269 => "10111", 270 => "11001", 271 to 273=> "00000", 
    274 => "11011", 275 to 276=> "00000", 277 => "11101", 278 to 287=> "00000", 288 => "00001", 
    289 => "00011", 290 => "00101", 291 => "00111", 292 to 293=> "00000", 294 => "01001", 
    295 => "01011", 296 => "00000", 297 => "01101", 298 => "01111", 299 => "00000", 
    300 => "10001", 301 => "10011", 302 => "10101", 303 => "10111", 304 => "11001", 
    305 to 306=> "00000", 307 => "11011", 308 to 313=> "00000", 314 => "11101", 315 to 319=> "00000", 
    320 => "00001", 321 => "00000", 322 => "00011", 323 => "00101", 324 => "00111", 
    325 => "01001", 326 => "01011", 327 => "01101", 328 => "01111", 329 => "10001", 
    330 => "10011", 331 to 334=> "00000", 335 => "10101", 336 => "10111", 337 => "00000", 
    338 => "11001", 339 to 340=> "00000", 341 => "11011", 342 => "00000", 343 => "11101", 
    344 to 351=> "00000", 352 => "00001", 353 => "00011", 354 => "00000", 355 => "00101", 
    356 => "00000", 357 => "00111", 358 => "01001", 359 => "01011", 360 to 361=> "00000", 
    362 => "01101", 363 => "01111", 364 => "00000", 365 => "10001", 366 => "10011", 
    367 => "10101", 368 => "10111", 369 => "11001", 370 => "11011", 371 => "00000", 
    372 => "11101", 373 to 383=> "00000", 384 => "00001", 385 => "00011", 386 => "00101", 
    387 => "00111", 388 => "00000", 389 => "01001", 390 => "01011", 391 => "01101", 
    392 => "01111", 393 to 395=> "00000", 396 => "10001", 397 => "10011", 398 to 399=> "00000", 
    400 => "10101", 401 => "10111", 402 => "11001", 403 to 408=> "00000", 409 => "11011", 
    410 => "11101", 411 to 415=> "00000", 416 => "00001", 417 => "00011", 418 => "00101", 
    419 => "00111", 420 => "00000", 421 => "01001", 422 => "01011", 423 => "01101", 
    424 => "01111", 425 => "10001", 426 => "10011", 427 => "10101", 428 => "10111", 
    429 to 430=> "00000", 431 => "11001", 432 to 438=> "00000", 439 => "11011", 440 => "11101", 
    441 to 447=> "00000", 448 => "00001", 449 => "00011", 450 => "00101", 451 => "00111", 
    452 => "00000", 453 => "01001", 454 => "01011", 455 to 457=> "00000", 458 => "01101", 
    459 => "01111", 460 => "10001", 461 to 462=> "00000", 463 => "10011", 464 => "10101", 
    465 => "10111", 466 => "11001", 467 to 468=> "00000", 469 => "11011", 470 => "00000", 
    471 => "11101", 472 to 479=> "00000", 480 => "00001", 481 => "00011", 482 => "00101", 
    483 => "00111", 484 => "00000", 485 => "01001", 486 => "01011", 487 => "01101", 
    488 => "01111", 489 => "10001", 490 => "10011", 491 => "00000", 492 => "10101", 
    493 => "00000", 494 => "10111", 495 => "11001", 496 to 497=> "00000", 498 => "11011", 
    499 => "11101", 500 to 511=> "00000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_qcK is
    generic (
        DataWidth : INTEGER := 5;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_qcK is
    component predict_ensemble_qcK_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_qcK_rom_U :  component predict_ensemble_qcK_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


