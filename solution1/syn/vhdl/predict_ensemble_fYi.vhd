-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_fYi_rom is 
    generic(
             DWIDTH     : integer := 3; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_fYi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "001", 1 => "100", 2 to 3=> "001", 4 to 5=> "100", 6 to 7=> "011", 8 => "100", 
    9 to 10=> "000", 11 to 12=> "100", 13 => "000", 14 => "011", 15 => "100", 16 => "000", 
    17 to 18=> "010", 19 to 31=> "000", 32 => "100", 33 => "000", 34 => "010", 35 => "001", 
    36 => "100", 37 to 38=> "000", 39 => "001", 40 => "010", 41 to 42=> "000", 43 => "001", 
    44 => "000", 45 => "010", 46 to 47=> "000", 48 to 49=> "010", 50 => "000", 51 => "100", 
    52 => "001", 53 => "100", 54 => "000", 55 => "001", 56 => "100", 57 to 63=> "000", 
    64 => "001", 65 => "010", 66 => "001", 67 to 68=> "000", 69 => "011", 70 => "001", 
    71 to 73=> "000", 74 to 75=> "100", 76 => "001", 77 to 79=> "000", 80 => "001", 81 => "000", 
    82 to 84=> "010", 85 => "011", 86 => "000", 87 to 88=> "001", 89 to 95=> "000", 96 => "100", 
    97 => "011", 98 => "100", 99 to 101=> "000", 102 => "001", 103 => "000", 104 => "100", 
    105 => "010", 106 => "100", 107 => "011", 108 => "100", 109 => "000", 110 => "100", 
    111 => "001", 112 to 115=> "000", 116 to 117=> "100", 118 => "010", 119 => "000", 120 => "100", 
    121 to 127=> "000", 128 => "001", 129 to 130=> "010", 131 => "001", 132 => "011", 133 to 135=> "010", 
    136 => "001", 137 => "010", 138 => "001", 139 => "011", 140 => "100", 141 => "000", 
    142 => "001", 143 to 148=> "000", 149 => "001", 150 to 159=> "000", 160 => "011", 161 => "010", 
    162 => "100", 163 to 164=> "010", 165 to 166=> "000", 167 => "010", 168 to 169=> "100", 170 => "000", 
    171 to 172=> "010", 173 to 174=> "000", 175 => "001", 176 => "000", 177 => "100", 178 => "011", 
    179 => "000", 180 => "100", 181 to 182=> "000", 183 => "100", 184 to 191=> "000", 192 => "001", 
    193 => "100", 194 => "001", 195 to 196=> "100", 197 => "001", 198 to 199=> "100", 200 to 201=> "010", 
    202 => "100", 203 to 205=> "000", 206 => "011", 207 => "100", 208 => "001", 209 to 213=> "000", 
    214 => "001", 215 to 223=> "000", 224 => "100", 225 => "001", 226 => "000", 227 to 230=> "001", 
    231 => "010", 232 to 233=> "001", 234 => "011", 235 => "000", 236 => "100", 237 => "001", 
    238 => "011", 239 => "100", 240 => "010", 241 to 255=> "000", 256 to 259=> "010", 260 => "011", 
    261 => "000", 262 => "100", 263 => "010", 264 => "000", 265 => "010", 266 => "000", 
    267 to 268=> "100", 269 => "000", 270 => "100", 271 => "000", 272 => "100", 273 => "000", 
    274 => "100", 275 => "001", 276 => "011", 277 to 287=> "000", 288 to 289=> "001", 290 => "010", 
    291 => "100", 292 => "000", 293 => "100", 294 => "010", 295 to 296=> "100", 297 to 298=> "000", 
    299 to 302=> "100", 303 => "001", 304 => "100", 305 => "010", 306 to 319=> "000", 320 to 323=> "100", 
    324 => "001", 325 to 326=> "100", 327 => "010", 328 to 330=> "000", 331 => "100", 332 => "010", 
    333 => "001", 334 => "011", 335 => "000", 336 => "010", 337 => "001", 338 to 343=> "000", 
    344 => "010", 345 to 351=> "000", 352 => "010", 353 to 354=> "100", 355 => "011", 356 => "001", 
    357 => "011", 358 => "100", 359 to 360=> "000", 361 => "100", 362 => "001", 363 => "010", 
    364 => "100", 365 => "010", 366 => "100", 367 to 372=> "000", 373 => "100", 374 to 375=> "000", 
    376 => "011", 377 to 383=> "000", 384 to 385=> "010", 386 => "100", 387 => "001", 388 => "100", 
    389 => "000", 390 => "100", 391 => "001", 392 => "010", 393 to 395=> "000", 396 to 398=> "001", 
    399 => "000", 400 to 401=> "001", 402 => "100", 403 => "001", 404 to 415=> "000", 416 to 417=> "001", 
    418 to 419=> "100", 420 => "001", 421 => "011", 422 => "010", 423 to 424=> "001", 425 to 426=> "000", 
    427 => "010", 428 => "100", 429 => "010", 430 => "000", 431 to 432=> "001", 433 to 438=> "000", 
    439 => "001", 440 to 447=> "000", 448 to 450=> "010", 451 => "100", 452 => "001", 453 => "000", 
    454 to 455=> "001", 456 => "100", 457 to 459=> "000", 460 to 461=> "001", 462 => "100", 463 => "010", 
    464 => "001", 465 => "010", 466 => "001", 467 to 479=> "000", 480 to 481=> "100", 482 => "001", 
    483 => "100", 484 => "000", 485 => "011", 486 => "100", 487 => "010", 488 to 489=> "000", 
    490 => "011", 491 => "100", 492 to 493=> "001", 494 => "010", 495 to 497=> "000", 498 => "010", 
    499 => "011", 500 => "001", 501 to 511=> "000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_fYi is
    generic (
        DataWidth : INTEGER := 3;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_fYi is
    component predict_ensemble_fYi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_fYi_rom_U :  component predict_ensemble_fYi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


