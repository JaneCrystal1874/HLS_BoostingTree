-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_ceu_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_ceu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111011011101111101110100000", 
    1 => "00111100011001101111111101111110", 
    2 => "00111101011100001010011011111100", 
    3 => "10111010111000000010001000010100", 
    4 => "00111111010101011111001000000010", 
    5 => "00111011000011001010001111101000", 
    6 => "00111000110101011110100011010101", 
    7 => "00111101100000000000000000000000", 
    8 => "00111111010001111100000101101010", 
    9 => "10111001101110101010010110000011", 
    10 => "00111101001110110100110000111100", 
    11 => "00111010001110111011000111110010", 
    12 => "00110111100101101111111010110101", 
    13 => "00111001100100111101100101100110", 
    14 => "00111111011110010011001100001001", 
    15 => "00111101010110111111111100000100", 
    16 => "10111010010100010011000011100000", 
    17 => "00111001101011111010001011110000", 
    18 => "00111110001000000111011011000000", 
    19 => "00111110101000111100010010001111", 
    20 => "00111111011100110010000010000110", 
    21 => "10110111100011101001101100111001", 
    22 => "00111001110000111000111100110110", 
    23 => "00111101110010101110100111101110", 
    24 => "00111111000010001000111010101100", 
    25 => "00111110111010010100100011111110", 
    26 => "00111111011110000111011001111101", 
    27 => "00111001111101111111110011111100", 
    28 => "00111111001000011010111001001111", 
    29 => "00111101100101001010010111011111", 
    30 => "10111001101111100101000100001001", 
    31 => "00111111011100001100111011110110", 
    32 => "00111001100100010011101001010000", 
    33 => "00111111001111000011011000100010", 
    34 => "00111001011010011101010100011011", 
    35 => "10110110110010010101001110011100", 
    36 => "10111001010100101100001110000111", 
    37 => "00111101100001001010010010010000", 
    38 => "10111001101000101000011101111111", 
    39 => "00111111001010100010111010010000", 
    40 => "00111001000011111010011110101000", 
    41 => "10111000111111111101101001000000", 
    42 => "00111101111001001110111001111100", 
    43 => "10111001010001100010111001001101", 
    44 => "00111111001111001010000001111111", 
    45 => "00111110011001110001110100011101", 
    46 => "00111101111000111101111101101110", 
    47 => "00110110101001111100010110101100", 
    48 => "10111000100010000101000010011100", 
    49 => "00110111111000100111111000001111", 
    50 => "00111001010001110011101010111101", 
    51 => "10111001011011110001001101001001", 
    52 => "00111101110001011101000110000001", 
    53 => "00111001011000100111111000001111", 
    54 => "00111111011010001110001010110000", 
    55 => "00111111011001101110011110100011", 
    56 => "00111111000011111110111000101101", 
    57 => "00111111011000100100000010010110", 
    58 => "00111001010001010010000111011110", 
    59 => "00111110111011110111010011001101", 
    60 => "10111001011101000101000101110110", 
    61 => "00111110101011111101100100110100", 
    62 => "10111000101111001011111001100010", 
    63 => "10111000001100000010100100101000", 
    64 => "00110111100111110110001000110000", 
    65 => "00111111010100101110100011000000", 
    66 => "00111111010001110100001000110101", 
    67 => "00111110010000011001011100011100", 
    68 => "10111001000110110011000001110011", 
    69 => "00111111010100000000000000000000", 
    70 => "00111000101110001000110010100100", 
    71 => "00111000000010100110100101111011", 
    72 => "00111110111110111011001101000010", 
    73 => "00111110010010000001111101010100", 
    74 => "00111110100000010100111101001000", 
    75 => "10111000001101000101101011100110", 
    76 => "10110110100001100011011110111101", 
    77 => "00111110100101100000110011100001", 
    78 => "00111110011000000111100111100110", 
    79 => "10111000101010011101111010001011", 
    80 => "00111001010110100001101010010011", 
    81 => "10110111111010101110000110001011", 
    82 => "00111001000111000011110011100010", 
    83 => "10111000100011001000001001011010", 
    84 => "00111110111111011000101101100001", 
    85 => "00111110110000011011010010111011", 
    86 => "00111111010000101110100011000000", 
    87 => "00111000111100110100010100000111", 
    88 => "00111111000011000001100111100011", 
    89 => "00111111011011000001101000010101", 
    90 => "10111000011010101110000110001011", 
    91 => "00111111010001110001001001001101", 
    92 => "00111000100000100000010111111111", 
    93 => "00111110101100010111010001100000", 
    94 => "00111000001000111001001111101110", 
    95 => "00111111001100101110100011000000", 
    96 => "10111000011100110100010100000111", 
    97 => "00111111000110010100001010010001", 
    98 => "00111111010011010111111011101101", 
    99 => "00111110101010111100010101011000", 
    100 => "00111110111100111101101101111111", 
    101 => "00111111000000111000101101111010", 
    102 => "10111000100100101100110011110111", 
    103 => "00111110101011011100011011000001", 
    104 => "00111111000101100001011101101110", 
    105 => "00111110101000011011100000000010", 
    106 => "00111111000110111110111010000000", 
    107 => "00111110101011000100101110010000", 
    108 => "00111110110001001010101011011010", 
    109 => "10111000010001010010000111011110", 
    110 => "00111111000100101100000101011101", 
    111 => "10110111101110001000110010100100", 
    112 => "00111110101110011101011000000110", 
    113 => "10110111000001100011011110111101", 
    114 => "10111000000001100011011110111101", 
    115 => "00111110101001100100010011111010", 
    116 => "10111000110011111001111000111000", 
    117 => "00111110101011111011000010010010", 
    118 => "00111111001000110101100001101101", 
    119 => "00111110111100011010110011011110", 
    120 => "10110110000001100011011110111101", 
    121 => "00111000100001000001111011011110", 
    122 => "00110111011110111010100010000010", 
    123 => "10110111001110001000110010100100", 
    124 => "00110111110010010101001110011100", 
    125 => "00111111000100001100011111000001", 
    126 => "00111111001010110000000011101111", 
    127 => "00111110100100111100100000011001", 
    128 => "00110111111110111010100010000010", 
    129 => "00111000101100100100001000000111", 
    130 => "00111110111100001100111010110011", 
    131 => "00111111000000011011010111011001", 
    132 => "00111110100001011011001110011110", 
    133 => "00110111111100110100010100000111", 
    134 => "00110110000001100011011110111101", 
    135 => "00110110111010101110000110001011", 
    136 => "00111000011001101010111111001101", 
    137 => "00111110110000101110100011000000", 
    138 => "00111111001110000001110111010010", 
    139 => "10110111001110001000110010100100", 
    140 => "10111000011101110111011011000101", 
    141 => "00111110101111010001011101000000", 
    142 => "00111111001011001110010010101000", 
    143 => "00111110100100000001001110001000", 
    144 => "00111110110110011100100011001001", 
    145 => "00111110110110101010011010001111", 
    146 => "00110110000001100011011110111101", 
    147 => "00110111101001111100010110101100", 
    148 => "00111110010100110111000111011010", 
    149 => "00110101100001100011011110111101", 
    150 => "00110111111000100111111000001111", 
    151 => "10111000000011101001101100111001", 
    152 => "00110111000001100011011110111101", 
    153 => "00111000000011101001101100111001", 
    154 => "10110110101001111100010110101100", 
    155 => "00111110110101111001100010110111", 
    156 => "10110111011110111010100010000010", 
    157 => "00111111000110110010001000111010", 
    158 => "00111110111011110011100000111111", 
    159 => "00111000011001101010111111001101", 
    160 => "00110110101001111100010110101100", 
    161 => "00111111000001000011111011011001", 
    162 => "00111111000010101100100000001100", 
    163 => "00111110110110101111010111111101", 
    164 => "00111000001000111001001111101110", 
    165 => "00111111001011001011000011010001", 
    166 => "10111000001110001000110010100100", 
    167 => "00110111011110111010100010000010", 
    168 => "10110111000101101111111010110101", 
    169 => "10111000000000100000010111111111", 
    170 => "00000000000000000000000000000000", 
    171 => "00111111000000101000001001100010", 
    172 => "00111111000010110000010010101011", 
    173 => "10110110100001100011011110111101", 
    174 => "00110111110010010101001110011100", 
    175 => "10111000000001100011011110111101", 
    176 => "10110110100001100011011110111101", 
    177 => "00111110110111100010101101001001", 
    178 => "00110111101001111100010110101100", 
    179 => "00110110101001111100010110101100", 
    180 => "00111111000100000001000110000000", 
    181 => "00111111000100101110100011000000", 
    182 => "00110111011110111010100010000010", 
    183 => "10110111101001111100010110101100", 
    184 to 185=> "10110111001001111100010110101100", 
    186 => "00110111001110001000110010100100", 
    187 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_ceu is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_ceu is
    component predict_ensemble_ceu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_ceu_rom_U :  component predict_ensemble_ceu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


