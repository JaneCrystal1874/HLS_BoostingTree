-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_Rg6_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_Rg6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111011101100000101010110111", 
    1 => "00111111011101000001100100111011", 
    2 => "00111110111101110001001000011011", 
    3 => "00111100000111001010010110111110", 
    4 => "00111100010011001000110111100011", 
    5 => "00111111000111110111110110010101", 
    6 => "00111111010010011101111010101101", 
    7 => "00111100000110110000101010110011", 
    8 => "00111101011100001010011011111100", 
    9 => "10111011010001111101000110111011", 
    10 => "10111100101101001011110101110111", 
    11 => "00111011110001110000000000000100", 
    12 => "10111011100100000001110100011001", 
    13 => "10111100000101110101111100101101", 
    14 => "00111111011100100100110110110001", 
    15 => "00111111011100110010000010000110", 
    16 => "00111011111110101001001110101111", 
    17 => "00111101100000101110010011010010", 
    18 => "10111011110100111010111001101000", 
    19 => "00111110100100011000010111001111", 
    20 => "00111101101000011101111110111001", 
    21 => "00111100010111100001000110011001", 
    22 => "00111101011000100011010010101000", 
    23 => "10111100010000100110100110011100", 
    24 => "00111101110011010101101011100010", 
    25 => "10111011111000010011111101001011", 
    26 => "00111011110011111011111111000110", 
    27 => "00111011111111000101000001001000", 
    28 => "00111110001010001011001111110110", 
    29 => "00111110101111110010000101001111", 
    30 => "00111101101011101000101101111110", 
    31 => "00111010110101011100011101000111", 
    32 => "00111011110000100001111000011101", 
    33 => "10111011100101001011001110000001", 
    34 => "00111110010110100010010010001001", 
    35 => "00111101101000000110011101001001", 
    36 => "00111110100000100101101001101000", 
    37 => "10110111110000001111000000100000", 
    38 => "10111011101110011100101101101000", 
    39 => "00111110000010000101010010001011", 
    40 => "00111110010010001001000011010110", 
    41 => "00111110111101011100100101100000", 
    42 => "00111100000000101001100011001100", 
    43 => "00111110001011011010100010111101", 
    44 => "00111101111110110011110110001110", 
    45 => "00111101111100010110110100101011", 
    46 => "10111011000110110110001011000111", 
    47 => "00111110001001011111100111011111", 
    48 => "10111100010101001011111100001010", 
    49 => "00111111001010001011101000110000", 
    50 => "00111111011010000010001101000010", 
    51 => "00111010000101001010001010111010", 
    52 => "00111011011000010000110011110110", 
    53 => "00111110001011011010010110011000", 
    54 => "00111011010011000110100000100011", 
    55 => "00111100001101000101011010110100", 
    56 => "10111010110001010010000111011110", 
    57 => "00111111010110010111111110100110", 
    58 => "00111111011100001010100011110100", 
    59 => "10111010001101010010010000111010", 
    60 => "10111011001110001000110010100100", 
    61 => "00111110101110011101000010000101", 
    62 => "10111011110001010010000111011110", 
    63 => "00111011110000101000001011000111", 
    64 => "00111001001111101101011101000001", 
    65 => "00111110110100000010110110011101", 
    66 => "00111110000001101010100011111100", 
    67 => "00111110100010101011111000000110", 
    68 => "00111011111101101100011010011011", 
    69 => "10111011110110100101110110101111", 
    70 => "00111110101000110101001011001010", 
    71 => "00111110100101110101110100010100", 
    72 => "00111110110110000001100010000011", 
    73 => "00111110100101011101011111001011", 
    74 => "00111110101011100011001000111100", 
    75 => "00111110110111000000010011101010", 
    76 => "00111011100111000011110011100010", 
    77 => "10111100000111110110011001100010", 
    78 => "00111110100001100111010111111111", 
    79 => "00111111000010111010001011110000", 
    80 => "10111011101111010111111101010010", 
    81 => "00111011011110010110111000010110", 
    82 => "00111110000010001100010101000011", 
    83 => "00111011011111010000100011010101", 
    84 => "00111110111101000100101001000001", 
    85 => "10111011000100000011111010100111", 
    86 => "00111011011000001011100100010011", 
    87 => "00111010011101110111011011000101", 
    88 => "10111011001000101000011101111111", 
    89 => "00111111010001101101001100110001", 
    90 => "00111111010011010010011001110100", 
    91 => "00111110100011100111110111011101", 
    92 => "00111110001011111101100010101110", 
    93 => "00111000011100110100010100000111", 
    94 => "10111011100100001111111110010111", 
    95 => "00111111011011100101110001011111", 
    96 => "00111111010010100111111110110010", 
    97 => "10111011010000111101001001010010", 
    98 => "00111010101101111110010011011110", 
    99 => "00111110011001001000010110100001", 
    100 => "00111011010001010000000001010000", 
    101 => "00111110000010001100101100001000", 
    102 => "10111011010010101100010010110101", 
    103 => "00111011101011110101111111010100", 
    104 => "00111010110111101111010000010111", 
    105 => "10111010100110100010010000000011", 
    106 => "00111010110111010110000101110000", 
    107 => "00111111010101100010011101101011", 
    108 => "00111110111000001011101011101001", 
    109 => "10111011111011101010011000111011", 
    110 => "00111110100010101100100001100000", 
    111 => "00111110101100000000111001101011", 
    112 => "00111110100111110110010000000110", 
    113 => "00111010101101101001010101010011", 
    114 => "10111000101101000101101011100110", 
    115 => "00111011101100110000101101011011", 
    116 => "00111110100000001010101101110001", 
    117 => "00111111000000111111000011101101", 
    118 => "00111111010000111000000111000111", 
    119 => "00111011001101100101001000110111", 
    120 => "00111110110100011011011111100001", 
    121 => "10111010101100111001000110010010", 
    122 => "10111011100111111001110011101001", 
    123 => "00111111001010100101001111101011", 
    124 => "10111011010110101001000000000100", 
    125 => "00111110110010101100000111010011", 
    126 => "00111110101010100010110000100011", 
    127 => "00111110111111011110111010111011", 
    128 => "00111110101111010001011101000000", 
    129 => "00111001001010001101001000011100", 
    130 => "10111011100010100111101001000010", 
    131 => "10111011000011000110000011001100", 
    132 => "00111110111001000010010100101001", 
    133 => "00111110110000010111001111011010", 
    134 => "00111111001110110000110010101010", 
    135 => "00111011100001000000010110110100", 
    136 => "10111010101000111101011100001010", 
    137 => "00111011011010110011010101101110", 
    138 => "00111010011100111100101100111110", 
    139 => "00111011000001111100101001100100", 
    140 => "00111110111010000000000001100101", 
    141 => "00111111000110101011110000110000", 
    142 => "00111111001010100000100001001010", 
    143 => "00111110110101111001001110011010", 
    144 => "00111111010101110111111011100101", 
    145 => "00111110111101110101000110001011", 
    146 => "00111111000000001100011101101101", 
    147 => "00111011100110101101010000101100", 
    148 => "00111111010001100101001101110110", 
    149 => "10111011001001011010110011001101", 
    150 => "00111111000001010011011111100011", 
    151 => "00111111011001010000101000110101", 
    152 => "10111011100001011110110000111110", 
    153 => "00111110111001101100110101101100", 
    154 => "00111110110011011110100101111101", 
    155 => "10111011100101001010001010111010", 
    156 => "00111111000100001110100111010101", 
    157 => "00111000101010011101111010001011", 
    158 => "00111011000000111100101011111011", 
    159 => "00111010111001011100010011101011", 
    160 => "10111010101010111101010111011100", 
    161 => "00111110111100110110011110100001", 
    162 => "10111011011011101010111010011111", 
    163 => "00111001111110001000001100110100", 
    164 => "10111010101110011011101010100001", 
    165 => "00111011110000010001000110101110", 
    166 => "10111001110010110110110001111010", 
    167 => "00111010101110001000110010100100", 
    168 => "00111111001011011100010101110010", 
    169 => "00111010100101111010011001111010", 
    170 => "10111011000100100000001110100011", 
    171 => "00111111000101111101101101011110", 
    172 => "00111111001101010010011110110011", 
    173 => "10111011001101101011011011100001", 
    174 => "00111111001001101000000111111110", 
    175 => "00111011001110111101001110000000", 
    176 => "00111111001100001101000111011001", 
    177 => "10111000011001101010111111001101", 
    178 => "10111010110011111110000101010100", 
    179 => "00111001110010101110011001000011", 
    180 => "10111010110111110111101001001110", 
    181 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_Rg6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_Rg6 is
    component predict_ensemble_Rg6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_Rg6_rom_U :  component predict_ensemble_Rg6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


