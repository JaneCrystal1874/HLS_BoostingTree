-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_e3W_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_e3W_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111011110000111011001111101", 
    1 => "00111111010000110001111011100010", 
    2 => "00111000010110100001101010010011", 
    3 => "00111111001011001011011010000101", 
    4 => "00111110110000010100100001110111", 
    5 => "00111110101100010111000111000001", 
    6 => "10111000100101001110010111010110", 
    7 => "00111110110011011011001111100001", 
    8 => "00111000111111111101101001000000", 
    9 => "00111111011010100101011010111101", 
    10 => "00111110101111001001100011100101", 
    11 => "10111000001000111001001111101110", 
    12 => "00111111001100000000000000000000", 
    13 => "00111110111100011011000000100101", 
    14 => "10111000001001111100010110101100", 
    15 => "00111111001111010011010011110000", 
    16 => "00111101010110111111111100000100", 
    17 => "00111101111111100000001101110001", 
    18 => "00110111100001100011011110111101", 
    19 => "10110111111100110100010100000111", 
    20 => "00111110100010101111001010110110", 
    21 => "00111110110110011001111111000011", 
    22 => "00111000011011110001001101001001", 
    23 => "10110111101110001000110010100100", 
    24 => "00111111011000011010011010110101", 
    25 => "00111110111011011011001001110000", 
    26 => "00110110000001100011011110111101", 
    27 => "10110111110110100001101010010011", 
    28 => "00111110101111010010101101001110", 
    29 => "00110101100001100011011110111101", 
    30 => "10000000000000000000000000000000", 
    31 => "00111111001001011100000101100001", 
    32 => "00110111110100011011011100010111", 
    33 => "10110110010010010101001110011100", 
    34 => "00000000000000000000000000000000", 
    35 => "00111111000000110100101001000101", 
    36 => "10110111011010101110000110001011", 
    37 => "00111111011000101101000110111111", 
    38 => "10110111010010010101001110011100", 
    39 => "00111110111010111011000100000111", 
    40 => "00110111100001100011011110111101", 
    41 => "00111101001010101101100100100111", 
    42 => "00110111011010101110000110001011", 
    43 => "10110111011010101110000110001011", 
    44 => "00111101110011000011110010011111", 
    45 => "00110110110010010101001110011100", 
    46 => "00111100000111001010010110111110", 
    47 => "00111110010110001000101110010111", 
    48 => "00111110100110011110010010010011", 
    49 => "10110111010010010101001110011100", 
    50 => "00111101011110001011001101110000", 
    51 => "10110110000001100011011110111101", 
    52 => "00110110100001100011011110111101", 
    53 => "10110110110010010101001110011100", 
    54 => "10000000000000000000000000000000", 
    55 => "00110110111010101110000110001011", 
    56 => "00111101011100101001100000000011", 
    57 => "00110110101001111100010110101100", 
    58 => "00111111010110111010001011110000", 
    59 => "00111110110001111111000011001100", 
    60 => "10110110110010010101001110011100", 
    61 => "00111111010110110101001100001101", 
    62 => "00111110101111010000010100101001", 
    63 => "00111110110000001011001101001110", 
    64 => "00110110111010101110000110001011", 
    65 => "10110110100001100011011110111101", 
    66 => "00111101101010010101000110000011", 
    67 => "00111110001110100110000100010111", 
    68 => "00111110110100111100110001101100", 
    69 => "00111110111010101011011110011001", 
    70 => "00111110000110010111001100010001", 
    71 => "00111110111100001111110111000001", 
    72 => "00111110100001111111001100101000", 
    73 => "00110110100001100011011110111101", 
    74 => "00000000000000000000000000000000", 
    75 => "00110110000001100011011110111101", 
    76 => "10110111000001100011011110111101", 
    77 => "00111110011011101000101111000001", 
    78 => "00111111011000010011001101101110", 
    79 => "00000000000000000000000000000000", 
    80 => "00111110001110011111001110000100", 
    81 => "00111110111101011000000110101110", 
    82 => "00111110101110101100100111110011", 
    83 => "00000000000000000000000000000000", 
    84 => "10110110100001100011011110111101", 
    85 => "00111111000111011100011001001100", 
    86 => "00110110010010010101001110011100", 
    87 => "10110110000001100011011110111101", 
    88 => "10000000000000000000000000000000", 
    89 => "00111110000001111010010111110100", 
    90 => "10110101100001100011011110111101", 
    91 => "00110101100001100011011110111101", 
    92 => "10000000000000000000000000000000", 
    93 => "00111111011100111001110011101001", 
    94 => "00110110000001100011011110111101", 
    95 => "00110101100001100011011110111101", 
    96 => "00111111001001100110000000101101", 
    97 => "00111111011100110001000110100101", 
    98 => "00111111001011111000100011111101", 
    99 => "00111111000001111100010110111101", 
    100 => "00000000000000000000000000000000", 
    101 => "00111111011100010010111100011011", 
    102 => "10110110000001100011011110111101", 
    103 => "00111101110110111110110010101011", 
    104 => "00110101100001100011011110111101", 
    105 => "00111110110111100100010111000011", 
    106 => "00111110100100010110000110000000", 
    107 => "00111111010011111110110000000011", 
    108 => "00110110000001100011011110111101", 
    109 => "00110101100001100011011110111101", 
    110 => "10110110101001111100010110101100", 
    111 => "10000000000000000000000000000000", 
    112 => "00000000000000000000000000000000", 
    113 => "00111110101000110100110011000010", 
    114 => "10110101100001100011011110111101", 
    115 => "00111110110010000101011011000101", 
    116 => "10110101100001100011011110111101", 
    117 => "10000000000000000000000000000000", 
    118 => "00000000000000000000000000000000", 
    119 => "00111111011010100111001001110101", 
    120 => "00111111011011101100000101011101", 
    121 => "00111110111010000100110110011000", 
    122 => "10110101100001100011011110111101", 
    123 => "00111111001111110111000111001001", 
    124 to 125=> "10110101100001100011011110111101", 
    126 => "00111110111011100111011010100111", 
    127 => "00111111000010111110101100101001", 
    128 => "00110101100001100011011110111101", 
    129 => "00111110111011110011100101001011", 
    130 => "00111111001001100010010011101110", 
    131 => "00111110001100000011111010100111", 
    132 => "00111110111111101010110110110100", 
    133 => "10000000000000000000000000000000", 
    134 => "00111110100010000000001010011111", 
    135 => "10110101100001100011011110111101", 
    136 => "00111111000100100111010110001010", 
    137 => "10110101100001100011011110111101", 
    138 => "00111101100100100111001001000011", 
    139 => "00110101100001100011011110111101", 
    140 => "00111111011011010000111000010011", 
    141 => "00000000000000000000000000000000", 
    142 => "00110101100001100011011110111101", 
    143 => "00000000000000000000000000000000", 
    144 => "10000000000000000000000000000000", 
    145 => "00000000000000000000000000000000", 
    146 => "00111111010111001001001111101010", 
    147 => "00111111000011111010011110011000", 
    148 => "00110101100001100011011110111101", 
    149 => "00111111010010110011010111010010", 
    150 => "10000000000000000000000000000000", 
    151 => "00111110111110010011001100111100", 
    152 => "00000000000000000000000000000000", 
    153 => "00111111001110001000010000011111", 
    154 => "00000000000000000000000000000000", 
    155 => "00111110011000010111001010101100", 
    156 => "00111111001101010111111000010011", 
    157 => "00111111000100001110000111100111", 
    158 => "10000000000000000000000000000000", 
    159 => "00000000000000000000000000000000", 
    160 to 161=> "10000000000000000000000000000000", 
    162 => "00000000000000000000000000000000", 
    163 => "00111111000000010110111010111101", 
    164 => "00111111000111000000100011111010", 
    165 => "00111111001101101010100001100101", 
    166 => "00000000000000000000000000000000", 
    167 to 168=> "10000000000000000000000000000000", 
    169 => "00111110111101001101110000100011", 
    170 => "00000000000000000000000000000000", 
    171 => "00111110111101010011111101011011", 
    172 => "00111110111000011010101111010010", 
    173 => "00000000000000000000000000000000", 
    174 to 175=> "10000000000000000000000000000000", 
    176 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_e3W is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_e3W is
    component predict_ensemble_e3W_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_e3W_rom_U :  component predict_ensemble_e3W_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


