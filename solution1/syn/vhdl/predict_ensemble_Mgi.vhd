-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_Mgi_rom is 
    generic(
             DWIDTH     : integer := 5; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_Mgi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00010", 1 => "00100", 2 => "00110", 3 => "01000", 4 => "01010", 
    5 => "00000", 6 => "01100", 7 => "01110", 8 => "10000", 9 to 10=> "00000", 
    11 => "10010", 12 => "10100", 13 => "10110", 14 => "11000", 15 to 16=> "00000", 
    17 => "11010", 18 => "11100", 19 => "00000", 20 => "11110", 21 to 31=> "00000", 
    32 => "00010", 33 => "00000", 34 => "00100", 35 => "00110", 36 => "01000", 
    37 => "01010", 38 to 39=> "00000", 40 => "01100", 41 => "01110", 42 => "10000", 
    43 => "10010", 44 => "00000", 45 => "10100", 46 => "10110", 47 to 48=> "00000", 
    49 => "11000", 50 => "11010", 51 => "11100", 52 => "11110", 53 to 63=> "00000", 
    64 => "00010", 65 => "00100", 66 => "00110", 67 => "01000", 68 to 69=> "00000", 
    70 => "01010", 71 => "01100", 72 => "01110", 73 => "00000", 74 => "10000", 
    75 => "10010", 76 => "10100", 77 => "10110", 78 => "11000", 79 => "11010", 
    80 => "11100", 81 to 84=> "00000", 85 => "11110", 86 to 95=> "00000", 96 => "00010", 
    97 => "00100", 98 => "00110", 99 to 101=> "00000", 102 => "01000", 103 => "01010", 
    104 => "01100", 105 => "01110", 106 => "10000", 107 => "10010", 108 => "10100", 
    109 => "10110", 110 => "11000", 111 => "11010", 112 => "11100", 113 to 115=> "00000", 
    116 => "11110", 117 to 127=> "00000", 128 => "00010", 129 => "00100", 130 => "00110", 
    131 => "01000", 132 => "01010", 133 => "01100", 134 => "01110", 135 => "10000", 
    136 to 140=> "00000", 141 => "10010", 142 => "10100", 143 => "10110", 144 => "00000", 
    145 => "11000", 146 => "11010", 147 => "11100", 148 => "11110", 149 to 159=> "00000", 
    160 => "00010", 161 => "00100", 162 => "00110", 163 to 164=> "00000", 165 => "01000", 
    166 => "01010", 167 => "01100", 168 => "01110", 169 => "10000", 170 => "10010", 
    171 => "10100", 172 to 174=> "00000", 175 => "10110", 176 => "00000", 177 => "11000", 
    178 => "11010", 179 to 180=> "00000", 181 => "11100", 182 to 185=> "00000", 186 => "11110", 
    187 to 191=> "00000", 192 => "00010", 193 => "00100", 194 => "00000", 195 => "00110", 
    196 => "01000", 197 => "01010", 198 => "01100", 199 => "00000", 200 => "01110", 
    201 => "10000", 202 => "00000", 203 => "10010", 204 => "10100", 205 => "00000", 
    206 => "10110", 207 to 210=> "00000", 211 => "11000", 212 => "11010", 213 => "11100", 
    214 => "11110", 215 to 223=> "00000", 224 => "00010", 225 => "00100", 226 => "00110", 
    227 => "00000", 228 => "01000", 229 => "01010", 230 => "01100", 231 => "00000", 
    232 => "01110", 233 => "10000", 234 => "10010", 235 => "10100", 236 to 238=> "00000", 
    239 => "10110", 240 => "00000", 241 => "11000", 242 => "11010", 243 to 244=> "00000", 
    245 => "11100", 246 to 247=> "00000", 248 => "11110", 249 to 255=> "00000", 256 => "00010", 
    257 => "00100", 258 => "00110", 259 => "01000", 260 => "01010", 261 => "00000", 
    262 => "01100", 263 => "01110", 264 => "10000", 265 => "00000", 266 => "10010", 
    267 => "00000", 268 => "10100", 269 => "10110", 270 to 271=> "00000", 272 => "11000", 
    273 to 274=> "00000", 275 => "11010", 276 => "11100", 277 => "00000", 278 => "11110", 
    279 to 287=> "00000", 288 => "00010", 289 => "00100", 290 => "00110", 291 => "01000", 
    292 => "01010", 293 => "01100", 294 => "01110", 295 => "00000", 296 => "10000", 
    297 => "10010", 298 => "00000", 299 => "10100", 300 => "10110", 301 => "00000", 
    302 => "11000", 303 to 309=> "00000", 310 => "11010", 311 => "11100", 312 => "11110", 
    313 to 319=> "00000", 320 => "00010", 321 => "00100", 322 => "00110", 323 => "01000", 
    324 => "01010", 325 => "01100", 326 => "01110", 327 => "10000", 328 => "00000", 
    329 => "10010", 330 => "10100", 331 to 333=> "00000", 334 => "10110", 335 => "11000", 
    336 => "11010", 337 => "11100", 338 to 341=> "00000", 342 => "11110", 343 to 351=> "00000", 
    352 => "00010", 353 => "00100", 354 => "00000", 355 => "00110", 356 => "01000", 
    357 => "01010", 358 => "01100", 359 to 360=> "00000", 361 => "01110", 362 => "10000", 
    363 => "10010", 364 => "10100", 365 => "10110", 366 to 367=> "00000", 368 => "11000", 
    369 => "11010", 370 => "11100", 371 => "11110", 372 to 383=> "00000", 384 => "00010", 
    385 => "00000", 386 => "00100", 387 => "00110", 388 => "01000", 389 => "01010", 
    390 => "01100", 391 => "00000", 392 => "01110", 393 => "10000", 394 to 396=> "00000", 
    397 => "10010", 398 => "10100", 399 => "10110", 400 => "00000", 401 => "11000", 
    402 => "11010", 403 => "11100", 404 => "11110", 405 to 415=> "00000", 416 => "00010", 
    417 => "00100", 418 => "00110", 419 => "01000", 420 => "00000", 421 => "01010", 
    422 => "01100", 423 => "01110", 424 => "10000", 425 to 427=> "00000", 428 => "10010", 
    429 => "10100", 430 => "10110", 431 to 433=> "00000", 434 => "11000", 435 => "11010", 
    436 to 439=> "00000", 440 => "11100", 441 to 443=> "00000", 444 => "11110", 445 to 447=> "00000", 
    448 => "00010", 449 => "00100", 450 => "00110", 451 => "01000", 452 => "01010", 
    453 => "01100", 454 => "01110", 455 => "10000", 456 => "00000", 457 => "10010", 
    458 => "00000", 459 => "10100", 460 to 461=> "00000", 462 => "10110", 463 => "00000", 
    464 => "11000", 465 to 466=> "00000", 467 => "11010", 468 => "00000", 469 => "11100", 
    470 => "11110", 471 to 479=> "00000", 480 => "00010", 481 => "00100", 482 => "00110", 
    483 => "01000", 484 => "01010", 485 => "00000", 486 => "01100", 487 => "01110", 
    488 => "10000", 489 => "10010", 490 => "10100", 491 => "10110", 492 => "11000", 
    493 to 499=> "00000", 500 => "11010", 501 => "11100", 502 => "11110", 503 to 511=> "00000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_Mgi is
    generic (
        DataWidth : INTEGER := 5;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_Mgi is
    component predict_ensemble_Mgi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_Mgi_rom_U :  component predict_ensemble_Mgi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


