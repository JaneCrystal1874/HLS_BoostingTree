-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_cjv_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_cjv_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111011010101011110000011111", 
    1 => "00111101000010110010011101000110", 
    2 => "00111101110000110000000100100001", 
    3 => "00111010101111100101000100001001", 
    4 => "00111110000010111000111111011110", 
    5 => "10111010111000010101000000010010", 
    6 => "00111001100111100101010111000001", 
    7 => "10111010000101011010111100101001", 
    8 => "00111111011101110111111110111111", 
    9 => "00111101010100110010010100001011", 
    10 => "00111001110011100000101110010001", 
    11 => "10111010001000000010101110000100", 
    12 => "00111101011010000111010111010101", 
    13 => "00111001101011111010001011110000", 
    14 => "00111111011101100101011000010101", 
    15 => "00111111011011100101000000001101", 
    16 => "10111001001110111011000111110010", 
    17 => "00111110100010110011111000010100", 
    18 => "00111001011010111110110111111010", 
    19 => "00111110101110001100111001110000", 
    20 => "00111101110001011101000110000001", 
    21 => "00111001111010110110011111000011", 
    22 => "00111110111010111101010010101110", 
    23 => "10111001110100000010010001110000", 
    24 => "00111111011000000001100011100111", 
    25 => "00111110010000000001111011101111", 
    26 => "00111110000110000010001111001000", 
    27 => "00111111011010111101011100101100", 
    28 => "10111001001101000101101011100110", 
    29 => "10111001100000001111100110010000", 
    30 => "10110111100001100011011110111101", 
    31 => "00111111010011010001011101000000", 
    32 => "00111110100100101001100100110001", 
    33 => "00111111010101010111000100001001", 
    34 => "00111110111110000101011001100000", 
    35 => "00111101001010101101100100100111", 
    36 => "00111101111000100111110110001001", 
    37 => "00111110101000100010101100010111", 
    38 => "00111001000010110111010111101010", 
    39 => "00111101110101111001000011111011", 
    40 => "00111001011111001011010011110010", 
    41 => "10111001100001100011011110111101", 
    42 => "00111111011011010100110001000100", 
    43 => "00111000111001101010111111001101", 
    44 => "00111110111100111011001110000101", 
    45 => "00111000100111110110001000110000", 
    46 => "00111001001110001000110010100100", 
    47 => "00111111000010000001111011001101", 
    48 => "10111001010001110011101010111101", 
    49 => "00111000111101110111011011000101", 
    50 => "00111111010000000010010010100010", 
    51 => "10111001011010011101010100011011", 
    52 => "00111111000001111010110010000010", 
    53 => "00111000000001100011011110111101", 
    54 => "10111000011010101110000110001011", 
    55 => "00111101110101101001000110100111", 
    56 => "00111111000011101001100001111000", 
    57 => "00111111011010001001010011100110", 
    58 => "00111111010000000011001111000110", 
    59 => "00111111000000101001011100000111", 
    60 => "00111111000111100011001111001110", 
    61 => "00111000100111110110001000110000", 
    62 => "00111110100001100010111110011101", 
    63 => "10111000110111100100110001010001", 
    64 => "10111000010110100001101010010011", 
    65 => "00111111010011101000101110100000", 
    66 => "00111001000011101001101100111001", 
    67 => "00110110100001100011011110111101", 
    68 => "10111001000011101001101100111001", 
    69 => "00111110111001000000111000010111", 
    70 => "00111001000000100000010111111111", 
    71 => "10110111100011101001101100111001", 
    72 => "10111001000111010100100101010010", 
    73 => "00111110001011101001000111001001", 
    74 => "00111110010101001100011011100111", 
    75 => "00111111011001100011110110010010", 
    76 => "10111000110010110110110001111010", 
    77 => "00111000100110110011000001110011", 
    78 => "00111111000110000110111101011000", 
    79 => "10111000010100011011011100010111", 
    80 => "00110111001001111100010110101100", 
    81 => "00111000110111100100110001010001", 
    82 => "10110110101001111100010110101100", 
    83 => "00111111010111101101011001000101", 
    84 => "00111000100110110011000001110011", 
    85 => "00111111000000101111011110100001", 
    86 => "00111110001111000011101101001111", 
    87 => "00111110100101000101110100100000", 
    88 => "10111000100000100000010111111111", 
    89 => "10110111101100000010100100101000", 
    90 => "00111000011000100111111000001111", 
    91 => "10111000101111001011111001100010", 
    92 => "10110110111010101110000110001011", 
    93 => "00111111000010011001111000110000", 
    94 => "00111110000011101010101010110000", 
    95 => "00111110110100000011111001100100", 
    96 => "10110110110010010101001110011100", 
    97 => "00111000000100101100110011110111", 
    98 => "00111110011011100010101110001100", 
    99 => "00111000101000010111101100001111", 
    100 => "00111111000111100011000011001011", 
    101 => "00111111000000011111101000000001", 
    102 => "00111111001100011100000100101111", 
    103 => "00110110000001100011011110111101", 
    104 => "00111000001001111100010110101100", 
    105 => "00111110110010110101101011101010", 
    106 => "10111000100101001110010111010110", 
    107 => "00111101111101100010100001000110", 
    108 => "00111110111000111100100011100010", 
    109 => "00111110111001000110001011000011", 
    110 => "00110111011010101110000110001011", 
    111 => "10110111111110111010100010000010", 
    112 => "00111110000001001110001100110111", 
    113 => "00110110000001100011011110111101", 
    114 => "00111000001110001000110010100100", 
    115 => "10111000000011101001101100111001", 
    116 => "10110111000001100011011110111101", 
    117 => "00111000000110110011000001110011", 
    118 => "00111110101010111010001011100000", 
    119 => "00111111001011111001101011110010", 
    120 => "00111111001110000011111100001100", 
    121 => "10110110110010010101001110011100", 
    122 => "10111000000110110011000001110011", 
    123 => "00111110101100011101010000110000", 
    124 => "00111111010000101101001110100110", 
    125 => "00110111101001111100010110101100", 
    126 => "00111111011000100010100000010011", 
    127 => "00110110100001100011011110111101", 
    128 => "00110111111100110100010100000111", 
    129 => "00111111001010000011101001110101", 
    130 => "00110111100111110110001000110000", 
    131 => "00111111010101111000111010110000", 
    132 => "10111000000011101001101100111001", 
    133 => "00111111000001100111010011010001", 
    134 => "10110111110110100001101010010011", 
    135 => "00111111000000101010110000010001", 
    136 => "00111111000101011101000101110000", 
    137 => "00111111010000101000110011011111", 
    138 => "00111110110000001000001110111010", 
    139 => "00111111000011011001110010001101", 
    140 => "00111111001010111010010010100101", 
    141 => "00111111000010110000010100010000", 
    142 => "00111110110011010101000011001010", 
    143 => "10111000001010111111011101101010", 
    144 => "10110111000101101111111010110101", 
    145 => "00110111110100011011011100010111", 
    146 => "00110111011110111010100010000010", 
    147 => "00111111000111011000010001111111", 
    148 => "10110111001110001000110010100100", 
    149 => "00111110101110011100011001001100", 
    150 => "00111110110011100001000110011001", 
    151 => "00111000000101101111111010110101", 
    152 => "00111111000011010001011001000100", 
    153 => "00110111000101101111111010110101", 
    154 => "00000000000000000000000000000000", 
    155 => "00111110110011000001111001111001", 
    156 => "00111110100001000011011000010001", 
    157 => "00110110100001100011011110111101", 
    158 => "00111110111111100101110011110110", 
    159 => "00111111010010101001000010111100", 
    160 => "00110111110010010101001110011100", 
    161 => "10110111101110001000110010100100", 
    162 => "00111110011001010000100101111101", 
    163 => "10110111100001100011011110111101", 
    164 => "00111110111100011110000101001100", 
    165 => "00111110101101001000001010111111", 
    166 => "00111111000110111011001001111001", 
    167 => "00110110110010010101001110011100", 
    168 => "10110111100111110110001000110000", 
    169 => "10110111011110111010100010000010", 
    170 => "10110110010010010101001110011100", 
    171 => "00110111101110001000110010100100", 
    172 => "00111110000110000000101111101101", 
    173 => "10111000001000111001001111101110", 
    174 to 175=> "10110111011010101110000110001011", 
    176 => "00111111001000011001010011000000", 
    177 => "00110111100101101111111010110101", 
    178 => "00111110110111000000110111110110", 
    179 => "00110111001110001000110010100100", 
    180 => "10110111001001111100010110101100", 
    181 => "00111110110100111010110101011100", 
    182 => "00111110111000100101101000000100", 
    183 => "00111110111001101100111101000010", 
    184 => "00110111010010010101001110011100", 
    185 => "10110111001110001000110010100100", 
    186 => "00110110100001100011011110111101", 
    187 => "00110111001001111100010110101100", 
    188 => "10110110010010010101001110011100", 
    189 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_cjv is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_cjv is
    component predict_ensemble_cjv_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_cjv_rom_U :  component predict_ensemble_cjv_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


