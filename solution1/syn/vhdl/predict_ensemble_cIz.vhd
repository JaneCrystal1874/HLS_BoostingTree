-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_cIz_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_cIz_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001110110100110000111100", 
    1 => "00111010000001011011000110000101", 
    2 => "00111101011010000111010111010101", 
    3 => "00111110110001111101011110000000", 
    4 => "00111101100000010001000000011011", 
    5 => "00111000110111000011001101110010", 
    6 => "10111010000101101111111010110101", 
    7 => "00111001111101111111110011111100", 
    8 => "00111101100100001111111000000100", 
    9 => "10111010000001110100010000101100", 
    10 => "00111101001010101101100100100111", 
    11 => "00111001010111010011111111100010", 
    12 => "00111111011010101011110000011111", 
    13 => "00111111010111011000110110001011", 
    14 => "00111111001110101110111110100010", 
    15 => "00111111010100111000101100100110", 
    16 => "00111110110110100010111001111111", 
    17 => "10111010001110101010010110000011", 
    18 => "00111000110111000011001101110010", 
    19 => "00111111011100101110111100001011", 
    20 => "00111110010000011100010111000101", 
    21 => "00111001111110101001110000010011", 
    22 => "10111000010001010010000111011110", 
    23 => "00111111011010100101011010111101", 
    24 => "10111000111010001100100010101100", 
    25 => "10111001100011111010011110101000", 
    26 => "10111000001010111111011101101010", 
    27 => "00111110001011101100101001101000", 
    28 => "00111001010000011111110010001111", 
    29 => "00111000110010010101001110011100", 
    30 => "00111111010010000011110010001110", 
    31 => "00111101110001101100100101111110", 
    32 => "00111110000110000000101111101101", 
    33 => "00111110111001110001111100010101", 
    34 => "00111110100011011010001101011101", 
    35 => "00111110001101110000001010100011", 
    36 => "10111001001010011101111010001011", 
    37 => "10111000111110011000111110100011", 
    38 => "00110111011010101110000110001011", 
    39 => "00111110000000010001110000101010", 
    40 => "00111110001111101011110111010011", 
    41 => "00110111100001100011011110111101", 
    42 => "00111110110010111111111100000100", 
    43 => "00111110011011000001111010111101", 
    44 => "00111000101010111111011101101010", 
    45 => "00111110111100100101110010100011", 
    46 => "00111110010100010100111111001110", 
    47 => "10110111110000001111000000100000", 
    48 => "00111110111010001110110001010011", 
    49 => "00111110001011101110000001101110", 
    50 => "10111000011101110111011011000101", 
    51 => "10111000101111101101011101000001", 
    52 => "00111110101101111001111011100000", 
    53 => "00111000011010101110000110001011", 
    54 => "00111110011000100111000110111101", 
    55 => "00110110000001100011011110111101", 
    56 => "10110110010010010101001110011100", 
    57 => "00111000010100011011011100010111", 
    58 => "10110110000001100011011110111101", 
    59 => "10111000000111110110001000110000", 
    60 => "00110110000001100011011110111101", 
    61 => "10111000010101011110100011010101", 
    62 => "00111111011101000100000110111100", 
    63 => "00111111011000100100000010010110", 
    64 => "10111000000110110011000001110011", 
    65 => "00111110011100001100011100111011", 
    66 => "00111000001111001011111001100010", 
    67 => "00111000000111110110001000110000", 
    68 => "00111110001101001100011001100001", 
    69 => "00111110010111101000100101100101", 
    70 => "00111110100010101011000000100001", 
    71 => "00111000011011110001001101001001", 
    72 => "00111110100111100110110101011001", 
    73 => "00111110101111110100101110100101", 
    74 => "00111110100100101110111111110110", 
    75 => "00111111000100110110111000111111", 
    76 => "00111110000011101010101010110000", 
    77 => "00111110111101000000000010111001", 
    78 => "10111000101010011101111010001011", 
    79 => "00111000001110001000110010100100", 
    80 => "00111110101100110111011101011100", 
    81 => "00111110011100100100101000100111", 
    82 => "00111000000100101100110011110111", 
    83 => "10110111111110111010100010000010", 
    84 => "00110110010010010101001110011100", 
    85 => "00000000000000000000000000000000", 
    86 => "10110111100111110110001000110000", 
    87 => "00111111000101111001011000111010", 
    88 => "00111111010001101101110001111111", 
    89 => "00110111100111110110001000110000", 
    90 => "00111110011110010110111110101000", 
    91 => "00111111000011110110011100101100", 
    92 => "10111000011100110100010100000111", 
    93 => "00111111010000001001000111110011", 
    94 => "00111000100111010100100101010010", 
    95 => "00110110000001100011011110111101", 
    96 => "10110110101001111100010110101100", 
    97 => "00111110110111110000100101110100", 
    98 => "00110111111110111010100010000010", 
    99 => "00111110011000101001101110101110", 
    100 => "10110111110110100001101010010011", 
    101 => "10110111111010101110000110001011", 
    102 => "10110101100001100011011110111101", 
    103 => "10110111110010010101001110011100", 
    104 => "00111110110100101100101101100100", 
    105 => "00111110110110111001001100100101", 
    106 => "00111111011000111001110010100110", 
    107 => "00111110101110101100001100100010", 
    108 => "00111110110010011111101010111001", 
    109 => "00111111011000101110100100100101", 
    110 => "10110111101110001000110010100100", 
    111 => "00110111010110100001101010010011", 
    112 => "00111000000111110110001000110000", 
    113 => "00111110101011110001010001010101", 
    114 => "00111110111101000110011100010111", 
    115 => "00111101110111111101011100011011", 
    116 => "00110111110010010101001110011100", 
    117 => "00111111010101110111111011100101", 
    118 => "00110111011010101110000110001011", 
    119 => "00111110111100110101000000001001", 
    120 => "10110110110010010101001110011100", 
    121 => "10110111101100000010100100101000", 
    122 => "00111111011100111001110011101001", 
    123 => "10110110010010010101001110011100", 
    124 => "00110110010010010101001110011100", 
    125 => "00110110100001100011011110111101", 
    126 => "00111110111111001000010101011110", 
    127 => "00111110101111111111101111001110", 
    128 => "00111111000111010101011011100010", 
    129 => "10110110000001100011011110111101", 
    130 => "00110110000001100011011110111101", 
    131 => "10110111011010101110000110001011", 
    132 => "00111111011011101100000101011101", 
    133 => "10110110010010010101001110011100", 
    134 => "00110111110000001111000000100000", 
    135 => "00111110110011100111001110100011", 
    136 => "00111111001100000000000000000000", 
    137 => "00111110101000000000000000000000", 
    138 => "00111111011010110101101011011001", 
    139 => "10110111111000100111111000001111", 
    140 => "00110110010010010101001110011100", 
    141 => "10110101100001100011011110111101", 
    142 => "10110111100101101111111010110101", 
    143 => "00111111001010010000101000100100", 
    144 => "00110110111010101110000110001011", 
    145 => "00111110101100110001110100101110", 
    146 => "00111110111100010101111000111001", 
    147 => "00110111000001100011011110111101", 
    148 => "00111110110011100001111011010110", 
    149 => "00111111001100010001100101001000", 
    150 => "00110110010010010101001110011100", 
    151 => "00111111000010011010111001100000", 
    152 => "00111110001011100001110010011011", 
    153 => "10110111100001100011011110111101", 
    154 => "10110110100001100011011110111101", 
    155 => "10110101100001100011011110111101", 
    156 => "10110111000001100011011110111101", 
    157 => "00110110110010010101001110011100", 
    158 => "00111110111000000000000000000000", 
    159 => "00111111000110011110011110010110", 
    160 => "00111111001010100010111010010000", 
    161 => "00111111000111001100011010100100", 
    162 => "00110110110010010101001110011100", 
    163 => "00111111001110010001000010100001", 
    164 => "00111111000100100000110100110101", 
    165 => "10110101100001100011011110111101", 
    166 => "00110101100001100011011110111101", 
    167 => "00111111010001100101001101110110", 
    168 => "00110110100001100011011110111101", 
    169 => "00000000000000000000000000000000", 
    170 => "00110110100001100011011110111101", 
    171 => "00111111001101101001110001000101", 
    172 => "00111110111110111110100000110110", 
    173 => "00111111001000000010001011111111", 
    174 => "00111111001110111100101011001001", 
    175 => "10110110110010010101001110011100", 
    176 => "10110110010010010101001110011100", 
    177 => "00111110111110100010111001111111", 
    178 => "10110110110010010101001110011100", 
    179 => "00110110101001111100010110101100", 
    180 => "00000000000000000000000000000000", 
    181 => "10110110000001100011011110111101", 
    182 => "00111111001011001011000011010001", 
    183 => "00111111000101011101000101110000", 
    184 => "10110101100001100011011110111101", 
    185 => "00110110000001100011011110111101", 
    186 => "10110101100001100011011110111101", 
    187 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_cIz is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_cIz is
    component predict_ensemble_cIz_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_cIz_rom_U :  component predict_ensemble_cIz_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


