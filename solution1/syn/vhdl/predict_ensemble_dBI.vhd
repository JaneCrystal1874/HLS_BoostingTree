-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_dBI_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_dBI_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010010110010010100101101", 
    1 => "00111000110010110110110001111010", 
    2 => "00111111011100010101000010101001", 
    3 => "00111111011111000101000100010001", 
    4 => "00111000101100000010100100101000", 
    5 => "00111111011011101000100000010110", 
    6 => "00111000101111101101011101000001", 
    7 => "00111111011110010011001100001001", 
    8 => "10111001000100001011010000011000", 
    9 => "00111101011001100000111001010010", 
    10 => "10111000110111000011001101110010", 
    11 => "10111000010100011011011100010111", 
    12 => "00111101100001000011111101100000", 
    13 => "00111000010111100100110001010001", 
    14 => "00111101100101111010010111110100", 
    15 => "10111000101111101101011101000001", 
    16 => "00111101101001111010010110110001", 
    17 => "00111000001010111111011101101010", 
    18 => "00111111011010000010011111111010", 
    19 => "00111101111010110111010011011110", 
    20 => "10111000010001010010000111011110", 
    21 => "00111110111010111011010000101101", 
    22 => "00111110001111001000110010010011", 
    23 => "00111101101000100100011110001000", 
    24 => "10111000101111101101011101000001", 
    25 => "00111110100010010111001001101001", 
    26 => "00111110101000000011110100010100", 
    27 => "00111100110101111000001111100000", 
    28 => "00110111011110111010100010000010", 
    29 => "00111110001101011010110101010100", 
    30 => "00111000110010110110110001111010", 
    31 => "00111111001100000000000000000000", 
    32 => "00111110101010100001111111010001", 
    33 => "10110110000001100011011110111101", 
    34 => "10110111010110100001101010010011", 
    35 => "10110110101001111100010110101100", 
    36 => "00110110100001100011011110111101", 
    37 => "10111000111110111010100010000010", 
    38 => "00111110000010110111111111100001", 
    39 => "00111000001100000010100100101000", 
    40 => "00111101110011000001011111101100", 
    41 => "10110111101110001000110010100100", 
    42 => "00111101111010010011111100101001", 
    43 => "10110111101001111100010110101100", 
    44 => "00111110001111000011111100111110", 
    45 => "10110111011010101110000110001011", 
    46 => "00111110101101100110111010101000", 
    47 => "00111111010100001001000010000010", 
    48 => "00111101100001100111100011000000", 
    49 => "00111110010100110010101011010000", 
    50 => "00110111011010101110000110001011", 
    51 => "00111111001001111001111010011101", 
    52 => "00111000101010011101111010001011", 
    53 => "10111000110001010010000111011110", 
    54 => "00111100010101010110001010011110", 
    55 => "00110111001001111100010110101100", 
    56 => "00111110100001001100111100000111", 
    57 => "00111111001010001110000110000010", 
    58 => "00111111001011111000100111100111", 
    59 => "00110111110110100001101010010011", 
    60 => "00111111011000001011100111101101", 
    61 => "10110110110010010101001110011100", 
    62 => "00111110011101010101111111111110", 
    63 => "00111101110111001100001000001101", 
    64 => "10110111011010101110000110001011", 
    65 => "00111000000111110110001000110000", 
    66 => "00110110100001100011011110111101", 
    67 => "00111111010101111010001001011001", 
    68 => "00111111011100010010100110111011", 
    69 => "00110110110010010101001110011100", 
    70 => "00111110101100000001101001111010", 
    71 => "00110111100101101111111010110101", 
    72 => "00111111010000010111010001100000", 
    73 => "00111110100101101010101101111010", 
    74 => "00110111111100110100010100000111", 
    75 => "10111000010001010010000111011110", 
    76 => "00110111100001100011011110111101", 
    77 => "00111110001101101001011000011100", 
    78 => "10110110100001100011011110111101", 
    79 => "00111111001011101001100100100000", 
    80 => "00111110111110110011000101111111", 
    81 => "00111110110010101011100010000100", 
    82 => "00111111011000101101000110111111", 
    83 => "00110101100001100011011110111101", 
    84 => "00111110100100111001100001000010", 
    85 => "00111101111111011011100001111000", 
    86 => "00111111001000100001001101001101", 
    87 => "10110101100001100011011110111101", 
    88 => "10110111000101101111111010110101", 
    89 => "00110110010010010101001110011100", 
    90 => "00110111101001111100010110101100", 
    91 => "00111110011011100011001001011101", 
    92 => "10110111000101101111111010110101", 
    93 => "00111110101001000100010111001100", 
    94 => "10000000000000000000000000000000", 
    95 => "10110110100001100011011110111101", 
    96 => "00111111001100101110100011000000", 
    97 => "00110111001110001000110010100100", 
    98 => "00110101100001100011011110111101", 
    99 => "10110111010010010101001110011100", 
    100 => "00111111010110110111101000101101", 
    101 => "10110110000001100011011110111101", 
    102 => "10000000000000000000000000000000", 
    103 => "00111111001110000010100011110110", 
    104 => "00110110010010010101001110011100", 
    105 => "00111111010011111011111000110100", 
    106 => "00110111001110001000110010100100", 
    107 => "00111111000111111000010110000011", 
    108 => "00110110010010010101001110011100", 
    109 => "00111111010001001001001101110101", 
    110 => "00110110111010101110000110001011", 
    111 => "00111110110011000001011101000100", 
    112 => "10110110000001100011011110111101", 
    113 => "00111111011000010000010101111101", 
    114 => "10110111000001100011011110111101", 
    115 => "00111111010011000100010000000111", 
    116 => "00111110111101001010000110101101", 
    117 => "00111111001101000101110100010000", 
    118 => "00110111100001100011011110111101", 
    119 => "10000000000000000000000000000000", 
    120 => "10110110010010010101001110011100", 
    121 => "00110110000001100011011110111101", 
    122 => "10000000000000000000000000000000", 
    123 => "00111111001001100101010110110000", 
    124 => "00111111000011100111001100001100", 
    125 => "00111111000110110011100000101110", 
    126 => "10110110100001100011011110111101", 
    127 => "00111110110001000111100100101101", 
    128 => "10110111010010010101001110011100", 
    129 => "00111111001010111100001101100001", 
    130 => "00110110000001100011011110111101", 
    131 => "10000000000000000000000000000000", 
    132 => "00110101100001100011011110111101", 
    133 => "00111111010001000001000000011111", 
    134 => "10110110000001100011011110111101", 
    135 => "00111111010000000100100110001000", 
    136 => "00110110100001100011011110111101", 
    137 => "00111111001101101110100011000000", 
    138 => "10110110010010010101001110011100", 
    139 => "00111111011001110111100000000011", 
    140 => "00111110111011110100000000111110", 
    141 => "00111110101100010000001010011011", 
    142 => "10110110000001100011011110111101", 
    143 => "10000000000000000000000000000000", 
    144 => "00110110010010010101001110011100", 
    145 => "00111110110101000101011111000001", 
    146 => "00111111001010010000011000010100", 
    147 => "00111110101101010010100000101000", 
    148 => "10110110000001100011011110111101", 
    149 => "00111111000111010010010111011101", 
    150 => "00111110111001111001100000001111", 
    151 => "00110101100001100011011110111101", 
    152 => "10110101100001100011011110111101", 
    153 => "00111111000010110101101101001111", 
    154 => "00111111000001000010111001000101", 
    155 => "00110101100001100011011110111101", 
    156 => "00111111001101101100110010100011", 
    157 => "00111110111101101000111110110000", 
    158 => "00110101100001100011011110111101", 
    159 => "00111110111000111000011001001101", 
    160 => "10110110000001100011011110111101", 
    161 => "00110101100001100011011110111101", 
    162 => "10000000000000000000000000000000", 
    163 => "00111110111011001000100110110001", 
    164 => "00111110111100100101000100111011", 
    165 => "00110101100001100011011110111101", 
    166 => "10110101100001100011011110111101", 
    167 => "00111111000011110111001100111011", 
    168 => "00110101100001100011011110111101", 
    169 => "10110101100001100011011110111101", 
    170 => "10000000000000000000000000000000", 
    171 => "00111110110101100001111000101110", 
    172 => "00111110110011001101111011000010", 
    173 => "00110101100001100011011110111101", 
    174 => "00111110110111011110001010001011", 
    175 => "00000000000000000000000000000000", 
    176 => "10110101100001100011011110111101", 
    177 => "10000000000000000000000000000000", 
    178 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_dBI is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_dBI is
    component predict_ensemble_dBI_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_dBI_rom_U :  component predict_ensemble_dBI_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


