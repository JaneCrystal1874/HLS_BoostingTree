-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_ctx_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_ctx_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111011011101111101110100000", 
    1 => "00111111011000011100000110110101", 
    2 => "00111110010001111111101110101101", 
    3 => "00111111010111110000100100001111", 
    4 => "10111001111101111111110011111100", 
    5 => "00111010100000101000110000110111", 
    6 => "10111000111011001111101001101010", 
    7 => "00111111010100111101000011100001", 
    8 => "00111001110101011110100011010101", 
    9 => "00111111011110010011001100001001", 
    10 => "00111111000101101001011010010010", 
    11 => "00111101010000101001111000001010", 
    12 => "00111001101110110010101110111011", 
    13 => "10111010001111110001101001011101", 
    14 => "10111000110000001111000000100000", 
    15 => "10111001110110101010000011001011", 
    16 => "00111101011011010101010010010111", 
    17 => "10111001010000011111110010001111", 
    18 => "00111111010010100001001011010111", 
    19 => "00111101010110111111111100000100", 
    20 => "00111001001111011100101011010001", 
    21 => "00111001010100001010101010101000", 
    22 => "00111110001011000010111101000000", 
    23 => "00111110000001001111010001000001", 
    24 => "00111110010010001001000011010110", 
    25 => "00111110100111010111011100110010", 
    26 => "00111101111110001001001001101000", 
    27 => "00111110101010001000111100100001", 
    28 => "00111111011100010101000010101001", 
    29 => "00111101101111110000110111000111", 
    30 => "10111000110000110000100011111111", 
    31 => "00111000101110101010010110000011", 
    32 => "00111001101011010000001111011010", 
    33 => "10111001111000100111111000001111", 
    34 => "10111000110001010010000111011110", 
    35 => "00111101110111001100001000001101", 
    36 => "00111001111011001111101001101010", 
    37 => "10110111000101101111111010110101", 
    38 => "00110111110110100001101010010011", 
    39 => "00111110101010100100111100000001", 
    40 => "00111110011100001100011100111011", 
    41 => "10111001100010001101011011010100", 
    42 => "00111110110011111110100110111000", 
    43 => "00111110100001111111001001011110", 
    44 => "00111101110001011101000110000001", 
    45 => "00111001000011001000001001011010", 
    46 => "00111111000010100100101101010101", 
    47 => "00111110111011110011000100001010", 
    48 => "00111001011111011100000101100001", 
    49 => "10111001001110111011000111110010", 
    50 => "00111111011000110100001101100011", 
    51 => "00111000010101011110100011010101", 
    52 => "00111110111010101011011110011001", 
    53 => "00110110111010101110000110001011", 
    54 => "10110111000001100011011110111101", 
    55 => "00111111011110010101000110000011", 
    56 => "10111000100010100110100101111011", 
    57 => "10111001000010000101000010011100", 
    58 => "00111111001000001110100010100111", 
    59 => "00111111011001001101000101000010", 
    60 => "00111000101000111001001111101110", 
    61 => "00110110101001111100010110101100", 
    62 => "10111000100000100000010111111111", 
    63 => "00111101111001000101000000100111", 
    64 => "10111000100001100011011110111101", 
    65 => "00111000011001101010111111001101", 
    66 => "00111111010000110001111010001110", 
    67 => "00111110001011011101101000000110", 
    68 => "00111000010101011110100011010101", 
    69 => "00111111000110110100101100011111", 
    70 => "00111111010011101000101110100000", 
    71 => "00111110100110010101101010101111", 
    72 => "00111111000010011101111100110011", 
    73 => "00111111011010001011010111001100", 
    74 => "00111000010001010010000111011110", 
    75 => "10111000011010101110000110001011", 
    76 => "00111111000100001000000110100001", 
    77 => "10111000101111101101011101000001", 
    78 => "10110111011110111010100010000010", 
    79 => "00111110100100000001001001111011", 
    80 => "10111000010001010010000111011110", 
    81 => "00111110000000010101111111001100", 
    82 => "00110111111000100111111000001111", 
    83 => "00111110110100101010011011010010", 
    84 => "00111110101000001011101100101100", 
    85 => "00111110110010001100011110011111", 
    86 => "00111111000001000011010001001100", 
    87 => "10111001000000001111100110010000", 
    88 => "00111111000100100011011101011000", 
    89 => "00111000010101011110100011010101", 
    90 => "00111111001111111011000111110010", 
    91 => "10110110100001100011011110111101", 
    92 => "00110111100011101001101100111001", 
    93 => "00111110000010000011000000011010", 
    94 => "00111110000010100101001100110011", 
    95 => "00111110101111010111111001000110", 
    96 => "00111000011000100111111000001111", 
    97 => "00111111011010010001011000000001", 
    98 => "10111000001100000010100100101000", 
    99 => "10111000001010111111011101101010", 
    100 => "10110111011010101110000110001011", 
    101 => "00110111101100000010100100101000", 
    102 => "10110111010010010101001110011100", 
    103 => "00111110001100011111001111101001", 
    104 => "10111000001000111001001111101110", 
    105 => "00111110100000110000101100111001", 
    106 => "00111110111111110100100101001001", 
    107 => "00111110011101010011000101010101", 
    108 => "00111110100011100001110101100101", 
    109 => "10110111110010010101001110011100", 
    110 => "00111110100001100001101100101010", 
    111 => "10110110000001100011011110111101", 
    112 => "00111000011010101110000110001011", 
    113 => "10110110000001100011011110111101", 
    114 => "10110111110100011011011100010111", 
    115 => "00110111110110100001101010010011", 
    116 => "00110101100001100011011110111101", 
    117 => "00111111001101010011000100010010", 
    118 => "00111110100010101111001010010101", 
    119 => "00111000010111100100110001010001", 
    120 => "00111111010000011100100111000101", 
    121 => "10110111110010010101001110011100", 
    122 => "00111111010101110011010010110101", 
    123 => "00111110011110011111010001001101", 
    124 => "10110111100101101111111010110101", 
    125 => "00111111010000001101000011101110", 
    126 => "00111111000001001101101100100111", 
    127 => "00110111110000001111000000100000", 
    128 => "00111111011001001000110111010010", 
    129 => "00111111010111101101011001000101", 
    130 => "00111111000000010001100100110111", 
    131 => "00110111100101101111111010110101", 
    132 => "00110110100001100011011110111101", 
    133 => "00111110101100110010110100001010", 
    134 => "00110111011110111010100010000010", 
    135 => "00111111010100110000100101010011", 
    136 => "00110111100111110110001000110000", 
    137 => "10111000000000100000010111111111", 
    138 => "10110110101001111100010110101100", 
    139 => "10110111001001111100010110101100", 
    140 => "00111111000000011101110101101110", 
    141 => "00111111001110000101110010011010", 
    142 => "10110111100001100011011110111101", 
    143 => "00111111000100000000000000000000", 
    144 => "00111111001101110010000001000011", 
    145 => "00111110101100010111010001100000", 
    146 => "00110111011110111010100010000010", 
    147 => "00111110011001010110110000001101", 
    148 => "00110111010110100001101010010011", 
    149 => "00111111001111110110100100100011", 
    150 => "00110111000001100011011110111101", 
    151 => "00110111001110001000110010100100", 
    152 => "00111110101110011111111110110101", 
    153 => "10110101100001100011011110111101", 
    154 => "00110110110010010101001110011100", 
    155 => "10000000000000000000000000000000", 
    156 => "10110111001001111100010110101100", 
    157 => "10110111001110001000110010100100", 
    158 => "00111110110111111100000010010000", 
    159 => "00111111000001001111011011110001", 
    160 => "00111110111011001001011100110001", 
    161 => "00111110111000101100000001100010", 
    162 => "00110111010110100001101010010011", 
    163 => "00111110111101011111111110000010", 
    164 => "00111111000110101101110001011101", 
    165 => "00111111000011000110111011010010", 
    166 => "00111110110010110010011110101010", 
    167 => "10110111010010010101001110011100", 
    168 => "10110101100001100011011110111101", 
    169 => "00111110110101000101110100100000", 
    170 => "00111111001110011010101100001000", 
    171 => "00110111000101101111111010110101", 
    172 => "10000000000000000000000000000000", 
    173 => "10110110110010010101001110011100", 
    174 => "00110110000001100011011110111101", 
    175 => "00111110110001000100000000101001", 
    176 => "00111111001100111011101111111001", 
    177 => "00111110110111001001100100000111", 
    178 => "10110111001110001000110010100100", 
    179 => "00110110000001100011011110111101", 
    180 => "00110111000001100011011110111101", 
    181 => "00111110101011110000110001010110", 
    182 => "00110110100001100011011110111101", 
    183 => "00110110111010101110000110001011", 
    184 => "00111111000100101110100011000000", 
    185 => "00110110000001100011011110111101", 
    186 => "00111111000010010111001010101100", 
    187 => "10110111000101101111111010110101", 
    188 => "10110101100001100011011110111101", 
    189 => "10110110000001100011011110111101", 
    190 => "10110111000001100011011110111101", 
    191 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_ctx is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_ctx is
    component predict_ensemble_ctx_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_ctx_rom_U :  component predict_ensemble_ctx_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


