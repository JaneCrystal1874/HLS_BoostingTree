-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_fdY_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_fdY_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111000001001111001010111111", 
    1 => "00111111011101110011011111111100", 
    2 => "00111101110011011100010111010110", 
    3 => "00111111000000001010100100100110", 
    4 => "00111101101001011011111100100111", 
    5 => "00111110100011100100100100001010", 
    6 => "00111110000000010101111111001100", 
    7 => "00111110111111011001100101000110", 
    8 => "00111111001001111001100110000000", 
    9 => "00111100101101010011110101100100", 
    10 => "00111110100011011010111000111110", 
    11 => "10111101101000011111010100111000", 
    12 => "00111110111110000110111100100110", 
    13 => "00111111011101001110100111110111", 
    14 => "00111101110100110000000111101011", 
    15 => "00111111010101000000100110110011", 
    16 => "00111101100000111101010001101011", 
    17 => "00111101110001111011110000111100", 
    18 => "00111111011110101011111000111000", 
    19 => "00111111001010101100011100100010", 
    20 => "10111101101011001111100011010111", 
    21 => "00111110110110110101111010110111", 
    22 => "00111111000000000100000111001100", 
    23 => "00111110000001000000100010010110", 
    24 => "00111110110111101110011001110101", 
    25 => "00111111001000101101101000010010", 
    26 => "00111101100100111111111100100110", 
    27 => "00111111000010000100100110101010", 
    28 => "10111101101001111010111010011011", 
    29 => "00111111010011101011000111000100", 
    30 => "00111110000110000010110010110010", 
    31 => "00111110111000110100000010010010", 
    32 => "00111111000010001101000111001000", 
    33 => "00111101100111111000110110110101", 
    34 => "00111110100100110010001000101001", 
    35 => "00111111000110010000010000001100", 
    36 => "00111111000100010011110100110010", 
    37 => "00111110001011010010011111000100", 
    38 => "00111110110000010101010000100010", 
    39 => "00111110111011010111001110101000", 
    40 => "10111101101111010001000000101100", 
    41 => "10111101110101001111010110010000", 
    42 => "00111101011010010001010000101011", 
    43 => "10111110100101101110101000100001", 
    44 => "00111111011101100000101010110111", 
    45 => "00111101010101100101110000101101", 
    46 => "00111110111011100110111001100101", 
    47 => "00111101110001000111011101111001", 
    48 => "00111111001110110010000010111000", 
    49 => "00111111000101011001111100011011", 
    50 => "00111111000011010011110100100001", 
    51 => "00111111010011111001101010101110", 
    52 => "00111111011011101000100000010110", 
    53 => "00111110000011110010011110111011", 
    54 => "00111110100000100101101001101000", 
    55 => "00111110100010100110110011100011", 
    56 => "10111101111000011000101011001010", 
    57 => "00111110111011111010001101010101", 
    58 => "00111110101011110011000010000011", 
    59 => "10111100101100010111100010110011", 
    60 => "10111110000001110100111011101100", 
    61 => "00111110100110111011111001000100", 
    62 => "00111111001100010101111110111011", 
    63 => "00111111010001001100110110010110", 
    64 => "00111111010000010001010001011110", 
    65 => "00111111000100001111110000011110", 
    66 => "10111101001011000011111010111000", 
    67 => "00111110001111010011100010001011", 
    68 => "00111100100111111111100100101111", 
    69 => "10111101110010000100000011100001", 
    70 => "00111100000011101110011010111000", 
    71 => "00111111011001101110100101010111", 
    72 => "10111101010101110101110000000111", 
    73 => "00111101111110001001001001101000", 
    74 => "00111111000110001010111011111011", 
    75 => "10111100110110011101011101110111", 
    76 => "00111101101000001111011001101010", 
    77 => "00111110100010000100100110101010", 
    78 => "00111011111100101011111011001111", 
    79 => "00111100011101011101011110001000", 
    80 => "00111101001110010001001011011100", 
    81 => "00111101100110110100101010101001", 
    82 => "10111101001110010011100010011011", 
    83 => "10111110010101110101101011111011", 
    84 => "00111111011000111001010100011100", 
    85 => "00111111010001110110100001101010", 
    86 => "00111111001001011101000101110000", 
    87 => "10111101100111011011100110000100", 
    88 => "00111110110011101110001100101110", 
    89 => "00111111001010110110111111010010", 
    90 => "10111100101011111000001101111011", 
    91 => "00111110101111011000111011001001", 
    92 => "00111101100011011010011111110100", 
    93 => "00111101110110101000110001011000", 
    94 => "00111111000001000011100100000100", 
    95 => "00111110010110001000101010001011", 
    96 => "00111110110100101001110111000111", 
    97 => "10111011001110000100100110001000", 
    98 => "00111110100101000111010101100000", 
    99 => "00111001001010111111011101101010", 
    100 => "10111101000111000010000010010010", 
    101 => "10111101011110001011100010101110", 
    102 => "00111011101110001010010111001110", 
    103 => "00111110000000011101111011110000", 
    104 => "00111100010010001101100111111001", 
    105 => "00111111011010010101101000111010", 
    106 => "00111110111000001011000011010001", 
    107 => "00111101001010101011011010001101", 
    108 => "10111100010101000000101010101111", 
    109 => "00111110111100000001110010110100", 
    110 => "00111111001110101101000111110010", 
    111 => "00111101001100000001101110000110", 
    112 => "10111101101001111001101010101110", 
    113 => "10111101100101110001000000000010", 
    114 => "00111111000011110011110101111101", 
    115 => "00111110101101010001101001100101", 
    116 => "00111110111110100001001011111001", 
    117 => "10111101010100101000011010110110", 
    118 => "10111101110000100011011111001110", 
    119 => "10111101001011011011111001111111", 
    120 => "10111100000011100111000101000111", 
    121 => "00111101011010101010101100000100", 
    122 => "00111111000111000111111111011100", 
    123 => "00111111001001000110011001101111", 
    124 => "00111111001111111110111010100010", 
    125 => "00111101010111101111100001001000", 
    126 => "00111111010011011111110001001100", 
    127 => "00111110100100110010110101101111", 
    128 => "10111101010111110110111111010010", 
    129 => "00111101000100100110111010011000", 
    130 => "10111011110000111000011011010011", 
    131 => "00111101111001100101100101001011", 
    132 => "00111100100100101101100110001100", 
    133 => "00111100001100010100101010010000", 
    134 => "00111111010010000100101100001010", 
    135 => "10111100100111101111110110000111", 
    136 => "10111101101111000111111101111000", 
    137 => "00111111001000110011001010001011", 
    138 => "00111101011100111000101101001000", 
    139 => "10111101001111001100010010101100", 
    140 => "00111110111011011000010001001101", 
    141 => "00111110111100000011001000010010", 
    142 => "00111110111100110001000101100010", 
    143 => "10111100111010000010010100011000", 
    144 => "10111100001011001100000010111110", 
    145 => "00111101010000001110100011001001", 
    146 => "10111101011100111101101011111001", 
    147 => "00111101001101010101011110011011", 
    148 => "10111011000010010011101101111110", 
    149 => "00111111001110001001011110010110", 
    150 => "10111101100110011010101011100111", 
    151 => "00111111000000001010011111010110", 
    152 => "00111101010100001001101011101101", 
    153 => "10111100011111110110100100000001", 
    154 => "00111101001100011010001110110001", 
    155 => "00111110111100010000010111000000", 
    156 => "10111101100101101011000000010000", 
    157 => "00111110101000011000110110101100", 
    158 => "00111110100010110001011110001011", 
    159 => "00111111010100000000000000000000", 
    160 => "10111101001000111101111101101110", 
    161 => "10111100000100101000000101110111", 
    162 => "00111110111001101100100010010011", 
    163 => "00111110100101110011110001110001", 
    164 => "00111110100100001010010001011101", 
    165 => "00111101100001001101000100100000", 
    166 => "00111100111010100000101110100010", 
    167 => "00111110010111101111000010101110", 
    168 => "00111110110001010000111010111011", 
    169 => "10111101001011000011010101001000", 
    170 => "00111100100110010000011011001101", 
    171 => "00111101110000010001101110100100", 
    172 => "00111110100100010100110111111001", 
    173 => "00111100100001000000001110011011", 
    174 => "00111110111001000110111010110001", 
    175 => "10111100000110110110001011000111", 
    176 => "00111100111011001111010000011111", 
    177 => "10111101001111101111110100000000", 
    178 => "10111011110001000110000011101110", 
    179 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_fdY is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_fdY is
    component predict_ensemble_fdY_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_fdY_rom_U :  component predict_ensemble_fdY_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


