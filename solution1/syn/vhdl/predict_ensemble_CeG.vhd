-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_CeG_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_CeG_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111011000011100000110110101", 
    1 => "00111100010100011010011001010000", 
    2 => "00111100111111110110001010110111", 
    3 => "10111100111001101010000100011111", 
    4 => "00111101100111011011110100110000", 
    5 => "00111100111001101010000100011111", 
    6 => "00111111010000100001010001101010", 
    7 => "00111101011101100011101100100101", 
    8 => "00111101101001111010010110110001", 
    9 => "10111011111000100011101011110011", 
    10 => "00111100010011001101010100110000", 
    11 => "00111110111101101011011101000101", 
    12 => "00111110111101101000001101011110", 
    13 => "10111101010100110111001010100100", 
    14 => "00111101110011000001011111101100", 
    15 => "00111101011000001010010000011010", 
    16 => "10111101010100110100011110100110", 
    17 => "00111010001101001110000100011110", 
    18 => "00111101100011100101111111111010", 
    19 => "00111110111001101100101101010011", 
    20 => "00111101111101110010111001101010", 
    21 => "00111110100100111001110011111010", 
    22 => "00111100111101010111010011110111", 
    23 => "00111100110110000011111010000101", 
    24 => "10111011001001010110100110110001", 
    25 => "00111111000011111101011100001010", 
    26 => "00111101111111011111010000111100", 
    27 => "00111100010100110001001100111000", 
    28 => "10111100100000001111110111000001", 
    29 => "00111110110110011000011101000000", 
    30 => "00111100010100011001100110111011", 
    31 => "00111100010100110100110111110000", 
    32 => "00111110000000010101111111001100", 
    33 => "00110111010110100001101010010011", 
    34 => "10111100110110011100100011001001", 
    35 => "10111100010100011110110110011110", 
    36 => "00111111011110100101000101101110", 
    37 => "00111110001100001111110111000001", 
    38 => "00111100000100110011111000110110", 
    39 => "00111101111111100000001101110001", 
    40 => "00111101111000100111110110001001", 
    41 => "00111111000100101110100011000000", 
    42 => "10111100001000101011111000000110", 
    43 => "00111110000111110100100100000110", 
    44 => "00111110001100110000000000010101", 
    45 => "00111101101111001010100101101001", 
    46 => "00111011011010000010000011100110", 
    47 => "00111100010100111111000110000100", 
    48 => "00111011101110011000100001001100", 
    49 => "00111111000001001100100001000111", 
    50 => "00111110010011000101001110110001", 
    51 => "00000000000000000000000000000000", 
    52 => "10111100000000110000000110101000", 
    53 => "00111110001001011110001010001011", 
    54 => "10111100011111010101010001010100", 
    55 => "00111100010001101101101001000101", 
    56 => "00111110010110111101111100001001", 
    57 => "00111110111011000001111010011011", 
    58 => "10111100000000000110001010010001", 
    59 => "10111100000111111100011011011010", 
    60 => "00111110100010001010111010010111", 
    61 => "00111110000011011111101101010000", 
    62 => "10111011101010110001010011101100", 
    63 => "00111110100111100110111001100101", 
    64 => "00111110110101101011000001010011", 
    65 => "00111010011011100000011011011001", 
    66 => "00111011111000101111001110000000", 
    67 => "00111011110110100001001000110000", 
    68 => "00111111001100000000000000000000", 
    69 => "00111110101010011101110101011101", 
    70 => "00111110111001010011110101000011", 
    71 => "10111100010101110111111110101110", 
    72 => "10111011111000101000111011010110", 
    73 => "00111100110000110010001000101001", 
    74 => "00111110110110110111100000100101", 
    75 => "00111110101110011111011000000001", 
    76 => "00111110111010000011000111001111", 
    77 => "00111110101101001110110000100000", 
    78 => "00111100010111111111001111110001", 
    79 => "10111010110010001000101001001000", 
    80 => "10111100010001010101100001100100", 
    81 => "00111100001111010101110111000100", 
    82 => "00111110110110010000110011010100", 
    83 => "10111100001001100010101010100010", 
    84 => "00111110100111100110100011000010", 
    85 => "00111111001000101100010011010110", 
    86 => "00111110111001000011110010011111", 
    87 => "00111110110000010011001011010111", 
    88 => "00111110111111100100010111100101", 
    89 => "00111111010110111001011110011010", 
    90 => "10111100001111010110011000100111", 
    91 => "00111111000000111010111011101111", 
    92 => "00111111010111101101010101111100", 
    93 => "10111001100101010110110000001101", 
    94 => "00111111000001110101001101110010", 
    95 => "00111110100000010101101000101001", 
    96 => "00111110100010110101011111100110", 
    97 => "00111110111110100010101110111111", 
    98 => "00111100010000010011001100111100", 
    99 => "00111011000000001111100110010000", 
    100 => "00111100100011110001110100111111", 
    101 => "00111110111010000101111000111110", 
    102 => "10111100010010000100111110010000", 
    103 => "00111111001000111011010000111110", 
    104 => "00111100010000001010100011010010", 
    105 => "00111110111110110010010001100100", 
    106 => "10111011111000111111011110001100", 
    107 => "00111011110110001100101100001000", 
    108 => "00111010110100111111000110000100", 
    109 => "00111111000001100111001000110010", 
    110 => "10111011111110001011110111101100", 
    111 => "10111100000001011111100011010011", 
    112 => "00111110111100011100001110101101", 
    113 => "00111011011101011110010000011101", 
    114 => "00111011111101010001001001100110", 
    115 => "10111011011011001011011101001110", 
    116 => "00111110111000011010001111110100", 
    117 => "00111011101010001111110000001101", 
    118 => "10111011010001100000110010111111", 
    119 => "00111111000001100101101111111011", 
    120 => "00111110111100111101010100110100", 
    121 => "10111011000011000011111100111110", 
    122 => "00111011101011110000101111110010", 
    123 => "00111010111010110110011111000011", 
    124 => "00111100010000100111111010010101", 
    125 => "10111100000111110001011010110001", 
    126 => "00111110101110010010110010101110", 
    127 => "10111011111010111111011001011110", 
    128 => "00111111000111010100011010110010", 
    129 => "00111110001100000011111010100111", 
    130 => "00111111010110001100101101001011", 
    131 => "10111010101001101101101011001011", 
    132 => "00111110101000000000000000000000", 
    133 => "00111111010011000011101100111111", 
    134 => "10111011110000101000001011000111", 
    135 => "00111100001010010001000100000110", 
    136 => "00111111000001011101000101110000", 
    137 => "00111111010010010110100110100001", 
    138 => "00111100001100100010110100001110", 
    139 => "00111111000011010110100100111100", 
    140 => "00111011111110110101110100000011", 
    141 => "00111111001011011010100110000110", 
    142 => "00111111000001000100110000100111", 
    143 => "00111011100001011011100111101001", 
    144 => "10111011001011001110001001001100", 
    145 => "00111110101001100110101001110111", 
    146 => "00111110111000111010000011000111", 
    147 => "00111111010010001101101001101110", 
    148 => "00111100001110011101011111111110", 
    149 => "00111111001100101101010010000000", 
    150 => "10111100000010001100101000111110", 
    151 => "00111011101100001111101011011111", 
    152 => "00111111000110110110101111010011", 
    153 => "00111110110101000011010100100110", 
    154 => "10111100000100110111000010001011", 
    155 => "00111010100100010011101001010000", 
    156 => "10111011101100111110110111011001", 
    157 => "00111111010000101010010111000110", 
    158 => "00111111000111000111000111000101", 
    159 => "00111011101010100000100001111101", 
    160 => "00111111000010110100101011111101", 
    161 => "00111111010000000000000000000000", 
    162 => "00111111000111100011001111001110", 
    163 => "10111011111100100111101110110011", 
    164 => "10111011000111001111010101101111", 
    165 => "10111011001010110001110101010000", 
    166 => "00111011100101000001010000011111", 
    167 => "00111010101001010110100110110001", 
    168 => "00111011110111100000000011010010", 
    169 => "00111111000110111011011000000011", 
    170 => "00111111001100101110001111100111", 
    171 => "00111111001001001010101010010111", 
    172 => "00111011011000100011101011110011", 
    173 => "10111100001100100111100010001110", 
    174 => "10111010100100110001000000010011", 
    175 => "00111111011010001000011111111101", 
    176 => "00111111010001000000000111110111", 
    177 => "00111111001111011100001100000101", 
    178 => "10111010101011111010001011110000", 
    179 => "10111011100000110000101000001011", 
    180 => "00111011010100011111101000110011", 
    181 => "10111011001100000001100001100001", 
    182 => "10111011111110000100000000011000", 
    183 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_CeG is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_CeG is
    component predict_ensemble_CeG_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_CeG_rom_U :  component predict_ensemble_CeG_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


