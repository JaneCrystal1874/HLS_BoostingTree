-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_cow_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_cow_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100000100011011001111110010", 
    1 => "00111010011010111110110111111010", 
    2 => "00111100010110000011100000111011", 
    3 => "10111010010000011111110010001111", 
    4 => "00111101010011011011010010001001", 
    5 => "00111001110001011010100000010101", 
    6 => "00111111011110000011101001000011", 
    7 => "00111101011101111010010111110100", 
    8 => "10111001110101001101110001100110", 
    9 => "00111110000100001111100111010011", 
    10 => "00111110010110100010010010001001", 
    11 => "10110111111100110100010100000111", 
    12 => "00111010000101001110010111010110", 
    13 => "00111110100110001111100110110001", 
    14 => "00111111011110000111011001111101", 
    15 => "10111010000110000000101100100100", 
    16 => "00111110000111001100000001111011", 
    17 => "00111111011000010111010001100000", 
    18 => "00111001001110111011000111110010", 
    19 => "00111001100101001110010111010110", 
    20 => "10111000111101010101110111100110", 
    21 => "00111111011010111100000111110000", 
    22 => "00111101110110000101010000000100", 
    23 => "00111101110001011101000110000001", 
    24 => "10111001000110100010010000000011", 
    25 => "00111000010001010010000111011110", 
    26 => "10111001100111001100001100011010", 
    27 => "00111110101001001100000100100010", 
    28 => "00111110101100101010000000000010", 
    29 => "10111000110010110110110001111010", 
    30 => "00111001101001011010110011001101", 
    31 => "00111101110001101100100101111110", 
    32 => "00111101011010000111010111010101", 
    33 => "00111001110010101110011001000011", 
    34 => "00111110110101100101001110000111", 
    35 => "10111001110100000010010001110000", 
    36 => "00111111010010001100011011010110", 
    37 => "00111110100101100101011000100110", 
    38 => "00111001010100001010101010101000", 
    39 => "00111110100010110001011100000101", 
    40 => "00111111000000010101111101000110", 
    41 => "00111110111101110000000001101001", 
    42 => "10111001010001000001010101101110", 
    43 => "10111000110110100001101010010011", 
    44 => "00111101100111011011110100110000", 
    45 => "10111001100100010011101001010000", 
    46 => "00111000100100101100110011110111", 
    47 => "00111110010100000110001010010001", 
    48 => "00111000101011100001000001001001", 
    49 => "00111000101010111111011101101010", 
    50 => "00111101101101100000110110001000", 
    51 => "00111110000101111101010101100111", 
    52 => "00111110011010001011001000100000", 
    53 => "10111000100110110011000001110011", 
    54 => "00111101111000010011000010011100", 
    55 => "00111101111001111101101100101011", 
    56 => "00111000110010010101001110011100", 
    57 => "00111110100000110010101111111110", 
    58 => "00111110110110001101100010001000", 
    59 => "00111111000110010010011100111101", 
    60 => "00111111010000011011111101111011", 
    61 => "00110111111000100111111000001111", 
    62 => "10110111111000100111111000001111", 
    63 => "10111000100110010001011110010100", 
    64 => "00111111000110101010011010001111", 
    65 => "00111000001101000101101011100110", 
    66 => "00111110010000100011100001010100", 
    67 => "00110111001001111100010110101100", 
    68 => "00111001000110010001011110010100", 
    69 => "00111111011010001110001010110000", 
    70 => "00111000100011001000001001011010", 
    71 => "10111000000100101100110011110111", 
    72 => "00110111010010010101001110011100", 
    73 => "10111000010111100100110001010001", 
    74 => "00111110111101011000000110101110", 
    75 => "00111111011001101110111001110100", 
    76 => "00111111011011110101001011001010", 
    77 => "00111111000011111000111000001000", 
    78 => "00111000001000111001001111101110", 
    79 => "00111111011000111100111001000010", 
    80 => "00111000011011110001001101001001", 
    81 => "10111000111011110001001101001001", 
    82 => "00111111011100101010010000110011", 
    83 => "00111110111100110111101011100101", 
    84 => "10110111111110111010100010000010", 
    85 => "00111111010111101101011001000101", 
    86 => "10111000011011110001001101001001", 
    87 => "00111000001100000010100100101000", 
    88 => "10110111010010010101001110011100", 
    89 => "00111110110000110110001000100000", 
    90 => "00110111101110001000110010100100", 
    91 => "00111110001101000101110011111111", 
    92 => "00111000000010100110100101111011", 
    93 => "00111110111001011111111000010001", 
    94 => "00111110110111001110110110010001", 
    95 => "00111111000100000010010011010101", 
    96 => "00111110010101110100010110111111", 
    97 => "00111110100100100101110111110010", 
    98 => "10111000000000100000010111111111", 
    99 => "00110111101100000010100100101000", 
    100 => "10110110100001100011011110111101", 
    101 => "10111000010111100100110001010001", 
    102 => "10110110100001100011011110111101", 
    103 => "00111000010000001111000000100000", 
    104 => "00111110011000010010010001001010", 
    105 => "10110111000101101111111010110101", 
    106 => "00110111000101101111111010110101", 
    107 => "10110111111110111010100010000010", 
    108 => "00111110101011011000101001110110", 
    109 => "00111110111101100110110010110001", 
    110 => "00111110000000100011100111100111", 
    111 => "10110101100001100011011110111101", 
    112 => "00111000010110100001101010010011", 
    113 => "10111000000011101001101100111001", 
    114 => "00111110000001110101100000011001", 
    115 => "00111000010100011011011100010111", 
    116 => "00111110011110011111010001001101", 
    117 => "10111000000100101100110011110111", 
    118 => "00111111001000101001111000101100", 
    119 => "00111111001000000001001010001100", 
    120 => "00111111011010010010101100111101", 
    121 => "00111110100010100000110101010110", 
    122 => "10111000010111100100110001010001", 
    123 => "00111111000000110110000000000111", 
    124 => "00111000001101000101101011100110", 
    125 => "00111110110110110111101110001101", 
    126 => "00111111011000000000001100010101", 
    127 => "10110111010110100001101010010011", 
    128 => "00111110010011111110001111110011", 
    129 => "00111111001101111001111011100000", 
    130 => "00110111110010010101001110011100", 
    131 => "00111111001000010111010001100000", 
    132 => "10110111100011101001101100111001", 
    133 => "10110111000101101111111010110101", 
    134 => "00111111000011001100101000101110", 
    135 => "10110110110010010101001110011100", 
    136 => "00110111010110100001101010010011", 
    137 => "00111110111010000100001100011100", 
    138 => "00111111000111010000111011101101", 
    139 => "00110111110100011011011100010111", 
    140 => "00110111010010010101001110011100", 
    141 => "00111111001101101110001010101000", 
    142 => "00111111001001111101000011000000", 
    143 => "00111110100101011111101001100110", 
    144 => "10110110110010010101001110011100", 
    145 => "00111111001001010011000010011100", 
    146 => "00111111001101000011001001000100", 
    147 => "00111110111101110100010111100001", 
    148 => "00110111101100000010100100101000", 
    149 => "10110110111010101110000110001011", 
    150 => "00111111010000010001011111000110", 
    151 => "00111111000011001000010011111001", 
    152 => "00111111000010010100000001010111", 
    153 => "10110111000101101111111010110101", 
    154 => "10110111111000100111111000001111", 
    155 => "00111111000010101001110101000001", 
    156 => "00111111000110011001010001011011", 
    157 => "00110111101001111100010110101100", 
    158 => "00111110001101001111000001010010", 
    159 => "00111110110100011000110000111011", 
    160 => "00111111000101011011010000000011", 
    161 => "10110110101001111100010110101100", 
    162 => "00110111001110001000110010100100", 
    163 => "00111111000010110100011101100011", 
    164 => "00110111011110111010100010000010", 
    165 => "00111111000000010011101001010000", 
    166 => "10110111011110111010100010000010", 
    167 => "00110111100001100011011110111101", 
    168 => "00111111001011101110101011101010", 
    169 => "00110111000001100011011110111101", 
    170 => "10110110111010101110000110001011", 
    171 => "10110111110000001111000000100000", 
    172 => "10110110110010010101001110011100", 
    173 => "00111110111101111000010011101100", 
    174 => "00111111001010100010110000010011", 
    175 => "10110111010110100001101010010011", 
    176 => "00111110111010101011010000001111", 
    177 => "10110110111010101110000110001011", 
    178 => "00111111001100100001011110110001", 
    179 => "00111110110111101100111111001000", 
    180 => "00110111011110111010100010000010", 
    181 => "10110111011110111010100010000010", 
    182 => "10110110000001100011011110111101", 
    183 => "10110110110010010101001110011100", 
    184 => "00111111000010001110011011010001", 
    185 => "00110111001110001000110010100100", 
    186 => "10000000000000000000000000000000", 
    187 => "00110110101001111100010110101100", 
    188 => "10110110101001111100010110101100", 
    189 => "00110110000001100011011110111101", 
    190 => "00110110101001111100010110101100", 
    191 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_cow is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_cow is
    component predict_ensemble_cow_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_cow_rom_U :  component predict_ensemble_cow_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


