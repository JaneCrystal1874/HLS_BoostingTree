-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_cSB_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_cSB_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011110000011011010101000", 
    1 => "10111110101000011110100001100000", 
    2 => "00111111011000010111010001100000", 
    3 => "00111110101011011001010000101001", 
    4 => "00111110100010100011000101000000", 
    5 => "00111110101001001110001110011011", 
    6 => "00111101111101110011001000010110", 
    7 => "00111111000100011111100100111000", 
    8 => "00111111001001100000100100110101", 
    9 => "10111110110001100010110001010110", 
    10 => "00111111001111001001001111101010", 
    11 => "00111111010100110000100011111111", 
    12 => "00111111010001100110111110110101", 
    13 => "00111101101111100011111110111100", 
    14 => "00111111001101010100100111101001", 
    15 => "00111111001100110011001101100110", 
    16 => "10111110110001001110010000000000", 
    17 => "00111110101010110111100111111011", 
    18 => "10111110100111101110101010000101", 
    19 => "00111111001111000011111111100110", 
    20 => "10111101110001100010000010101011", 
    21 => "00111111001011011100110011011001", 
    22 => "00111110101001100000000100010101", 
    23 => "10111110011010101001111110111110", 
    24 => "00111111001011100010001000101101", 
    25 => "00111111000000011000101111100111", 
    26 => "00111111001010100100001100000011", 
    27 => "00111111001110011000010101111011", 
    28 => "10111110110001000000011001011011", 
    29 => "00111111000100010110101010011100", 
    30 => "00111101111000110010010111010101", 
    31 => "00111101110011110001101100100110", 
    32 => "00111111000000000110100111111001", 
    33 => "00111110010101000110001011000011", 
    34 => "10111101101000010110010110010000", 
    35 => "00111111000000000110001100010111", 
    36 => "00111111001101000010000010100011", 
    37 => "00111111001000001000000111100100", 
    38 => "00111111010111001110110011001000", 
    39 => "00111110111110101010110111100110", 
    40 => "00111111010111011101101000000110", 
    41 => "10111110111100010100011101101011", 
    42 => "10111100100000110100001010101011", 
    43 => "00111110110110110000001111000000", 
    44 => "00111111001011001110010010101000", 
    45 => "10111110011100100000101000110001", 
    46 => "10111100010001000001000100111100", 
    47 => "00111111011100110010000010000110", 
    48 => "10111111001110000101110111111011", 
    49 => "00111111001011110111001111010010", 
    50 => "00111111011000100011011011110100", 
    51 => "00111100100111011101111000110111", 
    52 => "10111110001100101001111101011010", 
    53 => "00111110010000101101011100110000", 
    54 => "00111111010101111111000010011001", 
    55 => "00111110111100110100010001011111", 
    56 => "00111110111000000000100100001011", 
    57 => "00111111000000000101000010011100", 
    58 => "00111111001101101101000110101111", 
    59 => "10111110001110101011100000100000", 
    60 => "00111111000110011010000111111101", 
    61 => "00111101000010101101010101111100", 
    62 => "10111011011010001000010110010000", 
    63 => "00111110110111000110000111111010", 
    64 => "10111111001101010000011011011101", 
    65 => "00111111010001111110111001001110", 
    66 => "00111111000001000001101100110011", 
    67 => "00111110111100101000100101110110", 
    68 => "00111111000110111100101010111000", 
    69 => "00111101001111100000010110001010", 
    70 => "00111111010010000111010001000011", 
    71 => "00111110111011111110111000001011", 
    72 => "00111111000000011101010110010001", 
    73 => "00111110111100100101100001110001", 
    74 => "00111110110000010111010111110011", 
    75 => "10111110011000001010100001001100", 
    76 => "00111111000101001001000011100110", 
    77 => "10111101110011111001011011100001", 
    78 => "00111101100100010100111000111100", 
    79 => "00111110111011101100011001111010", 
    80 => "00111011100001011011100111101001", 
    81 => "00111111000110001011101000110000", 
    82 => "10111111000000110010111110011000", 
    83 => "00111111000010001011001110110011", 
    84 => "10111101110000101101111000000001", 
    85 => "00111110110001001000011011001111", 
    86 => "00111110100111110110010000000110", 
    87 => "00111101111010111011000110101111", 
    88 => "00111110110100011110101000010100", 
    89 => "00111111000100001001001101010011", 
    90 => "00111111001011010110011000111000", 
    91 => "10111101100010001101000110010110", 
    92 => "10111110010011000101100101110101", 
    93 => "00111110110111101100111001010111", 
    94 => "00111111000001000110011100000110", 
    95 => "00111110101100011110101001111001", 
    96 => "00111110110001100011010010011000", 
    97 => "00111110100010000010011000000011", 
    98 => "10111110100001111010100111100011", 
    99 => "00111110111001000000111101000101", 
    100 => "00111110100011011010001001110011", 
    101 => "00111111000011101100111010001001", 
    102 => "00111101100110101111001110100001", 
    103 => "00111110110111011011110010001000", 
    104 => "00111110100101111001011000111010", 
    105 => "00111111000000100001000010011101", 
    106 => "00111110101101001110110010000101", 
    107 => "00111111011001010100100011111110", 
    108 => "10111110000110111011011010101010", 
    109 => "00111110100100011000001100001110", 
    110 => "00111111001001110101100011100010", 
    111 => "00111101100111010001110000111011", 
    112 => "00111110001101111010011101000100", 
    113 => "10111101100110001010110110101100", 
    114 => "00111111000000000100001000110001", 
    115 => "00111100001110100100100100111101", 
    116 => "10111110011010011001001110010010", 
    117 => "00111101100110111101001110000000", 
    118 => "00111110110101001011110101110111", 
    119 => "00111110010001111100100001001011", 
    120 => "10111101111001011001001110100011", 
    121 => "00111110011000011110101101000010", 
    122 => "10111110100010011000100100010110", 
    123 => "00111110100011011100100010111000", 
    124 => "10111101101111101111100001001000", 
    125 => "00111110010011111111001101101011", 
    126 => "10111101000001110001100100101111", 
    127 => "00111100000100011011001111110010", 
    128 => "00111110001101000001000111000011", 
    129 => "00111110000100111011001000010100", 
    130 => "00111111000001001001001111011001", 
    131 => "00111111001111000000110001100011", 
    132 => "00111111000111000100001010010110", 
    133 => "00111110111100010100110110110110", 
    134 => "10111111001100011010000011001111", 
    135 => "10111110001100110011110011100110", 
    136 => "00111110110000001101010111101001", 
    137 => "00111101100011001111010100101100", 
    138 => "00111111000110000110110011011011", 
    139 => "00111100100001100011111000001000", 
    140 => "00111110001111110000011100111010", 
    141 => "10111101111101100111000000011001", 
    142 => "00111101010000011100011100010101", 
    143 => "00111110011110100100000010010110", 
    144 => "00111110111011011000101001110110", 
    145 => "00111101100001001001011001101000", 
    146 => "10111110100000110110000001001010", 
    147 => "10111110000101111101001101001110", 
    148 => "00111110111110110101111001010011", 
    149 => "00111101111111000010100001110000", 
    150 => "00111111001001011001000111111111", 
    151 => "00111110111101001100000011011111", 
    152 => "00111110110011111011000000101101", 
    153 => "10111100011100111110000000110111", 
    154 => "00111101100010010011110110010110", 
    155 => "00111110101011101000110101110110", 
    156 => "00111110100101001010100000111011", 
    157 => "00111111001100101110100011000000", 
    158 => "00111110000101111110100110010110", 
    159 => "00111110100100010001110011010010", 
    160 => "10111101101100000111110110010001", 
    161 => "10111110001111111011111000110100", 
    162 => "00111110100011100000010001111101", 
    163 => "00111111010000000101110101000010", 
    164 => "00111110100011010011001101001100", 
    165 => "10111101110110010011000101000100", 
    166 => "00111110111001011111000100010111", 
    167 => "00111111001011010001011101000000", 
    168 => "00111101100100101111011111110101", 
    169 => "00111111010001000101110100010000", 
    170 => "00111110011110110100001001000110", 
    171 => "00111110110011000011100110111101", 
    172 => "00111101010001001001101110100110", 
    173 => "10111101100100111010011110011000", 
    174 => "00111110011001010000100101111101", 
    175 => "10111101011100100001101100111011", 
    176 => "00111101110011101101101010101001", 
    177 => "10111100110111001011100110101010", 
    178 => "00111100101011111100110011100010", 
    179 => "00111101111111100111111110110010", 
    180 => "10111100110011110110011110110010", 
    181 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_cSB is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_cSB is
    component predict_ensemble_cSB_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_cSB_rom_U :  component predict_ensemble_cSB_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


