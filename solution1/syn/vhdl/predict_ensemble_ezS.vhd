-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_ezS_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_ezS_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001110110100110000111100", 
    1 => "00111000101110101010010110000011", 
    2 => "00111110100111111000011000111100", 
    3 => "00111110000010101110101100111110", 
    4 => "00111111011100010101000010101001", 
    5 => "10111001000010000101000010011100", 
    6 => "00111110100110110101011101100000", 
    7 => "00111111011101110000001101101101", 
    8 => "00111000100011101001101100111001", 
    9 => "00111110001011010101011011110011", 
    10 => "10111000101010011101111010001011", 
    11 => "00111101010111100000111001110011", 
    12 => "00111110111101110111011100101001", 
    13 => "00110111100101101111111010110101", 
    14 => "00111111010001101110110000011000", 
    15 => "00110111100111110110001000110000", 
    16 => "00111101011110101001000110010111", 
    17 => "00111110111010000010010010110011", 
    18 => "10110111001001111100010110101100", 
    19 => "00111110000100011100001010100000", 
    20 => "10110111000101101111111010110101", 
    21 => "10110111100101101111111010110101", 
    22 => "00111111011010000010011111111010", 
    23 => "00110111110100011011011100010111", 
    24 => "00111000000111110110001000110000", 
    25 => "00111101111100010000010011010101", 
    26 => "00111110111110111001001000011001", 
    27 => "00111110000000001001110000111101", 
    28 => "10110111011010101110000110001011", 
    29 => "00111101101111001010100101101001", 
    30 => "00110110110010010101001110011100", 
    31 => "00111110100001100000010001011100", 
    32 => "00111111010100101110100011000000", 
    33 => "10110111010110100001101010010011", 
    34 => "00111101001010101101100100100111", 
    35 => "00110110010010010101001110011100", 
    36 => "00000000000000000000000000000000", 
    37 => "10110110000001100011011110111101", 
    38 => "10110110110010010101001110011100", 
    39 => "10110101100001100011011110111101", 
    40 => "00111101100000001000011111001010", 
    41 => "00110111011110111010100010000010", 
    42 => "00111100001110101000100000100111", 
    43 => "00000000000000000000000000000000", 
    44 => "00110110100001100011011110111101", 
    45 => "10110111100101101111111010110101", 
    46 => "00111100011110101010110011011010", 
    47 => "00110111100001100011011110111101", 
    48 => "00111101111001000101000000100111", 
    49 => "00111110111111111101100111111101", 
    50 => "00111101111101010001010100000101", 
    51 => "00111111001010011010100101000011", 
    52 => "00110110110010010101001110011100", 
    53 => "00110111010110100001101010010011", 
    54 => "00111110000000101111011110110001", 
    55 => "00111111000110101100000100101011", 
    56 => "00110110101001111100010110101100", 
    57 => "10110110110010010101001110011100", 
    58 => "00111111001010101111000101000101", 
    59 => "10110110111010101110000110001011", 
    60 => "10110111111110111010100010000010", 
    61 => "00111111011000010011001101101110", 
    62 => "00111111010111101001011000011100", 
    63 => "00111111000111011110000010000011", 
    64 => "00110111000001100011011110111101", 
    65 => "10110111010110100001101010010011", 
    66 => "00111111011011011101101011100000", 
    67 => "00111111011101000001100100111011", 
    68 => "00110110110010010101001110011100", 
    69 => "10000000000000000000000000000000", 
    70 => "10110101100001100011011110111101", 
    71 => "00111110001110010011010001101010", 
    72 => "10110110101001111100010110101100", 
    73 => "00111110000111000011010011000010", 
    74 => "00111110001111110111010111011010", 
    75 => "00110101100001100011011110111101", 
    76 => "00110110101001111100010110101100", 
    77 => "10110110000001100011011110111101", 
    78 => "00111110101010100100000111100101", 
    79 => "00111110011101110001101000111011", 
    80 => "00111110100011100001010010111110", 
    81 => "00111110110000000110111001111110", 
    82 => "00111110111111000110100010001000", 
    83 => "00111110100000100000100001011011", 
    84 => "00111111011100111110100010011011", 
    85 => "00111110100110010110101010101101", 
    86 => "10110110000001100011011110111101", 
    87 => "00111110100110111000011000001010", 
    88 => "00110110010010010101001110011100", 
    89 => "00111111010001110100010111010000", 
    90 => "10110110100001100011011110111101", 
    91 => "00111111011001000010101011101101", 
    92 => "00110110000001100011011110111101", 
    93 => "10110101100001100011011110111101", 
    94 => "00110101100001100011011110111101", 
    95 => "00111111001010010000001011001101", 
    96 => "00110110010010010101001110011100", 
    97 => "10110101100001100011011110111101", 
    98 => "00000000000000000000000000000000", 
    99 => "00111110011001010001111010111000", 
    100 => "10110110010010010101001110011100", 
    101 => "00111110010001110001111010110000", 
    102 to 103=> "00110101100001100011011110111101", 
    104 => "00111111001101010111111010101010", 
    105 => "00110101100001100011011110111101", 
    106 => "10110101100001100011011110111101", 
    107 => "00111111011011000100110111011011", 
    108 => "00111111011011000010010111100001", 
    109 => "00111110100110010011011110110000", 
    110 => "00110110000001100011011110111101", 
    111 => "00111111001000000000011101010111", 
    112 => "10110110000001100011011110111101", 
    113 => "10110101100001100011011110111101", 
    114 => "00111110000010110000010111111011", 
    115 => "00111111011001010100100001100111", 
    116 => "00111111001010001100000010011100", 
    117 => "10110101100001100011011110111101", 
    118 => "00111110001011000101110100100000", 
    119 => "00111111001111111010011100110011", 
    120 => "00110101100001100011011110111101", 
    121 => "10110110000001100011011110111101", 
    122 => "10000000000000000000000000000000", 
    123 => "00111110000101111111010000010011", 
    124 => "00111111010101111100011110110100", 
    125 => "00000000000000000000000000000000", 
    126 => "10110101100001100011011110111101", 
    127 => "00000000000000000000000000000000", 
    128 => "00110101100001100011011110111101", 
    129 => "00111111011001100111111101001110", 
    130 => "10110101100001100011011110111101", 
    131 => "00111110010000111010110111100010", 
    132 => "10110101100001100011011110111101", 
    133 => "00000000000000000000000000000000", 
    134 => "00111111001001010110011101110111", 
    135 => "00111110101011101110010010011111", 
    136 => "00111111000000000110001100010111", 
    137 => "00110101100001100011011110111101", 
    138 => "00111110101101010110100000011111", 
    139 => "00111110111011011111110111110000", 
    140 => "00111110011111010100000100110001", 
    141 => "00000000000000000000000000000000", 
    142 => "00111110111011011110001010101100", 
    143 => "10110101100001100011011110111101", 
    144 => "10000000000000000000000000000000", 
    145 => "00000000000000000000000000000000", 
    146 => "00111111001101100011111111101110", 
    147 => "00111111001001011010110011011110", 
    148 => "00111111010100101110110111101110", 
    149 => "00111111000111001110001110111101", 
    150 => "10000000000000000000000000000000", 
    151 to 152=> "00000000000000000000000000000000", 
    153 => "00111110111010001010111011011010", 
    154 => "00000000000000000000000000000000", 
    155 => "00111111000000001110110001010011", 
    156 => "00000000000000000000000000000000", 
    157 => "00111111001011000010110011110101", 
    158 => "00000000000000000000000000000000", 
    159 to 161=> "10000000000000000000000000000000", 
    162 => "00111110100101001010001010111010", 
    163 => "10000000000000000000000000000000", 
    164 => "10110101100001100011011110111101", 
    165 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_ezS is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_ezS is
    component predict_ensemble_ezS_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_ezS_rom_U :  component predict_ensemble_ezS_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


