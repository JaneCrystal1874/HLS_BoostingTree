-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_b9t_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_b9t_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111101011001000000111010", 
    1 => "10111010100101101001101000001011", 
    2 => "00111101000011100110110100010110", 
    3 => "00111010101111101101011101000001", 
    4 => "00111101110100000010000111010001", 
    5 => "10111010100101100001001111010011", 
    6 => "00111111011101110111111110111111", 
    7 => "00111101011000111001110101011110", 
    8 => "00111010000001011011000110000101", 
    9 => "00111111011100000111010010010111", 
    10 => "00111111011000001101001010100010", 
    11 => "00111001100110010001011110010100", 
    12 => "10111010110000111101001001010010", 
    13 => "00111101011100101001100000000011", 
    14 => "00111001101001110011111101110101", 
    15 => "00111001101000101000011101111111", 
    16 => "00111101101000111110111110101110", 
    17 => "00111110111001011010101110011111", 
    18 => "00111101110000111101011100001010", 
    19 => "10111001000000100000010111111111", 
    20 => "10111010000101010010100011110010", 
    21 => "00111001101000110000110110110111", 
    22 => "00111111011101100101011000010101", 
    23 => "00111111011011100101000000001101", 
    24 => "10111001100100010011101001010000", 
    25 => "00111110100100110100001101110100", 
    26 => "00111001111011111001100110000000", 
    27 => "00111110101011100101100110110000", 
    28 => "00111101100000000000000000000000", 
    29 => "10111010001001001010000001011110", 
    30 => "00111111011010001001110001101111", 
    31 => "00111010001111101101011101000001", 
    32 => "00111110000101101001011010100010", 
    33 => "00111101100111101110011110000010", 
    34 => "00111001100111101101101111111001", 
    35 => "10111001010000011111110010001111", 
    36 => "00111111011001011101000101110000", 
    37 => "10111001001100100100001000000111", 
    38 => "00111101101100111011011101010010", 
    39 => "00111110001010001011001111110110", 
    40 => "00111001010111010011111111100010", 
    41 => "00111000011101110111011011000101", 
    42 => "00111110111011011000101001110110", 
    43 => "00111001001010011101111010001011", 
    44 => "00111110010100001100100001000111", 
    45 => "00111111010110101111000111111110", 
    46 => "10111000011001101010111111001101", 
    47 => "00111110010101000001100000001101", 
    48 => "00111111010101011101000101110000", 
    49 => "00111111010010010100100001100111", 
    50 => "10111000000100101100110011110111", 
    51 => "00111110000001110110110011001110", 
    52 => "10111001110001010010000111011110", 
    53 => "00111101110100110000010110010110", 
    54 => "00111001110111101101001010001001", 
    55 => "00111110010110010011011010000010", 
    56 => "00111111010100101110110111101110", 
    57 => "10111000100001000001111011011110", 
    58 => "00111110111100011011111110111110", 
    59 => "00111001000011001000001001011010", 
    60 => "00111111011001001101000101000010", 
    61 => "10110111110100011011011100010111", 
    62 => "00111110111011011001000010011111", 
    63 => "00111000100001100011011110111101", 
    64 => "00110111100101101111111010110101", 
    65 => "10111000000011101001101100111001", 
    66 => "00111111010011010001011101000000", 
    67 => "00111101111010011001111110100001", 
    68 => "10111001000000110001001001101111", 
    69 => "00110111011010101110000110001011", 
    70 => "00110110101001111100010110101100", 
    71 => "00111001000011011000111011001001", 
    72 => "00111000000000100000010111111111", 
    73 => "10111000101101100111001111000101", 
    74 => "00111111010100001001000010000010", 
    75 => "00111111001111111011000111110010", 
    76 => "10111000110010110110110001111010", 
    77 => "00111110100001001110101110111100", 
    78 => "00111111010010001001100011110110", 
    79 => "00111110001100000101011010000010", 
    80 => "00111110100010000010011000000011", 
    81 => "00111000110111000011001101110010", 
    82 => "00110111000101101111111010110101", 
    83 => "10111000100101101111111010110101", 
    84 => "00111110011000100011100010010111", 
    85 => "00111110111101100101101001010111", 
    86 => "00111110011100101110000110101100", 
    87 => "00110111101100000010100100101000", 
    88 => "00111110011100100011110111010101", 
    89 => "00111110110010011101001010111111", 
    90 => "00111000110101011110100011010101", 
    91 => "00111110111011000011001100101111", 
    92 => "00111110110010001110001000011001", 
    93 => "10111000101010011101111010001011", 
    94 => "00111110111111011001100101000110", 
    95 => "00111110100100000100011001100011", 
    96 => "00111000011011110001001101001001", 
    97 => "00110111110010010101001110011100", 
    98 => "00111000100001000001111011011110", 
    99 => "00111110000100101101111101010000", 
    100 => "00111110000000001101010010011001", 
    101 => "00111110101000001101100000100011", 
    102 => "10111000011111111101101001000000", 
    103 => "00110111100111110110001000110000", 
    104 => "10111000011001101010111111001101", 
    105 => "10111000110000110000100011111111", 
    106 => "00111110111001100110101110100101", 
    107 => "00111000110101011110100011010101", 
    108 => "00111111001111010111111011111110", 
    109 => "00110111111100110100010100000111", 
    110 => "00111110100111111111111000001001", 
    111 => "10111000001110001000110010100100", 
    112 => "00110111100011101001101100111001", 
    113 => "00111111011000011110000001010000", 
    114 => "10111000011100110100010100000111", 
    115 => "00111110101111000100001111110110", 
    116 => "10111000011111111101101001000000", 
    117 => "00111101111100010000010011010101", 
    118 => "00111110001100010011111011000100", 
    119 => "10110111110110100001101010010011", 
    120 => "00111110010111011011000010011010", 
    121 => "10111000010110100001101010010011", 
    122 => "00111110101100010111010001100000", 
    123 => "00111000101101100111001111000101", 
    124 => "00111111000010000110110101110010", 
    125 => "10110110111010101110000110001011", 
    126 => "00110111001001111100010110101100", 
    127 => "00111110101011010000111011011100", 
    128 => "00111110110010110110100010001100", 
    129 => "00111111001000110101001100001101", 
    130 => "00111000000011101001101100111001", 
    131 => "00111000100100101100110011110111", 
    132 => "00111111000000001100110001010111", 
    133 => "00111111000110010111100010110011", 
    134 => "00111110000010111111110010101000", 
    135 => "00110110101001111100010110101100", 
    136 => "10110111101100000010100100101000", 
    137 => "00111110110111100011110101100000", 
    138 => "00111111000110010100001000001011", 
    139 => "10111000100001000001111011011110", 
    140 => "10110111001110001000110010100100", 
    141 => "10111000000110110011000001110011", 
    142 => "00111111001101000100100010001100", 
    143 => "00111110111011011000101001110110", 
    144 => "10111000010101011110100011010101", 
    145 => "00111000011011110001001101001001", 
    146 => "00110110010010010101001110011100", 
    147 => "00111111010101101110101111000100", 
    148 => "00111111001110010110111011110000", 
    149 => "00111000010011011000010101011001", 
    150 => "10110111010110100001101010010011", 
    151 => "00111111011001101011110101101111", 
    152 => "00111000000100101100110011110111", 
    153 => "10110111100111110110001000110000", 
    154 => "10111000010010010101001110011100", 
    155 => "00111111010000011011010110010101", 
    156 => "10111000000111110110001000110000", 
    157 => "00111110001110101010110100011101", 
    158 => "00111111001010111110010100100001", 
    159 => "00110111110100011011011100010111", 
    160 => "00111111000100001011110111011100", 
    161 => "00111000001100000010100100101000", 
    162 => "00111111001101011100110000010000", 
    163 => "00111110110111011011010110110111", 
    164 => "10110111111100110100010100000111", 
    165 => "10110111000101101111111010110101", 
    166 => "00111111010010001011100000111001", 
    167 => "00111110111110110101011010111000", 
    168 => "00111110111100100100001100110101", 
    169 => "00110111111100110100010100000111", 
    170 => "00110110110010010101001110011100", 
    171 => "10110111110110100001101010010011", 
    172 => "10000000000000000000000000000000", 
    173 => "00110111110000001111000000100000", 
    174 => "00111110111100110101000000001001", 
    175 => "10110111101110001000110010100100", 
    176 => "00111111001001011001011001010011", 
    177 => "00111110101000010000000110110000", 
    178 => "00110111011110111010100010000010", 
    179 => "00110111010010010101001110011100", 
    180 => "00111111000101001110001101011000", 
    181 => "00111111000000011111000101101011", 
    182 => "00111111000101110011011001011001", 
    183 => "10110110100001100011011110111101", 
    184 => "00110111100011101001101100111001", 
    185 => "10111000000011101001101100111001", 
    186 => "10110110110010010101001110011100", 
    187 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_b9t is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_b9t is
    component predict_ensemble_b9t_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_b9t_rom_U :  component predict_ensemble_b9t_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


