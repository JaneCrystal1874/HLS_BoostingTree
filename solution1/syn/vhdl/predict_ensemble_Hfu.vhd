-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_Hfu_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_Hfu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111000011111111011000101011", 
    1 => "00111111011100011010101101111110", 
    2 => "00111101110110000100011001100011", 
    3 => "00111100111101011001000000111010", 
    4 => "00111110111011001010001001110111", 
    5 => "00111101011111000111001011100010", 
    6 => "00111110000011010111110010110011", 
    7 => "10111100100010100110000100010111", 
    8 => "00111101000010110010011101000110", 
    9 => "00111101001010001001011101100011", 
    10 => "00111111000110001101001001011111", 
    11 => "10111011010100110000011010100011", 
    12 => "10111101001011011111001111111001", 
    13 => "00111110101010010000001101100100", 
    14 => "00111110111111011111010001011110", 
    15 => "00111100011110010100100001010110", 
    16 => "00111110010000101101001111001000", 
    17 => "10111100101100011000100101111010", 
    18 => "00111111001011101010110100101110", 
    19 => "10111100100000101111011100101011", 
    20 => "00111110110101001000110010110101", 
    21 => "00111110111010101111111111110011", 
    22 => "00111111001100101011110101111111", 
    23 => "00111110011000110100101000000010", 
    24 => "00111111010110001011101000110000", 
    25 => "00111100110000000100010000101000", 
    26 => "00111101111010011100100000000000", 
    27 => "00111011110000001010110100000100", 
    28 => "10111100000110100001101110100000", 
    29 => "00111110111100010010100110001001", 
    30 => "00111110000010001100101100001000", 
    31 => "00111110111111100011001111110000", 
    32 => "00111111010010100111111110110010", 
    33 => "10111100101100000000001101101000", 
    34 => "00111111000001101110100000101001", 
    35 => "00111101110101011101001111011101", 
    36 => "00111111011000010111010001100000", 
    37 => "10111011111111011110101101010011", 
    38 => "00111111000111000011000010110001", 
    39 => "00111100010000100101100011010110", 
    40 => "00111010101011111110011000001100", 
    41 => "10111011010100110011100011111000", 
    42 => "00111011001100111010001001011001", 
    43 => "00111111010111001011111100011010", 
    44 => "00111110111001010011100001101001", 
    45 => "00111111000111000101011110001110", 
    46 => "10111011010110000001001001111011", 
    47 => "00111110100111100110110101011001", 
    48 => "00111011111110011101001010111111", 
    49 => "00111110110100001110111100010011", 
    50 => "00111111010111110100001001010111", 
    51 => "10111100100100111011000110001110", 
    52 => "00111111011010001011101000110000", 
    53 => "00111011100111001100101101111101", 
    54 => "00111000000010100110100101111011", 
    55 => "10111011001010100011001001101110", 
    56 => "00111011100001011011100111101001", 
    57 => "10111100011010011000000100111000", 
    58 => "00111111000110001001011010001001", 
    59 => "00111111001100001011011011001000", 
    60 => "00111100001011001101100111101000", 
    61 => "00111110100010001000111111001001", 
    62 => "10111100001011100101111111111010", 
    63 => "00111101000000001001001111011001", 
    64 => "00111010010100000010010001110000", 
    65 => "00111111011110000111011001111101", 
    66 => "00111100001110010100100101100010", 
    67 => "00111100000000000010110000001010", 
    68 => "10111010001011101101100110011101", 
    69 => "10111011111100111010100110110000", 
    70 => "00111010010011101001000111001001", 
    71 => "10111011101001100100110000110000", 
    72 => "00111011000010110101010001011100", 
    73 => "00111010101001100101010010010011", 
    74 => "00111110001011101011111000010110", 
    75 => "00111101111111010000101101110100", 
    76 => "00111100000111111010010101001100", 
    77 => "10111100000110001000000010010101", 
    78 => "10111010101011000101110000010100", 
    79 => "10111011111100010100010101010010", 
    80 => "00111110000001001110011111101111", 
    81 => "00111100100011011111000101011010", 
    82 => "00111110101111110110010010001100", 
    83 => "00111110010001000111001100000100", 
    84 => "00111110110011001000001000111000", 
    85 => "00111110001011100110011100001110", 
    86 => "00111110100110110100100110011101", 
    87 => "10111100001001110100011111011000", 
    88 => "00111110011000111101101010110110", 
    89 => "00111010100100100110100001001101", 
    90 => "00111100000110101000010001111011", 
    91 => "00111110111101111101000010101111", 
    92 => "00111111010101101000000011010000", 
    93 => "00111011110110011111000010100010", 
    94 => "00111111000000101010110000010001", 
    95 => "00111010001100110100111001110111", 
    96 => "10111011101110011100001100000101", 
    97 => "00111111010110100111110101100111", 
    98 => "10111010101111110001101001011101", 
    99 => "00111111000111100100110111000010", 
    100 => "00111111001101100101000010110101", 
    101 => "00111110010010111010001100000001", 
    102 => "10110111010110100001101010010011", 
    103 => "00111111000000001001100010110011", 
    104 => "00111011100110101101110010010000", 
    105 => "00111111010110110111100110110111", 
    106 => "00111110110110111011101001110111", 
    107 => "00111100010100101000010010011101", 
    108 => "00111111000110100111111100111101", 
    109 => "00111110011111100001001000011111", 
    110 => "10111100000001100110101000010010", 
    111 => "00111110111000001110100100101101", 
    112 => "00111110110000101011101110101010", 
    113 => "10111011101011001010111111110111", 
    114 => "00111110001111001111001110011001", 
    115 => "00111011110100101011101100100011", 
    116 => "00111001110101101111010101000101", 
    117 => "00111110011111000111110000001111", 
    118 => "00111110100010101111111101001100", 
    119 => "00111100000001001110110001100011", 
    120 => "00111110101100010111010001100000", 
    121 => "00111011000100101111111101001100", 
    122 => "10111011110010110111010011011110", 
    123 => "00111110001100010011111011000100", 
    124 => "00111111001101100010100001000110", 
    125 => "10111011010101011000010000101011", 
    126 => "00111111000010111011101001100111", 
    127 => "00111111000001001101101110001100", 
    128 => "00111110111010010110011110001000", 
    129 => "10111011000100100010010100110001", 
    130 => "00111111001010000000001010001110", 
    131 => "00111010010101000101011000101110", 
    132 => "10111011100111111100111100111110", 
    133 => "00111111001111011010101111010010", 
    134 => "00111111000001000011110111101110", 
    135 => "00111111000100101110100011000000", 
    136 => "10111001100101111000010011101100", 
    137 => "10111100010010101001111011110101", 
    138 => "10111011000101001011001110000001", 
    139 => "00111110111001100001001100001010", 
    140 => "00111110111011100010000111111011", 
    141 => "00111110011110011001001111010101", 
    142 => "00111011111010001110000111010110", 
    143 => "00111001100010001101011011010100", 
    144 => "00111011101001100000100100010100", 
    145 => "10111011001000101111110011110000", 
    146 => "00111001100111111110100001101000", 
    147 => "00111011110011010000111111101001", 
    148 => "00111110100011010110001110001000", 
    149 => "00111110111000111011011110010101", 
    150 => "00111110111100001001001101110101", 
    151 => "10111100011001000001110101001011", 
    152 => "00111110110111101101001101110100", 
    153 => "00111111001011010001011101000000", 
    154 => "00111110001010001011110001011010", 
    155 => "00111011101011110101111111010100", 
    156 => "00111000011111111101101001000000", 
    157 => "00111111000011001111011100010010", 
    158 => "00111011111100010101111001111101", 
    159 => "10111011101001100100110000110000", 
    160 => "00111010010010111111001010110010", 
    161 => "00111110110001100100011110011001", 
    162 => "00111111000000000000000000000000", 
    163 => "00111100000001010100000001000110", 
    164 => "00111111001100000000000000000000", 
    165 => "00111011100010011111010000001010", 
    166 => "10111011000000000100000100000011", 
    167 => "00111111001100101110100011000000", 
    168 => "00111011100110101001100101110100", 
    169 => "00111110101001101001110101010010", 
    170 => "10111011111111011100000101100001", 
    171 => "00111111001101111110101101111101", 
    172 => "10111011101000000101010101110101", 
    173 => "10111010000101111100100000001000", 
    174 => "00111011101101000011100101011000", 
    175 => "10111011010111111000101100010101", 
    176 => "00111110100011101001011011000100", 
    177 => "00111001011100100011100010010111", 
    178 => "10111011001111111100001000100010", 
    179 => "00111111010001100010111100000110", 
    180 => "00111111011000111100101110100011", 
    181 => "00111001100001111100101001100100", 
    182 => "00111011100101010011100110111001", 
    183 => "00111110110011011111000011010100", 
    184 => "00111111001111100101011010011011", 
    185 => "00111110100101001010101010111001", 
    186 => "10111011110101111110100010001010", 
    187 => "00111011100010001000001011110001", 
    188 => "10111011001010011011110011111101", 
    189 => "00111011111001000101001111010010", 
    190 => "00111011000000011101001110101010", 
    191 => "00111010110100110000011010100011", 
    192 => "10111011000111110000111001001110", 
    193 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_Hfu is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_Hfu is
    component predict_ensemble_Hfu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_Hfu_rom_U :  component predict_ensemble_Hfu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


