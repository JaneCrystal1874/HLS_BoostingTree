-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_d0M_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_d0M_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001011000010100010110011", 
    1 => "10111000110010010101001110011100", 
    2 => "00111101100000010001000000011011", 
    3 => "00111111000000110001000111000111", 
    4 => "00111101100100001111111000000100", 
    5 => "00111111011100100010011111010000", 
    6 => "00111001001101111000000000110100", 
    7 => "10111000011101110111011011000101", 
    8 => "00111111011110000111011001111101", 
    9 => "00111110101101111001100010110111", 
    10 => "10111000100011101001101100111001", 
    11 => "00111111011100001100111011110110", 
    12 => "00111000011010101110000110001011", 
    13 => "00111000010011011000010101011001", 
    14 => "10110110110010010101001110011100", 
    15 => "00111101010111000100010101000110", 
    16 => "10111000111000100111111000001111", 
    17 => "10110111111000100111111000001111", 
    18 => "00111101100000101101000111110010", 
    19 => "00110111111100110100010100000111", 
    20 => "00111101110101001001001110000110", 
    21 => "00111110010100101111010000000110", 
    22 => "00111101110111011101011011100000", 
    23 => "10111000001000111001001111101110", 
    24 => "00110110000001100011011110111101", 
    25 => "00111000010010010101001110011100", 
    26 => "00111110001110101111101101111111", 
    27 => "00111110001000010111010100001000", 
    28 => "00111110010010011010010100100010", 
    29 => "00111110100101010100000111011001", 
    30 => "10111000001100000010100100101000", 
    31 => "00111000110100111100111111110110", 
    32 => "00111110000001001010010101011001", 
    33 => "00111111011010001011101000110000", 
    34 => "00110110110010010101001110011100", 
    35 => "10110111100011101001101100111001", 
    36 => "00111110011000000111101110111011", 
    37 => "00111101101111001010110110011011", 
    38 => "10110111001110001000110010100100", 
    39 => "00110111011110111010100010000010", 
    40 => "00111111011001111010010111110100", 
    41 => "00110110010010010101001110011100", 
    42 => "10110110101001111100010110101100", 
    43 => "00111101101000111110111110101110", 
    44 => "00110111100101101111111010110101", 
    45 => "00110111100111110110001000110000", 
    46 => "00111110010110010111001001000111", 
    47 => "10110111010010010101001110011100", 
    48 => "00111111011011101111101110100000", 
    49 => "00111101111110001100010010111101", 
    50 => "00110111001001111100010110101100", 
    51 => "00111110111110101101000111110010", 
    52 => "00111110000000010010011110110011", 
    53 => "10000000000000000000000000000000", 
    54 => "10110111100101101111111010110101", 
    55 => "00110111000101101111111010110101", 
    56 => "00111110001111010011101011100111", 
    57 => "10110111001001111100010110101100", 
    58 => "00111111011110101010010111010111", 
    59 => "00111111010101011111001000000010", 
    60 => "10110111000101101111111010110101", 
    61 => "00111110101011100001010001011001", 
    62 => "00111111001101001111110010110101", 
    63 => "00111111000000000101000010011100", 
    64 => "00111110101011001001101111101001", 
    65 => "10110110000001100011011110111101", 
    66 => "00110111100001100011011110111101", 
    67 => "00111110110001011010000110101001", 
    68 => "00111111000110101010101011010010", 
    69 => "00111110101010001000110010000010", 
    70 => "00111110100001111001010010000101", 
    71 => "10110111010010010101001110011100", 
    72 => "10110110010010010101001110011100", 
    73 => "00110110010010010101001110011100", 
    74 => "10110101100001100011011110111101", 
    75 => "00111110100001101111011000110000", 
    76 => "00110111001001111100010110101100", 
    77 => "00111110100000110111000011001110", 
    78 => "00111110110001111010011010011100", 
    79 => "00111110110111010111101011111111", 
    80 => "00111111001101000101110100010000", 
    81 => "00111110100011111010011110101000", 
    82 => "10110111100001100011011110111101", 
    83 => "00111111011001001110110010100111", 
    84 => "00111101110001101110010101000111", 
    85 => "00111110110011000000010100101101", 
    86 => "10110110000001100011011110111101", 
    87 => "00111111001001110100010111010000", 
    88 => "00111110100010010100111000011010", 
    89 => "00110101100001100011011110111101", 
    90 => "10110110100001100011011110111101", 
    91 => "00111110101100010011011100001001", 
    92 => "00110110101001111100010110101100", 
    93 => "10110110100001100011011110111101", 
    94 => "00111101111100101101001010111011", 
    95 => "10110101100001100011011110111101", 
    96 => "00110101100001100011011110111101", 
    97 => "00111110100100111101111101001100", 
    98 => "00110111000101101111111010110101", 
    99 => "10110110000001100011011110111101", 
    100 => "00110110000001100011011110111101", 
    101 => "10110110111010101110000110001011", 
    102 => "00111110101101100010100110110111", 
    103 => "00111111001001011100010100101110", 
    104 => "00111110111110000011101001010100", 
    105 => "00110110100001100011011110111101", 
    106 => "10000000000000000000000000000000", 
    107 => "00111110111101011011101001101111", 
    108 => "10000000000000000000000000000000", 
    109 => "00110110111010101110000110001011", 
    110 => "10110110000001100011011110111101", 
    111 => "00111111010010001001000100111010", 
    112 => "00111110100011110111111111110001", 
    113 => "10110110101001111100010110101100", 
    114 => "10110110010010010101001110011100", 
    115 => "00111111010000100100100010010101", 
    116 => "10110110000001100011011110111101", 
    117 => "10110110010010010101001110011100", 
    118 => "00111111010001110100010111010000", 
    119 => "00111110110111110010011000101001", 
    120 => "00110110101001111100010110101100", 
    121 => "00111110110001110010110100111100", 
    122 => "10110110000001100011011110111101", 
    123 => "00110110110010010101001110011100", 
    124 => "00111110111010000100110110011000", 
    125 => "00111110110110011110111111111010", 
    126 => "00111110110110001011000110111100", 
    127 => "00111110110000101110100011000000", 
    128 => "00110110000001100011011110111101", 
    129 => "00000000000000000000000000000000", 
    130 => "00110110010010010101001110011100", 
    131 => "10110110000001100011011110111101", 
    132 => "00111110100110100010111001111111", 
    133 => "10000000000000000000000000000000", 
    134 => "00110101100001100011011110111101", 
    135 => "00110110000001100011011110111101", 
    136 => "00111111000100000100101111110101", 
    137 => "00111111000010111111001011010100", 
    138 => "00111111000001110100010111010000", 
    139 => "00111110110010011000111111100111", 
    140 => "00110110000001100011011110111101", 
    141 => "00111110011011110101110111111111", 
    142 => "00111110110100110010010100001011", 
    143 => "00110101100001100011011110111101", 
    144 => "00111110100110110100110010100001", 
    145 => "00111110110001011101000110000001", 
    146 => "00111110101001110001001110101101", 
    147 => "00110110000001100011011110111101", 
    148 => "00111111000111011000001111000111", 
    149 => "00111110110110111011001001010111", 
    150 => "00111110110011101010111110101011", 
    151 => "10110101100001100011011110111101", 
    152 => "10110110010010010101001110011100", 
    153 => "10000000000000000000000000000000", 
    154 => "00111110111011111111101011100011", 
    155 => "00111111000111000100101001100010", 
    156 => "00111111001101110010011000000111", 
    157 => "10000000000000000000000000000000", 
    158 => "00111110111000100101100111100010", 
    159 => "00000000000000000000000000000000", 
    160 => "10000000000000000000000000000000", 
    161 => "10110101100001100011011110111101", 
    162 => "10000000000000000000000000000000", 
    163 => "00111111001101110010001100100101", 
    164 => "10110110000001100011011110111101", 
    165 => "00111111001001110100010011110110", 
    166 => "10110101100001100011011110111101", 
    167 => "00110101100001100011011110111101", 
    168 => "00000000000000000000000000000000", 
    169 => "10110101100001100011011110111101", 
    170 => "00111111001011110100001100001111", 
    171 => "00111110111011010110000010000101", 
    172 => "00111111011010101101111001110110", 
    173 => "00111111001010111110010100100001", 
    174 to 175=> "10110101100001100011011110111101", 
    176 => "00111110111011001111010100101100", 
    177 => "00111111011001001100110000000011", 
    178 => "00110110000001100011011110111101", 
    179 => "10000000000000000000000000000000", 
    180 to 181=> "00110101100001100011011110111101", 
    182 => "00111111001000010111101101010011", 
    183 => "00110101100001100011011110111101", 
    184 => "10000000000000000000000000000000", 
    185 => "00110101100001100011011110111101", 
    186 => "10000000000000000000000000000000", 
    187 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_d0M is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_d0M is
    component predict_ensemble_d0M_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_d0M_rom_U :  component predict_ensemble_d0M_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


