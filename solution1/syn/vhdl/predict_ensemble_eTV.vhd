-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_eTV_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_eTV_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010010110010010100101101", 
    1 => "00111000001000111001001111101110", 
    2 => "00111111001110010111010111000000", 
    3 => "00111111001100000011000100010110", 
    4 => "00111110101111110101111110010001", 
    5 => "00111111011101100101011000010101", 
    6 => "00111000100011101001101100111001", 
    7 => "00111111001010111010001011110000", 
    8 => "10111000100101101111111010110101", 
    9 => "00111111011011100101000000001101", 
    10 => "10110111101110001000110010100100", 
    11 => "00111111000101011101000101110000", 
    12 => "00110111011010101110000110001011", 
    13 => "00111101011011001111110110001111", 
    14 => "00110111111000100111111000001111", 
    15 => "00111110110101110100010111100001", 
    16 => "10110111000001100011011110111101", 
    17 => "00111110110101110000101101101011", 
    18 => "00111101100000010001000000011011", 
    19 => "10110110010010010101001110011100", 
    20 => "00110110100001100011011110111101", 
    21 => "10110111101100000010100100101000", 
    22 => "10110111000101101111111010110101", 
    23 => "00110111001110001000110010100100", 
    24 => "00111100000111001010010110111110", 
    25 => "10110111001001111100010110101100", 
    26 => "00111101011000010010011000100000", 
    27 => "00110111000101101111111010110101", 
    28 => "00111111001001000001111001000111", 
    29 => "00111101100100001111111000000100", 
    30 => "10110111001110001000110010100100", 
    31 => "10110111001001111100010110101100", 
    32 => "00111111011100110010000010000110", 
    33 => "00111111010101111001011011110010", 
    34 => "00111111000111000110010001100111", 
    35 => "00111111010101100000110100000010", 
    36 => "00111110110111100001101110001111", 
    37 => "00111111000000000000111110101010", 
    38 => "00111111001000011010010011011111", 
    39 => "00111111011010100010111010010000", 
    40 => "10110111010010010101001110011100", 
    41 => "00111110110101110010110101011110", 
    42 to 43=> "00110111010110100001101010010011", 
    44 => "00110110000001100011011110111101", 
    45 => "10110110100001100011011110111101", 
    46 => "00110110101001111100010110101100", 
    47 => "00111111010110001011101000110000", 
    48 => "00110110110010010101001110011100", 
    49 => "10110110010010010101001110011100", 
    50 => "00110110000001100011011110111101", 
    51 => "00111111011100010010111100011011", 
    52 => "00111110100001111100100101011000", 
    53 => "00111100011001101111111101111110", 
    54 => "10110110101001111100010110101100", 
    55 => "00110101100001100011011110111101", 
    56 => "10110111000101101111111010110101", 
    57 => "00110110101001111100010110101100", 
    58 => "00111101100110101011010010110111", 
    59 => "10110111001001111100010110101100", 
    60 => "00111110001010010110011111001011", 
    61 => "00111110000000101111011110110001", 
    62 => "00111110001100011010000001001001", 
    63 => "00000000000000000000000000000000", 
    64 => "00110111000101101111111010110101", 
    65 => "10110110110010010101001110011100", 
    66 => "00111111000110001011101000110000", 
    67 => "00111110000000000000000010000110", 
    68 => "00111101111010101011011000000111", 
    69 => "10110110110010010101001110011100", 
    70 => "00111111001100110110110010011100", 
    71 => "00110110101001111100010110101100", 
    72 => "00111101101101101011000010010110", 
    73 => "00111111011001111001100001000010", 
    74 => "00111111010011000100001110010001", 
    75 => "00110110000001100011011110111101", 
    76 => "00111110000000001001011010111100", 
    77 => "00111111011000110100000000001100", 
    78 => "00111111011100001010100011110100", 
    79 => "10110110010010010101001110011100", 
    80 => "10000000000000000000000000000000", 
    81 => "10110110000001100011011110111101", 
    82 => "00111111010000100010110010111010", 
    83 => "00111111001100000000011110011010", 
    84 => "00110110000001100011011110111101", 
    85 => "10110110000001100011011110111101", 
    86 => "10000000000000000000000000000000", 
    87 => "00111110001000110110000000000111", 
    88 => "00110101100001100011011110111101", 
    89 => "00111110010111011000001010111010", 
    90 => "00111110101010111100000101101010", 
    91 => "10110101100001100011011110111101", 
    92 => "00111110010011000111001111101111", 
    93 => "10110110100001100011011110111101", 
    94 => "00111110100000101010111111011110", 
    95 => "00111111000100111010010100101011", 
    96 => "00110110010010010101001110011100", 
    97 => "00110110000001100011011110111101", 
    98 => "00111110010110011100110000110010", 
    99 => "10110101100001100011011110111101", 
    100 => "00111110100001010011011111100011", 
    101 => "00111111001010000010111110100101", 
    102 to 103=> "10110101100001100011011110111101", 
    104 => "00111110100000110010101111111110", 
    105 => "00110101100001100011011110111101", 
    106 => "00111110101111101000010000100111", 
    107 => "00111111000110101011001101101000", 
    108 => "10000000000000000000000000000000", 
    109 => "00110101100001100011011110111101", 
    110 => "00111110100001101101101011101100", 
    111 => "00111110101010101101111100001101", 
    112 => "00111110001101101001100001111000", 
    113 => "10000000000000000000000000000000", 
    114 => "00110101100001100011011110111101", 
    115 => "10110101100001100011011110111101", 
    116 => "00111111011011011100100010101000", 
    117 => "00111110111000001100111111100001", 
    118 => "00111110101101000100100011001111", 
    119 => "00111110001100001001110110001100", 
    120 => "00111110101001011110100111100010", 
    121 => "00111111011001110111100000000011", 
    122 => "10110101100001100011011110111101", 
    123 => "00110101100001100011011110111101", 
    124 => "00111110110101000010101111111010", 
    125 => "10110101100001100011011110111101", 
    126 to 127=> "10000000000000000000000000000000", 
    128 => "10110101100001100011011110111101", 
    129 => "00000000000000000000000000000000", 
    130 => "00111110111001101100111101000010", 
    131 => "00111110011000100011100000010001", 
    132 => "00110101100001100011011110111101", 
    133 => "10110101100001100011011110111101", 
    134 => "00000000000000000000000000000000", 
    135 => "10000000000000000000000000000000", 
    136 => "00111111001110010100000001000110", 
    137 => "00110101100001100011011110111101", 
    138 => "00111111001111101000101110100000", 
    139 => "00111111001100101000011010000011", 
    140 => "00111111010100101111011101101110", 
    141 => "00111111000001111100010110111101", 
    142 => "10000000000000000000000000000000", 
    143 => "00111110111000001001110011100101", 
    144 to 145=> "00000000000000000000000000000000", 
    146 => "10000000000000000000000000000000", 
    147 => "00111110011001111000100100011110", 
    148 => "00111110110011010001000100111000", 
    149 => "00000000000000000000000000000000", 
    150 => "00111111010101111110101111110010", 
    151 => "00110101100001100011011110111101", 
    152 => "00000000000000000000000000000000", 
    153 => "00111111000000011100111111101110", 
    154 => "00111110110011010000101110110111", 
    155 => "00111111001001111001010101110000", 
    156 => "00000000000000000000000000000000", 
    157 => "00111110101000010001010001001101", 
    158 => "00111111001010000111000011011010", 
    159 => "10110101100001100011011110111101", 
    160 => "00000000000000000000000000000000", 
    161 => "10000000000000000000000000000000", 
    162 => "00000000000000000000000000000000", 
    163 => "00111111000011011001101110110010", 
    164 => "00111110111110011010101010000010", 
    165 => "00111111001011010001011101000000", 
    166 => "10000000000000000000000000000000", 
    167 => "00111110111100010110011001011010", 
    168 to 169=> "00000000000000000000000000000000", 
    170 => "00110101100001100011011110111101", 
    171 => "00111111001010000100111010000011", 
    172 => "00111110111100111100001111100111", 
    173 => "00000000000000000000000000000000", 
    174 => "10000000000000000000000000000000", 
    175 to 176=> "00000000000000000000000000000000", 
    177 to 178=> "10000000000000000000000000000000", 
    179 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_eTV is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_eTV is
    component predict_ensemble_eTV_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_eTV_rom_U :  component predict_ensemble_eTV_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


