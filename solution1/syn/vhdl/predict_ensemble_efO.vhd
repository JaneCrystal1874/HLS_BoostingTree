-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_efO_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_efO_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111011110010011001100001001", 
    1 => "00111111011100110010000010000110", 
    2 => "00111000101001111100010110101100", 
    3 => "00111111011011110111101111100001", 
    4 => "00111111000011101100011000000100", 
    5 => "00111101010110100000000101101001", 
    6 => "00111110111110110100000010010010", 
    7 => "10111001010101001101110001100110", 
    8 => "00111111001001000101110100010000", 
    9 => "10111001010001010010000111011110", 
    10 => "00111110010110100010001111000000", 
    11 => "00111001100011111010011110101000", 
    12 => "00111111011100011010101101111110", 
    13 => "10110111101100000010100100101000", 
    14 => "00111111000100001011000001011011", 
    15 => "00111111001100111010011010101101", 
    16 => "00111111011100001100111011110110", 
    17 => "00110111011010101110000110001011", 
    18 => "10110111100011101001101100111001", 
    19 => "00111000000100101100110011110111", 
    20 => "00111110000010010101010100101110", 
    21 => "00111111001010001100110111111011", 
    22 => "10111000101010111111011101101010", 
    23 => "00111101100111011011110100110000", 
    24 => "00111000101110001000110010100100", 
    25 => "10110110110010010101001110011100", 
    26 => "00000000000000000000000000000000", 
    27 => "00111110100010101100001110101000", 
    28 => "00110111110010010101001110011100", 
    29 => "00111000000110110011000001110011", 
    30 => "00111110110000101110100011000000", 
    31 => "10111000000100101100110011110111", 
    32 => "00111110010110011100110000110010", 
    33 => "00111111011100111000001100000110", 
    34 => "00111101111010010011111100101001", 
    35 => "00111110101011000100110111001011", 
    36 => "10110111001110001000110010100100", 
    37 => "00111111011110010111001110010111", 
    38 => "10111000001100000010100100101000", 
    39 => "00111000000010100110100101111011", 
    40 => "00111101110110001001100010110011", 
    41 => "00111111001000011011011111110001", 
    42 => "00111110110010001000101100110011", 
    43 => "00111101100011111100111001110100", 
    44 => "10110111100011101001101100111001", 
    45 => "00110111011010101110000110001011", 
    46 => "00111110000001001010010101011001", 
    47 => "00110111101100000010100100101000", 
    48 => "00111110001110101000100011110000", 
    49 => "00111110010111101110110110001001", 
    50 => "00110111010110100001101010010011", 
    51 => "10110111001110001000110010100100", 
    52 => "00111101110000110000000100100001", 
    53 => "10110111000101101111111010110101", 
    54 => "00111101110010011000110101000111", 
    55 => "10110101100001100011011110111101", 
    56 => "00110110101001111100010110101100", 
    57 => "10110111010010010101001110011100", 
    58 => "10110110010010010101001110011100", 
    59 => "00110111001110001000110010100100", 
    60 => "00111110101000000001101010011100", 
    61 => "00110111000101101111111010110101", 
    62 => "00111110001101111011111110100101", 
    63 => "00111110110111010011101101001011", 
    64 => "00111110100110111100110001101100", 
    65 => "00110110110010010101001110011100", 
    66 => "00111110011101011001111010100101", 
    67 => "00111110100110001010111000010000", 
    68 => "10110101100001100011011110111101", 
    69 => "00110111010110100001101010010011", 
    70 => "00111111000100000111100011001000", 
    71 => "00111111000001011100010111010110", 
    72 => "00111110100010001111001000010111", 
    73 => "10110110111010101110000110001011", 
    74 => "10110111001001111100010110101100", 
    75 => "10110110100001100011011110111101", 
    76 => "00111111011101010111110101111100", 
    77 => "00110111001001111100010110101100", 
    78 => "10110101100001100011011110111101", 
    79 => "00111110110001110011100111110011", 
    80 => "00111110101010001101011000101100", 
    81 => "00111111010010101100110101001011", 
    82 => "00110110010010010101001110011100", 
    83 => "10110110110010010101001110011100", 
    84 => "00000000000000000000000000000000", 
    85 => "00111110100101011010000100000001", 
    86 => "00111111011001111001100001000010", 
    87 => "00111111001001101011010000100000", 
    88 => "00111111010100001111100011111001", 
    89 => "00111110100011110011000100001010", 
    90 => "00110110111010101110000110001011", 
    91 => "00111111010100100111110011010000", 
    92 => "10110110100001100011011110111101", 
    93 => "00111111001000010111001011001101", 
    94 => "00110110010010010101001110011100", 
    95 => "00000000000000000000000000000000", 
    96 => "10110110100001100011011110111101", 
    97 => "00111110100000110101111001010011", 
    98 => "10110110010010010101001110011100", 
    99 => "00111101111101100010100001000110", 
    100 => "00111110100000001110101011100010", 
    101 => "00111111011000010001000011000011", 
    102 => "00110110000001100011011110111101", 
    103 => "00110110100001100011011110111101", 
    104 => "00000000000000000000000000000000", 
    105 => "10110110010010010101001110011100", 
    106 => "00111110001000110001001010110010", 
    107 => "00000000000000000000000000000000", 
    108 => "00110110110010010101001110011100", 
    109 => "00111110111010010001101101100001", 
    110 => "00110101100001100011011110111101", 
    111 => "00110110000001100011011110111101", 
    112 => "00111110101010101101111100001101", 
    113 => "00111110111110010010111110110010", 
    114 => "00111111000000010101111000111001", 
    115 => "00111110111100011000010011000010", 
    116 => "00111110011010110101010110101100", 
    117 => "00110101100001100011011110111101", 
    118 => "10110101100001100011011110111101", 
    119 => "00111110000111010001011101000000", 
    120 => "00111111000011011000000110001100", 
    121 => "10110110100001100011011110111101", 
    122 => "00110101100001100011011110111101", 
    123 => "10110110000001100011011110111101", 
    124 => "00111111011000011110010011110111", 
    125 => "10110110000001100011011110111101", 
    126 => "10110101100001100011011110111101", 
    127 => "00110101100001100011011110111101", 
    128 => "10110101100001100011011110111101", 
    129 => "00111110100111010111101101100011", 
    130 to 131=> "00110101100001100011011110111101", 
    132 => "00111110101110100000001000110010", 
    133 => "10110101100001100011011110111101", 
    134 => "00111110111000100101111000110101", 
    135 => "00111110111001011101000110000001", 
    136 => "00111110101100000100010101010110", 
    137 => "10110110000001100011011110111101", 
    138 => "00000000000000000000000000000000", 
    139 => "00110101100001100011011110111101", 
    140 => "00111110101100010000111001100111", 
    141 => "10110101100001100011011110111101", 
    142 => "00111111001101111011101010101010", 
    143 => "00111111001001001101000111011001", 
    144 => "00111111001110110100001110000101", 
    145 => "00111111001111101000101110100000", 
    146 => "00111110111111001000010101011110", 
    147 => "10000000000000000000000000000000", 
    148 => "10110101100001100011011110111101", 
    149 => "00111111001000111110110011001100", 
    150 to 151=> "00110101100001100011011110111101", 
    152 => "00000000000000000000000000000000", 
    153 => "00111111001001110010110111100100", 
    154 => "10000000000000000000000000000000", 
    155 => "00111110111001011000110101111010", 
    156 => "00110101100001100011011110111101", 
    157 => "00111111001100000000000000000000", 
    158 => "10000000000000000000000000000000", 
    159 => "00111110101100011011000010001010", 
    160 => "00110101100001100011011110111101", 
    161 => "10000000000000000000000000000000", 
    162 => "00111111011001001000110111010010", 
    163 => "00111111000100101000000100110100", 
    164 => "00111111011001101011110101101111", 
    165 => "00111111001010111100101100011101", 
    166 => "00110101100001100011011110111101", 
    167 => "10110101100001100011011110111101", 
    168 => "00000000000000000000000000000000", 
    169 => "00111110110100011011000101010011", 
    170 => "10000000000000000000000000000000", 
    171 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_efO is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_efO is
    component predict_ensemble_efO_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_efO_rom_U :  component predict_ensemble_efO_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


