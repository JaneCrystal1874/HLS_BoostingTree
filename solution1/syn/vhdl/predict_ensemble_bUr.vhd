-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_ensemble_bUr_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 195
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predict_ensemble_bUr_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000111010001011101000000", 
    1 => "00111110111110001011011010110111", 
    2 => "00111100010110000011100000111011", 
    3 => "00111110111110001100000000100111", 
    4 => "00111011010101100100110101111111", 
    5 => "10111011000010101010110010010111", 
    6 => "00111101010011011011010010001001", 
    7 => "00111001100111111110100001101000", 
    8 => "00111110101100000101010101110101", 
    9 => "00111010000011001100010101110110", 
    10 => "00111111011110010011001100001001", 
    11 => "10111010000011110110010010001100", 
    12 => "00111110111111100101110011110110", 
    13 => "00111101100010110001000000110100", 
    14 => "10111010001101001110000100011110", 
    15 => "10111000011100110100010100000111", 
    16 => "00111000101000111001001111101110", 
    17 => "00111010000011000011111100111110", 
    18 => "00111111011011000111011011110011", 
    19 => "00111111011000001011100111101101", 
    20 => "10111010000011011000111011001001", 
    21 => "00111111011101100101011000010101", 
    22 => "00111010001110101110100010011111", 
    23 => "00111101011000001010010000011010", 
    24 => "10111001101111101101011101000001", 
    25 => "10111001110011000111100011101010", 
    26 => "00111110000111110101010100010101", 
    27 => "00111001100010111111110000100010", 
    28 => "00111110000101011010100010011100", 
    29 => "00111001100111111110100001101000", 
    30 => "00111111011100110010000010000110", 
    31 => "00111101110010101110100111101110", 
    32 => "00111110111111000001101010101100", 
    33 => "00111110110010010101011101101001", 
    34 => "00111111010101111010001001011001", 
    35 => "00111110111001110110000000111001", 
    36 => "00111110111111111101100111111101", 
    37 => "10111010001010110111000100110010", 
    38 => "00111110110111000001001110111010", 
    39 => "00111111011010000010011111111010", 
    40 => "10111001100011010000100010010010", 
    41 => "00111001100001000001111011011110", 
    42 => "00111010011001111111111101011000", 
    43 => "10111001110001010010000111011110", 
    44 => "00111111011101010101000000100010", 
    45 => "00111001000110010001011110010100", 
    46 => "10111001001110001000110010100100", 
    47 => "00111110011001111000110110010011", 
    48 => "00111001100010000101000010011100", 
    49 => "00111001010000110000100011111111", 
    50 => "10111001000111100101010111000001", 
    51 => "00111111010110111010001011110000", 
    52 => "00111111010101000101110100010000", 
    53 => "00111110011000010011010100010001", 
    54 => "00111001101010011101111010001011", 
    55 => "00111110100010000010011000000011", 
    56 => "10111010000111111010010101001100", 
    57 => "00111110010010110100001011001100", 
    58 => "00111001100100001011010000011000", 
    59 => "00111110011011110011111100010000", 
    60 => "00111111011000100100000010010110", 
    61 => "00111111001000110011011111011010", 
    62 => "00111111000100111000111101111010", 
    63 => "10110110111010101110000110001011", 
    64 => "00111001010010000100011100101100", 
    65 => "00111101101000111110111110101110", 
    66 => "10111001000101001110010111010110", 
    67 => "00111101111000111101111001100001", 
    68 => "10111001010001000001010101101110", 
    69 => "00111110100100111011000110001110", 
    70 => "10111001000110110011000001110011", 
    71 => "00111001010010100110000000001011", 
    72 => "00111111011011011011001100111001", 
    73 => "00111000100111110110001000110000", 
    74 => "10110111110010010101001110011100", 
    75 => "00111111000010111111000100001111", 
    76 => "10111000110110000000000110110100", 
    77 => "00111110011000101110100011000000", 
    78 => "10111001000100101100110011110111", 
    79 => "00111110100001111010110010000010", 
    80 => "00111001001100100100001000000111", 
    81 => "00111110111010000000010110100011", 
    82 => "00111110101100001100111001001111", 
    83 => "00111110100010111101010100010011", 
    84 => "00111110001010110001001101011001", 
    85 => "10111001001110111011000111110010", 
    86 => "00110111010010010101001110011100", 
    87 => "00111000101111001011111001100010", 
    88 => "00111111010001000111101011000000", 
    89 => "00111001001001011010110011001101", 
    90 => "00110111110100011011011100010111", 
    91 => "10111000011110111010100010000010", 
    92 => "00111110001101110011000001000000", 
    93 => "00111111001111110011100110001111", 
    94 => "10111000110110100001101010010011", 
    95 => "00111000100011101001101100111001", 
    96 => "00111110111010100110101101110010", 
    97 => "00111101111100010000010011010101", 
    98 => "00111001000010000101000010011100", 
    99 => "00110111100001100011011110111101", 
    100 => "10110111111010101110000110001011", 
    101 => "00111110111100101111010100010010", 
    102 => "00111111001001010000010011010101", 
    103 => "10110111101110001000110010100100", 
    104 => "10111000111101110111011011000101", 
    105 => "00111111000110100110010111110001", 
    106 => "00111110110100001100000010101101", 
    107 => "00111110101110110101101110110100", 
    108 => "00111110010010110011000101111111", 
    109 => "00111111001101001011110111011100", 
    110 => "00111111000101111101101101011110", 
    111 => "00111110110000100100000000110001", 
    112 => "00111110001011000101110100100000", 
    113 => "10111001000001100011011110111101", 
    114 => "10110111110110100001101010010011", 
    115 => "00111110111010111100010101011000", 
    116 => "10111000011110111010100010000010", 
    117 => "00111110001011010101011011110011", 
    118 => "00111000110110100001101010010011", 
    119 => "00111110111100111001011110111011", 
    120 => "00111001010010000100011100101100", 
    121 => "00111110000001011111101111111000", 
    122 => "00111110001100101011010101011111", 
    123 => "00111000101010011101111010001011", 
    124 => "10110110111010101110000110001011", 
    125 => "00111000101000010111101100001111", 
    126 => "00110111110000001111000000100000", 
    127 => "00111110100011000011101001100100", 
    128 => "10111000011010101110000110001011", 
    129 => "10111001001001001010000001011110", 
    130 => "00111111000010100010110000100011", 
    131 => "00111000110100011011011100010111", 
    132 => "00111111010010111111011011000010", 
    133 => "10110111100001100011011110111101", 
    134 => "00111000001100000010100100101000", 
    135 => "00110111100101101111111010110101", 
    136 => "10111001000001000001111011011110", 
    137 => "00111111010001101001101101011010", 
    138 => "10111000100000100000010111111111", 
    139 => "00111111001110110100111000010010", 
    140 => "00111000110001010010000111011110", 
    141 => "00111111001110000110101100010110", 
    142 => "10111000100111110110001000110000", 
    143 => "00111110101110110011110111110011", 
    144 => "00111000111000000110010100110000", 
    145 => "00111111000101000100111010000011", 
    146 => "00111110110001111110111000001011", 
    147 => "10110111010110100001101010010011", 
    148 => "10111000101111001011111001100010", 
    149 => "00111000011110111010100010000010", 
    150 => "00111110110111101110011001110101", 
    151 => "00111110111100000000111111111110", 
    152 => "00111111000001001111001100110100", 
    153 => "00111111001100110000000101110101", 
    154 => "10111000100110110011000001110011", 
    155 => "00111110110100011011011111100001", 
    156 => "00111110111001101100110101101100", 
    157 => "00111111000000101100101110100111", 
    158 => "00110111110100011011011100010111", 
    159 => "10110111110100011011011100010111", 
    160 => "00111110111111001100011101101101", 
    161 => "10111000101100000010100100101000", 
    162 => "00111111000110000010110011010100", 
    163 => "10111000011011110001001101001001", 
    164 => "10110111010010010101001110011100", 
    165 => "00111110111100111100101100011101", 
    166 => "00111111011000101001110001100111", 
    167 => "10111000010111100100110001010001", 
    168 => "00111111001001100100101110111010", 
    169 => "00111110111101111110000000100110", 
    170 => "00111110110110110100110110001100", 
    171 => "00111000100011101001101100111001", 
    172 => "00110111101110001000110010100100", 
    173 => "00111111000001011101000101110000", 
    174 => "00111111001110111111111000001001", 
    175 => "00111110111000010101101001101100", 
    176 => "10110110010010010101001110011100", 
    177 => "00110111100001100011011110111101", 
    178 => "10110111101100000010100100101000", 
    179 => "00110111100111110110001000110000", 
    180 => "00111000011100110100010100000111", 
    181 => "00110111011010101110000110001011", 
    182 => "10111000000001100011011110111101", 
    183 => "00110111110010010101001110011100", 
    184 => "00111000010101011110100011010101", 
    185 to 194=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity predict_ensemble_bUr is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 195;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predict_ensemble_bUr is
    component predict_ensemble_bUr_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predict_ensemble_bUr_rom_U :  component predict_ensemble_bUr_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


